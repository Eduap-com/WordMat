/* tests for solving dimensional equations */

(load (physical_constants), 0);
0;

([a, c, d] : [1 ` m, 2 ` m, 3 ` m], 0);
0;

dimensionally (solve ([A = a * b, b = c * d], [A, b]));
[[A = 6 ` m^3,b = 6 ` m^2]];

foo : dimensionally (solve (x ` m = 5 ` ft, x));
[x = 5 ` ft/m];

dimensions (foo);
['dimensions(x) = 1];

foo `` 1;
[x = 381/250];

/* A quadratic equation. */

foo : dimensionally (solve (10^6 ` Btu = 1/2 * (10 ` lbm) * v^2, v));
[v = (-8*5^(5/2)) ` sqrt(Btu)/sqrt(lbm),v = 8*5^(5/2) ` sqrt(Btu)/sqrt(lbm)];

dimensions (foo);
['dimensions(v) = length/time,'dimensions(v) = length/time];

foo1 : foo `` m/s;
[v `` m/s = (-128*5^(13/2)*sqrt(1055)/sqrt(45359237)) ` m/s,
 v `` m/s = 128*5^(13/2)*sqrt(1055)/sqrt(45359237) ` m/s];

float (foo1);
[v `` m/s = (-21567.92463845543) ` m/s,v `` m/s = 21567.92463845543 ` m/s];

/* An example involving symbolic constants (Planck's and speed of light). */

(declare ([E, %lambda], dimensional),
 foo : block ([E : 10^-20 ` J], dimensionally (solve (E * %lambda = %c * %h, %lambda))));
[%lambda = %c*%h*(100000000000000000000 ` 1/J)];

dimensions (foo);
['dimensions(%lambda) = length];

foo1 : foo, constvalue;
[%lambda = 6207642188737199/312500000000000000000 ` m];

float (foo1);
[%lambda = 1.986445500395904E-5 ` m];

/* Stefan-Boltzmann law -- radiant heat transfer
 * Try it 2 ways -- one late substitution with numerical values, one early,
 * should turn out the same both ways
 */

declare ([E, %A, %T, sigma_sb], dimensional);
done;

foo : dimensionally (solve (E = %A * %T^4 * sigma_sb, %T));
[%T = %i*(E/(%A*sigma_sb))^(1/4),%T = -(E/(%A*sigma_sb))^(1/4),
 %T = -%i*(E/(%A*sigma_sb))^(1/4),%T = (E/(%A*sigma_sb))^(1/4)];

dimensions (foo);
['dimensions(%T) = 'dimensions(%i)*('dimensions(E)/('dimensions(%A)*'dimensions(sigma_sb)))^(1/4),
 'dimensions(%T) = -('dimensions(E)/('dimensions(%A)*'dimensions(sigma_sb)))^(1/4),
 'dimensions(%T) = -'dimensions(%i)*('dimensions(E)/('dimensions(%A)*'dimensions(sigma_sb)))^(1/4),
 'dimensions(%T) = ('dimensions(E)/('dimensions(%A)*'dimensions(sigma_sb)))^(1/4)];

foo_late : subst ([E = 7 ` kW, %A = 11 ` m^2, sigma_sb = 56697/10000/10^8 ` W/m^2/K^4], foo);
[%T = 1000*7^(1/4)*%i/623667^(1/4) ` K*kW^(1/4)/W^(1/4),
 %T = (-1000*7^(1/4)/623667^(1/4)) ` K*kW^(1/4)/W^(1/4),
 %T = (-1000*7^(1/4)*%i/623667^(1/4)) ` K*kW^(1/4)/W^(1/4),
 %T = 1000*7^(1/4)/623667^(1/4) ` K*kW^(1/4)/W^(1/4)];

dimensions (foo_late);
['dimensions(%T) = temperature,'dimensions(%T) = temperature,
 'dimensions(%T) = temperature,'dimensions(%T) = temperature];

foo1_late : foo_late `` K;
[%T `` K = 7^(1/4)*1000^(5/4)*%i/623667^(1/4) ` K,
 %T `` K = (-7^(1/4)*1000^(5/4)/623667^(1/4)) ` K,
 %T `` K = (-7^(1/4)*1000^(5/4)*%i/623667^(1/4)) ` K,
 %T `` K = 7^(1/4)*1000^(5/4)/623667^(1/4) ` K];

float (foo1_late);
[%T `` K = 325.4890020542776*%i ` K,%T `` K = (-325.4890020542776) ` K,
 %T `` K = (-325.4890020542776*%i) ` K,%T `` K = 325.4890020542776 ` K];

foo_early : dimensionally (solve (subst ([E = 7 ` kW, %A = 11 ` m^2, sigma_sb = 56697/10000/10^8 ` W/m^2/K^4], E = %A * %T^4 * sigma_sb), %T));
[%T = 1000*7^(1/4)*%i/623667^(1/4) ` K*kW^(1/4)/W^(1/4),
 %T = (-1000*7^(1/4)/623667^(1/4)) ` K*kW^(1/4)/W^(1/4),
 %T = (-1000*7^(1/4)*%i/623667^(1/4)) ` K*kW^(1/4)/W^(1/4),
 %T = 1000*7^(1/4)/623667^(1/4) ` K*kW^(1/4)/W^(1/4)];

dimensions (foo_early);
['dimensions(%T) = temperature,'dimensions(%T) = temperature,
 'dimensions(%T) = temperature,'dimensions(%T) = temperature];

foo1_early : foo_early `` K;
[%T `` K = 7^(1/4)*1000^(5/4)*%i/623667^(1/4) ` K,
 %T `` K = (-7^(1/4)*1000^(5/4)/623667^(1/4)) ` K,
 %T `` K = (-7^(1/4)*1000^(5/4)*%i/623667^(1/4)) ` K,
 %T `` K = 7^(1/4)*1000^(5/4)/623667^(1/4) ` K];

float (foo1_early);
[%T `` K = 325.4890020542776*%i ` K,%T `` K = (-325.4890020542776) ` K,
 %T `` K = (-325.4890020542776*%i) ` K,%T `` K = 325.4890020542776 ` K];

/* from mailing list 2018-12-06: "ezunits: strange multiplication behaviour?" */

(kill (x, dx, t, c1, c2, c3),
 x : c1*t^2 + c2*t + c3,
 dx : diff(x,t),
 0);
0;

declare ([c1, c2, c3], dimensional) $
done;

eqns : [ev(x, t=t0`s) = x0`m, ev(x, t=5`s) = 5`m, ev(dx, t=t0`s) = 1`m/s];
[c1*(t0^2 ` s^2)+c2*(t0 ` s)+c3 = x0 ` m,
 c3+(5 ` s)*c2+(25 ` s^2)*c1 = 5 ` m,
 c1*(2*t0 ` s)+c2 = 1 ` m/s];

/* call ratsimp(foo - bar) to test for equivalence of foo and bar,
 * since expected result doesn't match; that might or might not
 * be a bug in simplification or grind or something.
 */
(soln: dimensionally (solve (eqns, [c1, c2, c3])),
 expected: [[c1 = (t0-x0)/(t0^2-10*t0+25) ` m/s^2,
             c2 = (2*t0*x0-t0^2-10*t0+25)/(t0^2-10*t0+25) ` m/s,
             c3 = (-((10*t0-25)*x0-10*t0^2+25*t0)/(t0^2-10*t0+25)) ` m]],
 ratsimp (soln - expected));
[[0 = 0 ` m/s^2, 0 = 0 ` m/s, 0 = 0 ` m]];

ev (soln, t0=0, x0=0);
[[c1 = 0 ` m/s^2,c2 = 1 ` m/s,c3 = 0 ` m]];

eqns0 : subst ([t0 = 0, x0 = 0], eqns);
[c1*(0 ` s^2)+c2*(0 ` s)+c3 = 0 ` m,
 c3+(5 ` s)*c2+(25 ` s^2)*c1 = 5 ` m,
 c1*(0 ` s)+c2 = 1 ` m/s];

soln0: dimensionally (solve (eqns0, [c1, c2, c3]));
[[c1 = 0 ` m/s^2,c2 = 1 ` m/s,c3 = 0 ` m]];
