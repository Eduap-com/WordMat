(kill(all), 'done);
'done$

(load(fmin_cobyla),
  float_approx_equal_tolerance : 1e-12,
  fpprec: 32,
  'done);
'done$

/* the following tests are copied from share/cobyla/ex */

/*
 * Simple quadratic, no constraints:
 *
 * f = 10*(x1+1)^2+x2^2
 *
 * True solution: x1=-1, x2=0
 */
fmin_cobyla(10*(x1+1)^2+x2^2, [x1, x2], [1,1], iprint=1);
[[x1 = -.9999988829086158,x2 = 3.210519264934976e-6],
        2.278636555645255e-11, 86, 0]$

/*
 * 2D unit circle
 *
 * f = x1*x2
 * 1-x1^2-x2^2 >= 0
 *
 * True solution: x1=1/sqrt(2), x2=-1/sqrt(2)
 */
fmin_cobyla(x1*x2, [x1, x2], [1,1], constraints = [1>=x1^2+x2^2], iprint=1);
[[x1 = .7071058493484819,x2 = -.7071077130247994],-.4999999999992633,
66, 0];

/*
 * 3D ellipsoid calculation
 *
 * f = x1*x2*x3
 * 1-x1^2-2*x2^2-3*x3^2 >= 0
 *
 * True solution: x1=1/sqrt(3), x2=1/sqrt(6), x3=-1/3
 */
fmin_cobyla(x1*x2*x3, [x1, x2, x3], [1,1,1], constraints = [1-x1^2-2*x2^2-3*x3^2>=0], iprint=1);
[[x1 = 0.5773509172259506,x2 = 0.4082474453988019,x3 = -0.333333649184014],
-0.07856742013203198,94,0]$

/*
 * Weak Rosenbrock
 *
 * f = (x1^2-x2)^2 + (1+x1)^2
 *
 * True solution: x1=-1, x2=1
 */
fmin_cobyla((x1^2-x2)^2 + (1+x1)^2, [x1, x2], [1,1], iprint=1);
[[x1 = -0.9999938146669738,x2 = 0.9999869331284194],3.874310005553214e-11,270,
0]$

/*
 * Intermediate Rosenbrock
 *
 * f = 10*(x1^2-x2)^2 + (1+x1)^2
 *
 * True solution: x1=-1, x2=1
 */
fmin_cobyla(10*(x1^2-x2)^2 + (1+x1)^2, [x1, x2], [1,1], iprint=1, maxfun=2000);
[[x1 = -0.999946173141946,x2 = 0.999887157451855],3.166871186232891e-9,1668,0]$

/*
 * Equation 9.1.15 in Fletcher's book Practical Methods of
 * Optimization
 *
 * f = -x1-x2
 * x2-x1^2 >= 0
 * 1-x1^2-x2^2 >= 0
 *
 * True solution: x1=1/sqrt(2), x2=1/sqrt(2)
 */
fmin_cobyla(-x1-x2, [x1, x2], [1, 1], constraints = [x2-x1^2 >= 0, 1-x1^2-x2^2 >= 0], iprint=1);
[[x1 = 0.7071063653426506,x2 = 0.7071071970316142],-1.414213562374265,63,0]$

/*
 * Test problem 7 (Equation (14.4.2) in Fletcher's book)
 *
 * f = x3
 * 5*x1-x2+x3 >= 0
 * x3-x1^2-x2^2-4*x2 >= 0
 * x3-5*x1-x2 >= 0
 *
 * True solution: x1=0, x2 = -3, x3 = -3
 */
fmin_cobyla(x3, [x1, x2, x3], [1,1,1],
	    constraints = [5*x1-x2+x3>=0, x3-x1^2-x2^2-4*x2>=0, x3-5*x1-x2>=0],
            iprint=1);
[[x1 = -7.021903318376731e-18,x2 = -2.99999999788104,x3 = -2.99999999788104],
-2.99999999788104,40,0]$

/*
 * Test problem 8 (Rosen-Suzuki)
 *
 * f = x1^2 + x2^2 + 2*x3^2 + x4^2 - 5*x1 - 5*x2 - 21*x3 + 7*x4
 * 8-x1^2-x2^2-x3^2-x4^2-x1+x2-x3+x4 >= 0
 * 10-x1^2-2*x2^2-x3^2-2*x4^2+x1+x4 >= 0
 * 5-2*x1^2-x2^2-x3^2-2*x1+x2+x4
 *
 * True solution: x1=0, x2 = 1, x3 = 2, x4 = -1
 */
fmin_cobyla(x1^2 + x2^2 + 2*x3^2 + x4^2 - 5*x1 - 5*x2 - 21*x3 + 7*x4, [x1, x2, x3, x4],
            [1,1,1,1], 
            constraints = [8-x1^2-x2^2-x3^2-x4^2-x1+x2-x3+x4 >= 0,
             10-x1^2-2*x2^2-x3^2-2*x4^2+x1+x4 >= 0,
             5-2*x1^2-x2^2-x3^2-2*x1+x2+x4 >= 0],
            iprint = 1);
[[x1 = 3.53275766748882e-7,x2 = 0.9999989781691816,x3 = 2.000000039612459,
x4 = -1.000000156831474],-44.00000000000451,116,0]$

/*
 * Test problem 9 (Hock and Schittkowski 100)
 *
 * f = (x1-10)^2 + 5*(x2-12)^2 + x3^4 + 3*(x4-11)^2 + 
 *       10*x5^6 + 7*x6^2 + x7^4 - 4*x6*x7 - 10*x6 - 8*x7
 * 127-2*x1^2-3*x2^4-x3-4*x4^2-5*x5 >= 0
 * 282-7*x1-3*x2-10*x3^2-x4+x5 >= 0
 * 196-23*x1-x2^2-6*x6^2+8*x7 >= 0
 * -4*x1^2-x2^2+3*x1*x2-2*x3^2-5*x6+11*x7 >= 0
 *
 */
fmin_cobyla((x1-10)^2 + 5*(x2-12)^2 + x3^4 + 3*(x4-11)^2 + 
             10*x5^6 + 7*x6^2 + x7^4 - 4*x6*x7 - 10*x6 - 8*x7,
            makelist(concat(x,k), k, 1, 7),
            makelist(1,k,1,7), 
	    constraints = [
	     127-2*x1^2-3*x2^4-x3-4*x4^2-5*x5 >= 0,
	     282-7*x1-3*x2-10*x3^2-x4+x5 >= 0,
	     196-23*x1-x2^2-6*x6^2+8*x7 >= 0,
	     -4*x1^2-x2^2+3*x1*x2-2*x3^2-5*x6+11*x7 >= 0
            ],
            iprint = 1);
[[x1 = 2.330500551903484,x2 = 1.951372521275321,x3 = -0.4775346704060226,
  x4 = 4.365725270693961,x5 = -0.6244864327244813,x6 = 1.038131344158587,
  x7 = 1.594227021522186],680.6300573744938,414,0]$

/*
 * This problem is taken from page 415 of Luenberger's book Applied
 * Nonlinear Programming. It is to maximize the area of a hexagon of
 * unit diameter.
 *
 * f = -0.5d0*(x1*x4-x2*x3+x3*x9-x5*x9+x5*x8-x6*x7)
 * 1.0d0-x3^2-x4^2 >= 0
 * 1.0d0-x9^2 >= 0
 * 1.0d0-x5^2-x6^2 >= 0
 * 1.0d0-x1^2-(x2-x9)^2 >= 0
 * 1.0d0-(x1-x5)^2-(x2-x6)^2 >= 0
 * 1.0d0-(x1-x7)^2-(x2-x8)^2 >= 0
 * 1.0d0-(x3-x5)^2-(x4-x6)^2 >= 0
 * 1.0d0-(x3-x7)^2-(x4-x8)^2 >= 0
 * 1.0d0-x7^2-(x8-x9)^2 >= 0
 * x1*x4-x2*x3 >= 0
 * x3*x9 >= 0
 * -x5*x9 >= 0
 * x5*x8-x6*x7 >= 0
 * x9 >= 0
 *
 * True solution: x1=0, x2 = 1, x3 = 2, x4 = -1
 */
fmin_cobyla(-0.5d0*(x1*x4-x2*x3+x3*x9-x5*x9+x5*x8-x6*x7),
            makelist(concat(x,k), k, 1, 9),
            makelist(1,k,1,9),
            constraints=[
             1.0d0-x3^2-x4^2 >= 0,
             1.0d0-x9^2 >= 0,
             1.0d0-x5^2-x6^2 >= 0,
             1.0d0-x1^2-(x2-x9)^2 >= 0,
             1.0d0-(x1-x5)^2-(x2-x6)^2 >= 0,
             1.0d0-(x1-x7)^2-(x2-x8)^2 >= 0,
             1.0d0-(x3-x5)^2-(x4-x6)^2 >= 0,
             1.0d0-(x3-x7)^2-(x4-x8)^2 >= 0,
             1.0d0-x7^2-(x8-x9)^2 >= 0,
             x1*x4-x2*x3 >= 0,
             x3*x9 >= 0,
             -x5*x9 >= 0,
             x5*x8-x6*x7 >= 0,
             x9 >= 0
            ],
            iprint = 1);
[[x1 = .6883370204696033, x2 = .7253910298927142, 
x3 = - .2840386321677636, x4 = .9588128364996567, x5 = .6883369577994362, 
x6 = .7253910893632955, x7 = - .2840385493310775, x8 = .9588128610396814, 
x9 = - 5.803285177421437e-23], - .8660254037845714, 243, 0]$

/*
 * Maximum entropy estimate.  Based on an example from Kostas 
 * Oikonomou.
 *
 * Given a possibly unfair die where each side n has a probability 
 * of occurrence of xn, find the most likely value if it is known 
 * that the average value is av.
 *
 * Let the probabilities be x1, x2, x3, x4, x5, x6.  The criterion for 
 * most likely is maximizing the entropy H(X) = sum(-x*log(x), all X).
 * We are subject to the constraints x1+x2+x3+x4+x5+x6 = 1, of course, 
 * and to x1+2*x2+3*x3+4*x4+5*x5+6*x6 = av, since we know the average 
 * value.  And, of course, since these are probabilities, 0 <= xn <= 1.
 *
 * This example shows how to get equality constraints when fmin_coblya
 * normally wants inequality constraints.  If we want g(x) = 0, we can use 
 * the inequality constraints g(x) >= 0 and -g(x) >= 0.
 *
 * Although we want xn >= 0, the algorithm sometimes sets xn = 0, which 
 * causes problems when we evaluate xn*log(xn).  So, instead of xn >= 0, 
 * we use xn >= 1d-9.  (That is, xn - 1d-9 >= 0.)
 */ 
(HH(X) := -xreduce("+",map(lambda([x],x*log(x)),X)),
  die(av) :=
  fmin_cobyla(-HH([x1,x2,x3,x4,x5,x6]),
  	      [x1,x2,x3,x4,x5,x6],
	      makelist(1/6,k,1,6),
	      iprint=1,
	      constraints= [
               	x1 >= 1d-9, x2 >= 1d-9, x3 >= 1d-9, x4 >= 1d-9, x5 >= 1d-9, x6 >= 1d-9,
               	x1<=1, x2<=1, x3<=1, x4<=1, x5<=1, x6<=1,
		x1+x2+x3+x4+x5+x6-1 = 0,
                1*x1+2*x2+3*x3+4*x4+5*x5+6*x6=av]),
              'done);
            'done$


die(7/2);
[[x1 = .1666669204062052,x2 = .1666665386187796,
          x3 = .1666659607581757,x4 = 0.166667233111882,
          x5 = 0.166666894995565,x6 = .1666664521093927],-1.791759469225061,
          146, 0]$

die(1);
[[x1 = .9999999985294118,x2 = 1.176470448838174e-10,
          x3 = 1.176470617973713e-10,x4 = 1.176470548584774e-10,
          x5 = 1.176470500879878e-10,x6 = 1.176470604963287e-10],
         -1.4919606548618195e-8,
         58, 0]$

die(6);
[[x1 = 3.18181639022419e-10,x2 = 3.181816702474416e-10,
          x3 = 3.181817014724642e-10,x4 = 3.181816546349303e-10,
          x5 = 3.181815921848852e-10,x6 = .9999999990909101],
         -3.5699705929961904e-8,
         56, 0]$

/*
 * Maximum entropy estimate for a transportation problem.  Based on an
 * example from Kostas Oikonomou.
 *
 * There are 5 cities connected by two highways:
 *
 *  1 ----- 2 ----- 3 ----- 4
 *  |               |
 *  5---------------+
 *
 * So cities 1,2,3,4 are connected by one highway, and there's another
 * highway from 1 to 5 to 3.
 *
 * The number of cars the left cities 1, 2, and 4 is known.  The
 * number of cars that travelled the highway segment from 2 to 3 is
 * also known, and finally it is known that at least a certain number
 * travelled the 5 to 3 segment.  Given this inofrmation, we want to
 * know the most likely number (fraction) of cars that travelled
 * between each pair of cities on that day.  This is the 5x5 matrix C
 * = [c[i,j]] where c[i,i] represents the fraction of cars that left
 * city i and return to it.  Our information is:
 *
 * sum(c[i,j], j, 1, 5) = r[i] for i = 1, 2, 4
 *
 * c[1,3] + c[1,4] + c[2,4] = s[2,3] and 
 * c[1,3] + c[5,3] + c[1,4] >= s[5,3].
 *
 * Suppose (r1,r2,r4) = (.13,.25,.1) and (s23,s53) = (0.11, .07).
 * Then the maximum entropy solution is
 * 
 * matrix([.030790, .030790, .018816, .018816, .030790],
 *        [.059210, .059210, .059210, .059210, .059210],
 *        [.052,    .052,    .052,    .052,    .052   ],
 *        [.02,     .02,     .02,     .02,     .02    ],
 *        [.052,    .052,    .052,    .052,    .052   ],
 */
(HH(X) := -xreduce("+",map(lambda([x],x*log(x)),X)),
  C : 
  [c11,c12,c13,c14,c15,
  c21,c22,c23,c24,c25,
  c31,c32,c33,c34,c35,
  c41,c42,c43,c44,c45,
  c51,c52,c53,c54,c55],
  cars(r,s) := 
  fmin_cobyla(-HH(C) , 
    C,
    makelist(1/25,k,1,25),
    constraints =
    [xreduce("+",C)=1,
    c11+c12+c13+c14+c15=r[1],
    c21+c22+c23+c24+c25=r[2],
    c41+c42+c43+c44+c45=r[3],
    c13+c14+c23+c24=s[1],
    c13+c53+c14>=s[2]
    ],
    iprint=1,
    rhobeg = .1,
    rhoend = 1d-9
    ),
  'done);
'done$

cars([.13,.25,.1],[.11,.07]);
[[c11 = .03078947216080049, c12 = .03078947258983758, 
c13 = .01881578424530663, c14 = .01881579235550251, c15 = .03078947864855278, 
c21 = .05921052755891571, c22 = .05921051666669622, c23 = .03618421394514965, 
c24 = .03618420945404111, c25 = .05921053237519735, c31 = .05199998745697864, 
c32 = .05199999998006931, c33 = .05200001440859302, c34 = .05200000844126493, 
c35 = .05200000226927205, c41 = .02000000599466734, c42 = .01999999747226151, 
c43 = .01999999589953518, c44 = .02000000095933785, c45 = .01999999967419817, 
c51 = .05200000159627225, c52 = .05199999448887869, c53 = 0.0519999846606873, 
c54 = .05199999603531405, c55 = .05200001066267089], - 3.141900424608619, 
944, 0]$  

(reset(fpprec,float_approx_equal_tolerance), 'done);
'done$
