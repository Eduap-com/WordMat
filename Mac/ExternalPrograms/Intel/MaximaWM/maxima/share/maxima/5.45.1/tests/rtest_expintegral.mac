/*******************************************************************************

  Test file for the Exponential Integrals

  by Dieter Kaiser (2008)
*******************************************************************************/

kill(all);
done;

/* Define a test function for single values */

closeto(e,tol):=block([numer:true,abse],abse:abs(e),if(abse<tol) then true else abse);
closeto(e,tol):=block([numer:true,abse],abse:abs(e),if(abse<tol) then true else abse);

(test_value(actual, ref, digits) := closeto(realpart(actual)-realpart(ref), 10^(-digits)) and closeto(imagpart(actual)-imagpart(ref), 10^(-digits)), done);
done;

/*******************************************************************************
 At first we check the special values of the Exponential Integrals 
*******************************************************************************/

errcatch(expintegral_e(0,0));
[];
errcatch(expintegral_e(0,0.0));
[];
errcatch(expintegral_e(0,0.0b0));
[];

errcatch(expintegral_ei(0));
[];
errcatch(expintegral_ei(0.0));
[];
errcatch(expintegral_ei(0.0b0));
[];

expintegral_li(0);
0;
expintegral_li(0.0);
0.0;
expintegral_li(0.0b0);
0.0b0;

errcatch(expintegral_li(1));
[];
errcatch(expintegral_li(1.0));
[];
errcatch(expintegral_li(1.0b0));
[];

expintegral_si(0);
0;
expintegral_si(0.0);
0.0;
expintegral_si(0.0b0);
0.0b0;

expintegral_shi(0);
0;
expintegral_shi(0.0);
0.0;
expintegral_shi(0.0b0);
0.0b0;

errcatch(expintegral_ci(0));
[];
errcatch(expintegral_ci(0.0));
[];
errcatch(expintegral_ci(0.0b0));
[];

errcatch(expintegral_chi(0));
[];
errcatch(expintegral_chi(0.0));
[];
errcatch(expintegral_chi(0.0b0));
[];

/*******************************************************************************
   Simplifications for the Exponential Integrals 
*******************************************************************************/

expintegral_e(-1,z);
%e^(-z)*(z+1)/z^2;

expintegral_e(-1,10);
11*%e^-10/100;

expintegral_e(-1,10+%i);
(%i+11)*%e^(-%i-10)/(%i+10)^2;

expintegral_e(0,z);
%e^(-z)/z;

expintegral_e(0,10);
%e^-10/10;

expintegral_e(0,10+%i);
%e^(-10-%i)/(10+%i);

/* The case Ev(0) simplifies to 1/(v-1) only for Re(v)>1  */

(assume(v>1), expintegral_e(v,0));
1/(v-1);

expintegral_e(3/2+%i,0);
1/(%i+1/2);

errcatch(expintegral_e(1/2+%i,0));
[];

/* We don't simplify for infinities as an argument */

expintegral_e(-1,inf);
expintegral_e(-1,inf);

expintegral_e(v,infinity);
expintegral_e(v,infinity);

expintegral_e(minf,z);
expintegral_e(minf,z);

/* Realpart and imagpart for expintegral_e */

(assume(x_pos>0),done);
done;

/* a positive real value */
realpart(expintegral_e(v,x_pos));
expintegral_e(v,x_pos);
imagpart(expintegral_e(v,x_pos));
0;

/* a complex value */
realpart(expintegral_e(v,1+%i));
1/2*(expintegral_e(v,1-%i)+expintegral_e(v,1+%i));
imagpart(expintegral_e(v,1+%i));
1/2*%i*(expintegral_e(v,1-%i)-expintegral_e(v,1+%i));

/* Realpart and imagpart for expintegral_ei */

/* a real value */
realpart(expintegral_ei(x));
expintegral_ei(x);
imagpart(expintegral_ei(x));
0;

/* a complex value */
realpart(expintegral_ei(1+%i));
1/2*(expintegral_ei(1-%i)+expintegral_ei(1+%i));
imagpart(expintegral_ei(1+%i));
1/2*%i*(expintegral_ei(1-%i)-expintegral_ei(1+%i));

/* Realpart and imagpart for expintegral_si 
   expintegral_si has in addition reflection symmetry and
   for a pure imaginary argument the result is pure imaginary */

/* a real value */
realpart(expintegral_si(x));
expintegral_si(x);
imagpart(expintegral_si(x));
0;

/* an imaginary value */
realpart(expintegral_si(%i));
0;
imagpart(expintegral_si(%i));
-%i*expintegral_si(%i);

/* a complex value */
realpart(expintegral_si(1+%i));
1/2*(expintegral_si(1-%i)+expintegral_si(1+%i));
imagpart(expintegral_si(1+%i));
1/2*%i*(expintegral_si(1-%i)-expintegral_si(1+%i));

/* Limits of expintegral_si */

limit(expintegral_si(x),x,inf);
%pi/2;

limit(expintegral_si(x),x,minf);
-%pi/2;

/* Limits of expintegral_shi */

limit(expintegral_shi(x),x,inf);
inf;

limit(expintegral_shi(x),x,minf);
minf;

/* Limits of expintegral_chi */

limit(expintegral_chi(x),x,inf);
inf;

limit(expintegral_chi(x),x,minf);
inf;

/*******************************************************************************
   For a negative integer parameter we expand in a series
*******************************************************************************/

expintegral_e(-5,z);
120*(z^5/120+z^4/24+z^3/6+z^2/2+z+1)*%e^-z/z^6;

/*******************************************************************************
   For a half integral parameter we can expand in terms of the
   Erfc or Erf function using the flag expintexpand.
*******************************************************************************/

expintexpand:true;
true;

expintegral_e(1/2,z);
sqrt(%pi)/sqrt(z)*erfc(sqrt(z));

expintegral_e(-1/2,z);
sqrt(%pi)/(2*z^(3/2))*erfc(sqrt(z))+%e^(-z)/z;

/* Expansion in terms of Erf for z = 1/2 
   We test the Expansion against a pure numerical evaluation.
   The expansion works for complex argument too. 
   Attention: We have no support for Complex arguments of the Erf function. */

expintexpand:erf;
erf;

expintegral_e(5/2,1/2);
2*sqrt(%pi)*(1-erf(1/sqrt(2)))/(3*sqrt(2));

/* We test the expansion against a pure numerical evaluation */
test_value(%,expintegral_e(2.5,0.5),15),numer;
true;

expintegral_e(-5/2,1/2);
/*
8*sqrt(2)*(15*sqrt(%pi)*(1-erf(1/sqrt(2)))/8+21/(4*sqrt(2)*sqrt(%e)));
*/

2^(7/2)*(15*sqrt(%pi)*(1-erf(1/sqrt(2)))/8+(5/sqrt(2)+1/2^(5/2))/sqrt(%e));

test_value(%,expintegral_e(-2.5,0.5),13),numer;
true;

/*******************************************************************************
   For a parameter which is a positive integer we can expand
   the function in terms of the Exponential Integral Ei.
*******************************************************************************/

expintegral_e(3,z);
-z^2*(log(z)+(log(-1/z)-log(-z))/2+expintegral_ei(-z))/2-(z/2-1/2)*%e^-z;

/* We compare this with numerical values */

ratsimp(expintegral_e(3,1/2));
(sqrt(%e)*(2*log(2)+log(-1/2)-2*expintegral_ei(-1/2)-log(-2))+4)/(16*sqrt(%e));

test_value(%,expintegral_e(3,0.5),15),numer;
true;

(expand:expintegral_e(10,1/2),done);
done;

test_value(expand,expintegral_e(10,0.5),15),numer;
true;

(expand:expintegral_e(100,1/2),done);
done;

test_value(expand,expintegral_e(100,0.5),15),numer;
true;

expintexpand:false;
false;

/*******************************************************************************
   Do tests for additional float evaluation 
*******************************************************************************/

test_value(
  expintegral_e(1,-1.700598-0.612828*%i),
  1.229787425764198*%i-3.675726471068782,15);
true;

test_value(
  expintegral_e(1,-1.5-%i*18.0),
  0.181696882955049 + 0.16898654452488*%i,15);
true;

test_value(
  expintegral_e(1,-1.5-%i*180.0),
  .01998793885396577-.01484463667769751*%i,15);
true;

test_value(
  expintegral_e(1,-15.0-%i*50.0),
  62936.65453487506*%i-462.2396897671588,10);
true;

test_value(
  expintegral_e(1,-15.0-%i*180.0),
  15302.16784585461-9678.322938932864*%i,10);
true;

test_value(
  expintegral_e(1,-150.0-%i*540.0),
  2.479041623323267e+62*%i+2.105063890337474e+61,13-62);
true;

test_value(
  expintegral_e(1,1.5+%i*18),
  .01021327940204757-.006754558125326895*%i,15);
true;

test_value(
  expintegral_e(1,15.0+%i*180.0),
  1.129118870333903e-9*%i+1.261123517801268e-9,15);
true;

test_value(
  expintegral_e(1,150.0+%i*540.0),
  7.503677061484707e-69-1.036533879419174e-68*%i,15-69);
true;





/*******************************************************************************
   Do tests for Bigfloat evaluation (values from functions.wolfram.com) 
*******************************************************************************/

/* Remember actual fpprec */
(oldfpprec:fpprec, fpprec:64, done);
done;

test_value(
  expintegral_e(1,0.25b0),
  1.044282634443738194536438161232282251891528374744802718635140468b0,
  63);
true;

test_value(
  expintegral_e(1,0.50b0),
  0.5597735947761608117467959393150852352268468903163535152482932191b0,
  63);
true;

test_value(
  expintegral_e(1,1.50b0),
  0.1000195824066326519019093399116669782617300061403505850505670604b0,
  63);
true;

test_value(
  expintegral_e(1,2.50b0),
  0.02491491787026973549562801227460963594584838471142737701193454450b0,
  64);
true;

test_value(
  expintegral_e(1,0.5b0+%i),
  - 0.0713947110424527235558849799368449390033695834555289289265924760b0 +
  - 0.3574937736521626512548586934573247791553769710980144511429423771b0*%i,
  62);
true;

test_value(
  expintegral_ei(-0.5b0),
  -0.5597735947761608117467959393150852352268468903163535152482932191b0,
  63);
true;

test_value(
  expintegral_ei(0.5b0),
  0.4542199048631735799205238126628023652814055543526420451628177867b0,
  63);
true;

test_value(
  expintegral_ei(1.5b0),
  3.301285449129797837957411316134742787656606985453422100762913970b0,
  63);
true;

test_value(
  expintegral_ei(1.5b0+%i),
  2.799671509755731161198928033788660326920401659332834224954077897b0 + 
  2.737079221508684508327603325281307039723914975958035767630503279b0*%i,
  63);
true;

test_value(
  expintegral_li(-0.5b0),
  0.058454819131659372625658464865614145649609292000300491927658936b0 + 
  3.265670174417890088883763125722547571780846521093778812746639381b0*%i,
  63);
true;

test_value(
  expintegral_li(0.5b0),
  -0.3786710430610879767272071846365609805512340409782139969444209417b0,
  63);
true;

test_value(
  expintegral_li(1.5b0),
  0.1250649863152963559943500047955129365420883239309922910956161087b0,
  63);
true;

test_value(
  expintegral_li(1.5b0+%i),
  0.955549209862142878221358892328220253212569406502554250070344843b0 + 
  1.567751569664112401647194996566519972267813732803503976674771406b0*%i,
  62);
true;

test_value(
  expintegral_si(-0.5b0),
  -0.4931074180430666891616267075727646536413371384287211316602426140b0,
  63);
true;

test_value(
  expintegral_si(0.5b0),
  0.4931074180430666891616267075727646536413371384287211316602426140b0,
  63);
true;

test_value(
  expintegral_si(1.5b0),
  1.324683531172119680370472846875214042814140454625112248480722201b0,
  62.3b0);
true;

test_value(
  expintegral_si(1.5b0+%i),
  1.5324237219775529809013400344036774093828247429181012177841253510b0 + 
  0.6883092845662321107998443833405013522538814097236134325126725862b0*%i,
  63);
true;

test_value(
  expintegral_ci(-0.5b0),
  -0.177784078806612901335810271070569078090519474812621968666825358b0 + 
  3.141592653589793238462643383279502884197169399375105820974944592b0*%i,
  63);
true;

test_value(
  expintegral_ci(0.5b0),
   -0.1777840788066129013358102710705690780905194748126219686668253576b0,
  63);
true;

test_value(
  expintegral_ci(1.5b0),
  0.4703563171953998866750821522365605516152327005730752953941674282b0,
  62.2b0);
true;

test_value(
  expintegral_ci(1.5b0+%i),
  0.7839176551092182755417770543442248219437012644680041434724902541b0 - 
  0.0812194103150585766889706525256841552731980806778019973545925276b0*%i,
  63);
true;

test_value(
  expintegral_shi(-0.5b0),
  -0.5069967498196671958336598759889438002541262223344977802055555029b0,
  63);
true;

test_value(
  expintegral_shi(0.5b0),
  0.5069967498196671958336598759889438002541262223344977802055555029b0,
  63);
true;

test_value(
  expintegral_shi(1.5b0),
  1.700652515768215244929660328023204882959168495796886342906740515b0,
  63);
true;

test_value(
  expintegral_shi(1.5b0+%i),
  1.405456250564077987167827011345745730833834776665624179949753110b0 + 
  1.324296049597592107364382165946694647067190542728881672301521998b0*%i,
  63);
true;

test_value(
  expintegral_chi(-0.5b0),
  -0.052776844956493615913136063326141434972720667981855735042737716b0 + 
  3.141592653589793238462643383279502884197169399375105820974944592b0*%i,
  63);
true;

test_value(
  expintegral_chi(0.5b0),
  -0.05277684495649361591313606332614143497272066798185573504273771621b0,
  63);
true;

test_value(
  expintegral_chi(1.5b0),
  1.600632933361582593027750988111537904697438489656535757856173455b0,
  63);
true;

test_value(
  expintegral_chi(1.5b0+%i),
  1.394215259191653174031101022442914596086566882667210045004324787b0 + 
  1.412783171911092400963221159334612392656724433229154095328981281b0*%i,
  63);
true;


/* restore fpprec */
(fpprec:oldfpprec, done);
done;

/*******************************************************************************
   Do tests for additional big float evaluation 
*******************************************************************************/

/* Remember actual fpprec */
(oldfpprec:fpprec, fpprec:64, done);
done;

test_value(
  expintegral_e(1,-1.5B0-%i*18.0B0),
  1.689865445248795461022355866185975300284302677290211138169639712b-1*%i
 +1.816968829550486868009237590887639256845378383882275967782801257b-1,63);
true;

test_value(
  expintegral_e(1,-15.0B0-%i*50.0B0),
  6.293665453487508854049428479450922789578087068032898765875144175b4*%i
 -4.62239689767167158016168999268727094583699040537958778438547305b2,59);
true;

test_value(
  expintegral_e(1,-1.5B0-%i*180.0B0),
  1.998793885396577954161433015440646790143523658773070463290940391b-2
 -1.48446366776975235341069111717359420933661819609933627048078479b-2*%i,64);
true;

test_value(
  expintegral_e(1,-15.0B0-%i*180.0B0),
  1.530216784585460659290957316900806622008438558612666623998533076b4
 -9.678322938932862392009065659301165442754946683378713459319981218b3*%i,59);
true;

test_value(
  expintegral_e(1,-150.0B0-%i*540.0B0),
  2.47904162332326778788226522449358779416653162097669293288256403b62*%i
 +2.105063890337477483794346786409993155624883726578689067616685218b61,1);
true;

test_value(
  expintegral_e(1,1.5B0+%i*18.0B0),
  1.021327940204755864240745590773899499558121729025330486880547885b-2
 -6.754558125326884112691473105665013998699325818242672495399974279b-3*%i,65);
true;

test_value(
  expintegral_e(1,15.0B0+%i*180.0B0),
  1.129118870333903101943908390287222351537018836722867882019975027b-9*%i
 +1.261123517801267593713906360450736314138456246082714062225342743b-9,72);
true;

test_value(
  expintegral_e(1,150.0B0+%i*540.0B0),
  7.50367706148470796758191535417179842322266910293477644515984948b-69
 -1.03653387941917390868865781356557208741441722016128718318801276b-68*%i,-64-69);
true;


/* restore fpprec */
(fpprec:oldfpprec, done);
done;

/*******************************************************************************
   Do tests for a parameter not an positive integer (double float arithmetic)
*******************************************************************************/

test_value(
  expintegral_e(0.5,0.5),
  0.7953794908467029,
  15);
true;

/* functions.wolfram.com get a small imaginary part.
   Our algorithm gives a pure real result. That's correct. */

test_value(
  expintegral_e(1.5,0.5),
  0.4176818285785640 + 0.10d-16*%i,
  15);
true;

test_value(
  expintegral_e(1.5,1.5),
  0.08475846798926254 + 0.10d-17*%i,
  15);
true;

/* The algorithm works for an Complex parameter (not Bigfloat) too */

test_value(
  expintegral_e(-0.25+%i,0.5),
  0.7029675553348383 - 1.0854583859408265*%i,
  15);
true;

test_value(
  expintegral_e(0.5+%i,0.5),
  0.5037890474837921 - 0.4713445822591324*%i,
  15);
true;

test_value(
  expintegral_e(0.5+%i,1.5),
  0.10617497621984483 - 0.04370294969886679*%i,
  15);
true;

/* For a negative integer as parameter the function will be expanded in a
   finite series. We compare this result with the direct numerically 
   evaluation of the function. */

test_value(expintegral_e(-3,0.5)-expintegral_e(-3.0,0.5),0.0,13);
true;

/*******************************************************************************
   Do tests for a parameter not an integer (Bigfloat arithmetic)
*******************************************************************************/

/* Remember actual fpprec */
(oldfpprec:fpprec, fpprec:64, done);
done;

test_value(
  expintegral_e(0.5,0.5b0),
  0.7953794908467028960691560442509551305541581704269437959894550131b0,
  61);
true;

/* functions.wolfram.com get a small imaginary part.
   Our algorithm gives a pure real result. That's correct. */

test_value(
  expintegral_e(1.5,0.5b0),
  0.4176818285785639511384430257314057763296781005474301153763293043b0 + 
  0.10b-64*%i,
  62);
true;

test_value(
  expintegral_e(1.5,1.5b0),
  0.08475846798926253566550159750486026149596073485977905694436004042b0 + 
  0.10b-65*%i,
  63);
true;

/* restore fpprec */
(fpprec:oldfpprec, done);
done;

/*******************************************************************************
   We check the transformation to another representation
*******************************************************************************/

/* to prevent the simplification of 1/2*(log(z)-log(1/z))=0 which is wrong
   for z a negative and real value we switch of logexpand */

(oldlogexpand:logexpand, logexpand:false);
false;

expintrep:gamma_incomplete;
gamma_incomplete;

expintegral_e(n,z);
gamma_incomplete(1-n,z)*z^(n-1);

expintegral_e(n,z);
z^(n-1)*gamma_incomplete(1-n,z);

expintegral_e1(z);
gamma_incomplete(0,z);

expintegral_ei(z);
(log(z)-log(1/z))/2-log(-z)-gamma_incomplete(0,-z);

expintegral_li(z);
(log(log(z))-log(1/log(z)))/2-log(-log(z))-gamma_incomplete(0,-log(z));

expintegral_si(z);
%i*(-log(%i*z)+log(-%i*z)-gamma_incomplete(0,%i*z)+gamma_incomplete(0,-%i*z))/2;

expintegral_ci(z);
log(z)-(log(%i*z)+log(-%i*z)+gamma_incomplete(0,%i*z)+gamma_incomplete(0,-%i*z))/2;

expintegral_shi(z);
(log(z)-log(-z)+gamma_incomplete(0,z)-gamma_incomplete(0,-z))/2;

expintegral_chi(z);
(-log(z)+log(-z)+gamma_incomplete(0,z)+gamma_incomplete(0,-z))/-2;

expintrep:false;
false;

(logexpand:oldlogexpand,done);
done;

/* Do the functions have the appropriate symmetrie? 
   
   With the exception of exponential_ci we get for all tests a double float
   zero or a Bigfloat zero. Because we use numercial evaluation this is not
   natural and perhaps an effect only true with the GCL Compiler.
   For the function expintegral_ci we get a small imaginary contribution which
   is nearby zero.

   Can this be verified by other Compilers?
*/

z:0.5+%i;
0.5+%i;

expintegral_e(1,z) - conjugate(expintegral_e(1,conjugate(z)));
0.0;

expintegral_e(2,z) - conjugate(expintegral_e(2,conjugate(z)));
0.0;

expintegral_e(5,z) - conjugate(expintegral_e(5,conjugate(z)));
0.0;

expintegral_e(10,z) - conjugate(expintegral_e(10,conjugate(z)));
0.0;

expintegral_e1(z) - conjugate(expintegral_e1(conjugate(z)));
0.0;

expintegral_ei(z) - conjugate(expintegral_ei(conjugate(z)));
0.0;

expintegral_li(z) - conjugate(expintegral_li(conjugate(z)));
0.0;

expintegral_si(z) - conjugate(expintegral_si(conjugate(z)));
0.0;

test_value(
  expintegral_ci(z) - conjugate(expintegral_ci(conjugate(z))),
  0.0,15);
true;

expintegral_shi(z) - conjugate(expintegral_shi(conjugate(z)));
0.0;

expintegral_chi(z) - conjugate(expintegral_chi(conjugate(z)));
0.0;

/* The same for Bigfloats */

z:0.5b0+%i;
0.5b0+%i;

expintegral_e(1,z) - conjugate(expintegral_e(1,conjugate(z)));
0.0b0;

expintegral_e(2,z) - conjugate(expintegral_e(2,conjugate(z)));
0.0b0;

expintegral_e(5,z) - conjugate(expintegral_e(5,conjugate(z)));
0.0b0;

expintegral_e(10,z) - conjugate(expintegral_e(10,conjugate(z)));
0.0b0;

expintegral_e1(z) - conjugate(expintegral_e1(conjugate(z)));
0.0b0;

expintegral_ei(z) - conjugate(expintegral_ei(conjugate(z)));
0.0b0;

expintegral_li(z) - conjugate(expintegral_li(conjugate(z)));
0.0b0;

expintegral_si(z) - conjugate(expintegral_si(conjugate(z)));
0.0b0;

expintegral_ci(z) - conjugate(expintegral_ci(conjugate(z)));
0.0b0;

expintegral_shi(z) - conjugate(expintegral_shi(conjugate(z)));
0.0b0;

expintegral_chi(z) - conjugate(expintegral_chi(conjugate(z)));
0.0b0;

kill(z);
done;

/******************************************************************************

   Define test functions to do the tests with the numerical data
   of the tables of A&S.

   This routine is based on the algorithm to test the Wronskians in the
   file rtest14.mac which was implemented by Raymond Toy.

******************************************************************************/

(test_table(func,table,rows,eps) :=
block([badpoints : [],
       abserr    : 0,
       maxerr    : -1,
       numer     : true],
  for i:1 thru rows step 1 do
  (
    z      : table[i,0],
    result : rectform(func(z)),
    answer : table[i,1],
    abserr : abs(result-answer),
    maxerr : max(maxerr,abserr),
    if abserr > eps then
    (
      badpoints : cons ([z,result,answer,abserr],badpoints)
    )
  ),
  if badpoints # [] then
    cons(maxerr,badpoints)
  else
    badpoints
),done);
done;

/* Test function for a table with Complex values */

(test_complex_table(func,table,rows,eps) :=
block([badpoints : [],
       abserr    : 0,
       maxerr    : -1,
       numer     : true],
  for i:1 thru rows step 1 do
  (
    z      : table[i,0]+%i*table[i,1],
    result : rectform(func(z)),
    answer : (table[i,2]+%i*table[i,3]),
    abserr : abs(result-answer),
    maxerr : max(maxerr,abserr),
    if abserr > eps then
    (
      badpoints : cons ([z,result,answer,abserr],badpoints)
    )
  ),
  if badpoints # [] then
    cons(maxerr,badpoints)
  else
    badpoints
),done);
done;

/*****************************************************************************/

/* Values for E[-2](z), E[-3](z) and E[-4](z) */

block(
em2 : make_array(flonum,5,2),
fillarray(em2,[
0.0,0.0,               /* the first entry isn't tested */
0.5,15.7697971525285,
1.0,1.83939720585721
]),done);
done;

block(
em3 : make_array(flonum,5,2),
fillarray(em3,[
0.0,   0.0,               /* the first entry isn't tested */
0.5,  95.8318442345961,
1.0,  5.88607105874308
]),done);
done;

block(
em4 : make_array(flonum,5,2),
fillarray(em4,[
0.0,   0.0,               /* the first entry isn't tested */
0.5, 767.8678151961939,
1.0, 23.91216367614375
]),done);
done;

/* Values for E2(z) from wolfram.functions.com */

block(
e2 : make_array(flonum,20,4),
fillarray(e2,[
0.0, 0.0,   0.0,                0.0,
0.5, 0.0,   0.326643862324553,  0.0,
1.0, 0.0,   0.148495506775922,  0.0,
1.5, 0.0,   0.0731007865384809, 0.0,

-1.5, 0.0, -0.47023910335663,   -4.71238898038469,
-1.0, 0.0,  0.82316401210311,   -3.14159265358979,
-0.5, 0.0,  1.42161131826854,   -1.57079632679490,

0.5, 1.0,   0.005913495891524,  -0.260236353676039,
1.0, 1.0,   0.0191599508550726, -0.1305169650657347,
1.5, 1.0,   0.0152091306647864, -0.0662678635026173,

-1.5, 1.0,  -2.18255375782701,  -1.57830995398609,
-1.0, 1.0,  -1.04975484772724,  -1.27655210369426,
-0.5, 1.0,  -0.386354424417090, -0.872308287488887
]),done);
done;

/* Do the tests with the above test data */

test_table(lambda([z],expintegral_e(-2,z)),'em2,2,3.5e-14);
[];

test_table(lambda([z],expintegral_e(-3,z)),'em3,2,2.9e-14);
[];

test_table(lambda([z],expintegral_e(-4,z)),'em4,2,1.0e-15);
[];

test_complex_table(lambda([z],expintegral_e(2,z)),'e2,12,3.9e-15);
[];

/*****************************************************************************
   A&S Table 5.1 p. 238, values for Si(x)/x from 0.00 through 0.50 
******************************************************************************/

block(
si_1 : make_array(flonum,51,2),
fillarray(si_1,[   /* We start the loop for the test with i=1. */
0.00,1.0000000000, /* Therefore we don't do the the test for the first value */
0.01,0.9999944444,
0.02,0.9999777781,
0.03,0.9999500014,
0.04,0.9999111154,
0.05,0.9998611215,
0.06,0.9998000216,
0.07,0.9997278178,
0.08,0.9996445127,
0.09,0.9995501094,
0.10,0.9994446111,
0.11,0.9993280218,
0.12,0.9992003455,
0.13,0.9990615870,
0.14,0.9989117512,
0.15,0.9987508435,
0.16,0.9985788696,
0.17,0.9983958357,
0.18,0.9982017486,
0.19,0.9979966151,
0.20,0.9977804427,
0.21,0.9975532390,
0.22,0.9973150122,
0.23,0.9970657709,
0.24,0.9968055242,
0.25,0.9965342813,
0.26,0.9962520519,
0.27,0.9959588464,
0.28,0.9956546750,
0.29,0.9953395489,
0.30,0.9950134793,
0.31,0.9946764779,
0.32,0.9943285570,
0.33,0.9939697288,
0.34,0.9936000064,
0.35,0.9932194028,

0.36,0.9928279320,
0.37,0.9924256078,
0.38,0.9920124449,
0.39,0.9915884579,
0.40,0.9911536619,
0.41,0.9907080728,
0.42,0.9902517063,
0.43,0.9897845790,
0.44,0.9893067074,
0.45,0.9888181089,
0.46,0.9883188008,
0.47,0.9878088010,
0.48,0.9872881278,
0.49,0.9867567998,
0.50,0.9862148361
]),done);
done;

test_table(lambda([z],expintegral_si(z)/z),'si_1,50,1.25e-10);
[];

/******************************************************************************
   A&S Table 5.1 p. 239-243, values for Si(x) from 0.50 through 10.0
******************************************************************************/

block(
si_2 : make_array(flonum,231,2),
fillarray(si_2,[

0.50,0.4931074180,
0.51,0.5026877506,
0.52,0.5122515212,
0.53,0.5217984228,
0.54,0.5313281492,
0.55,0.5408403951,
0.56,0.5503348563,
0.57,0.5598112298,
0.58,0.5692692137,
0.59,0.5787085069,
0.60,0.5881288096,
0.61,0.5975298233,
0.62,0.6069112503,
0.63,0.6162727944,
0.64,0.6256141603,
0.65,0.6349350541,
0.66,0.6442351831,
0.67,0.6535142557,
0.68,0.6627719817,
0.69,0.6720080721,
0.70,0.6812222391,
0.71,0.6904141965,
0.72,0.6995836590,
0.73,0.7087303430,
0.74,0.7178539660,
0.75,0.7269542472,
0.76,0.7360309067,
0.77,0.7450836664,
0.78,0.7541122494,
0.79,0.7631163804,
0.80,0.7720957855,
0.81,0.7810501921,
0.82,0.7899793293,
0.83,0.7988829277,
0.84,0.8077607191,
0.85,0.8166124372,
0.86,0.8254378170,
0.87,0.8342365953,
0.88,0.8430085102,
0.89,0.8517533016,
0.90,0.8604707107,
0.91,0.8691604808,
0.92,0.8778223564,
0.93,0.8864560839,
0.94,0.8950614112,
0.95,0.9036380880,
0.96,0.9121858656,
0.97,0.9207044970,
0.98,0.9291937370,
0.99,0.9376533420,

1.00,0.9460830704,
1.01,0.9544826820,
1.02,0.9628519387,
1.03,0.9711906039,
1.04,0.9794984431,
1.05,0.9877752233,
1.06,0.9960207135,
1.07,1.0042346846,
1.08,1.0124169091,
1.09,1.0205671617,
1.10,1.0286852187,
1.11,1.0367708583,
1.12,1.0448238608,
1.13,1.0528440082,
1.14,1.0608310845,
1.15,1.0687848757,
1.16,1.0767051696,
1.17,1.0845917561,
1.18,1.0924444270,
1.19,1.1002629760,
1.20,1.1080471990,
1.21,1.1157968937,
1.22,1.1235118599,
1.23,1.1311918994,
1.24,1.1388368160,
1.25,1.1464464157,
1.26,1.1540205063,
1.27,1.1615588978,
1.28,1.1690614023,
1.29,1.1765278340,
1.30,1.1839580091,
1.31,1.1913517459,
1.32,1.1987088649,
1.33,1.2060291886,
1.34,1.2133125418,
1.35,1.2205587513,
1.36,1.2277676460,
1.37,1.2349390571,
1.38,1.2420728180,
1.39,1.2491687640,
1.40,1.2562267328,
1.41,1.2632465642,
1.42,1.2702281004,
1.43,1.2771711854,
1.44,1.2840756658,
1.45,1.2909413902,
1.46,1.2977682094,
1.47,1.3045559767,
1.48,1.3113045473,
1.49,1.3180137788,

1.50,1.3246835312,
1.51,1.3313136664,
1.52,1.3379040489,
1.53,1.3444545453,
1.54,1.3509650245,
1.55,1.3574353577,
1.56,1.3638654183,
1.57,1.3702550823,
1.58,1.3766042276,
1.59,1.3829127345,
1.60,1.3891804859,
1.61,1.3954073666,
1.62,1.4015932640,
1.63,1.4077380678,
1.64,1.4138416698,
1.65,1.4199039644,
1.66,1.4259248482,
1.67,1.4319042202,
1.68,1.4378419816,
1.69,1.4437380361,
1.70,1.4495922897,
1.71,1.4554046507,
1.72,1.4611750299,
1.73,1.4669033404,
1.74,1.4725894974,
1.75,1.4782334189,
1.76,1.4838350249,
1.77,1.4893942379,
1.78,1.4949109830,
1.79,1.5003851872,
1.80,1.5058167803,
1.81,1.5112056942,
1.82,1.5165518633,
1.83,1.5218552243,
1.84,1.5271157165,
1.85,1.5323332813,
1.86,1.5375078626,
1.87,1.5426394066,
1.88,1.5477278621,
1.89,1.5527731800,
1.90,1.5577753137,
1.91,1.5627342192,
1.92,1.5676498545,
1.93,1.5725221801,
1.94,1.5773511591,
1.95,1.5821367567,
1.96,1.5868789407,
1.97,1.5915776810,
1.98,1.5962329502,
1.99,1.6008447231,

2.0,1.6054129768,
2.1,1.6486986362,
2.2,1.6876248272,
2.3,1.7222074818,
2.4,1.7524855008,
2.5,1.7785201734,
2.6,1.8003944505,
2.7,1.8182120765,
2.8,1.8320965891,
2.9,1.8421901946,
3.0,1.8486525280,
3.1,1.8516593077,
3.2,1.8514008970,
3.3,1.8480807828,
3.4,1.8419139833,
3.5,1.8331253987,
3.6,1.8219481156,
3.7,1.8086216809,
3.8,1.7933903548,
3.9,1.7765013604,
4.0,1.7582031389,
4.1,1.7387436265,
4.2,1.7183685637,
4.3,1.6973198507,
4.4,1.6758339594,
4.5,1.6541404144,
4.6,1.6324603525,
4.7,1.6110051718,
4.8,1.5899752782,
4.9,1.5695589381,
5.0,1.5499312449,
5.1,1.5312532047,
5.2,1.5136709468,
5.3,1.4973150636,
5.4,1.4823000826,
5.5,1.4687240727,
5.6,1.4566683847,
5.7,1.4461975285,
5.8,1.4373591823,
5.9,1.4301843341,
6.0,1.4246875513,
6.1,1.4208673734,
6.2,1.4187068241,
6.3,1.4181740348,
6.4,1.4192229740,
6.5,1.4217942744,
6.6,1.4258161486,
6.7,1.4312053853,
6.8,1.4378684161,
6.9,1.4457024427,

7.0,1.4545966142,
7.1,1.4644332441,
7.2,1.4750890554,
7.3,1.4864364451,
7.4,1.4983447533,
7.5,1.5106815309,
7.6,1.5233137914,
7.7,1.5361092381,
7.8,1.5489374581,
7.9,1.5616710702,
8.0,1.5741868217,
8.1,1.5863666225,
8.2,1.5980985106,
8.3,1.6092775419,
8.4,1.6198065968,
8.5,1.6295970994,
8.6,1.6385696454,
8.7,1.6466545309,
8.8,1.6537921861,
8.9,1.6599335052,
9.0,1.6650400758,
9.1,1.6690843056,
9.2,1.6720494480,
9.3,1.6739295283,
9.4,1.6747291725,
9.5,1.6744633423,
9.6,1.6731569803,
9.7,1.6708445697,
9.8,1.6675696169,
9.9,1.6633840566,
10.,1.6583475942
]),done);
done;

test_table(lambda([z],expintegral_si(z)),'si_2,230,1.95e-10);
[];

/******************************************************************************
   A&S Table 5.1 p. 238, values for (Ci(x)-log(x)-%gamma)/x 
                         from 0.00 through 0.50
******************************************************************************/

block(
ci_1 : make_array(flonum,55,2),
fillarray(ci_1,[
0.00,-0.2500000000,
0.01,-0.2499989583,
0.02,-0.2499958333,
0.03,-0.2499906250,
0.04,-0.2499833339,
0.05,-0.2499739598,
0.06,-0.2499625030,
0.07,-0.2499489639,
0.08,-0.2499333429,
0.09,-0.2499156402,
0.10,-0.2498958564,
0.11,-0.2498739923,
0.12,-0.2498500480,
0.13,-0.2498240244,
0.14,-0.2497959223,
0.15,-0.2497657422,
0.16,-0.2497334850,
0.17,-0.2496991516,
0.18,-0.2496627429,
0.19,-0.2496242598,
0.20,-0.2495837035,
0.21,-0.2495410749,
0.22,-0.2494963752,
0.23,-0.2494496056,
0.24,-0.2494007674,
0.25,-0.2493498618,
0.26,-0.2492968902,
0.27,-0.2492418540,
0.28,-0.2491847546,
0.29,-0.2491255938,
0.30,-0.2490643727,
0.31,-0.2490010933,
0.32,-0.2489357573,
0.33,-0.2488683662,
0.34,-0.2487989219,
0.35,-0.2487274263,
0.36,-0.2486538813,
0.37,-0.2485782887,
0.38,-0.2485006507,
0.39,-0.2484209693,
0.40,-0.2483392466,
0.41,-0.2482554849,
0.42,-0.2481696860,
0.43,-0.2480818528,
0.44,-0.2479919870,
0.45,-0.2479000913,
0.46,-0.2478061685,
0.47,-0.2477102206,
0.48,-0.2476122500,
0.49,-0.2475122600,
0.50,-0.2474102526]), done);
done;

test_table(
  lambda([z],(expintegral_ci(z)-log(z)-%gamma)/z^2),'ci_1,50,1.95e-10);
[];

/******************************************************************************
   A&S Table 5.1 p. 239-243, values for Ci(x) from 0.50 through 10.0
******************************************************************************/

block(
ci_2 : make_array(flonum,235,2),
fillarray(ci_2,[

0.50,-0.1777840788,
0.51,-0.1604532390,
0.52,-0.1435537358,
0.53,-0.1270707938,
0.54,-0.1109904567,
0.55,-0.0952995274,
0.56,-0.0799855129,
0.57,-0.0650365744,
0.58,-0.0504414815,
0.59,-0.0361895707,
0.60,-0.0222707070,
0.61,-0.0086752486,
0.62,+0.0046059849,
0.63,+0.0175817424,
0.64,+0.0302603686,
0.65,+0.0426498293,
0.66,+0.0547577343,
0.67,+0.0665913594,
0.68,+0.0781576659,
0.69,+0.0894633195,
0.70,+0.1005147070,
0.71,+0.1113179525,
0.72,+0.1218789322,
0.73,+0.1322032879,
0.74,+0.1422964404,
0.75,+0.1521636010,
0.76,+0.1618097827,
0.77,+0.1712398110,
0.78,+0.1804583335,
0.79,+0.1894698290,
0.80,+0.1982786160,
0.81,+0.2068888610,
0.82,+0.2153045859,
0.83,+0.2235296752,
0.84,+0.2315678824,
0.85,+0.2394228368,
0.86,+0.2470980486,
0.87,+0.2545969153,
0.88,+0.2619227264,
0.89,+0.2690786687,
0.90,+0.2760678305,
0.91,+0.2828932065,
0.92,+0.2895577018,
0.93,+0.2960641358,
0.94,+0.3024152458,
0.95,+0.3086136908,
0.96,+0.3146620547,
0.97,+0.3205628495,
0.98,+0.3263185183,
0.99,+0.3319314382,

1.00,0.3374039229,
1.01,0.3427382254,
1.02,0.3479365405,
1.03,0.3530010067,
1.04,0.3579337091,
1.05,0.3627366810,
1.06,0.3674119060,
1.07,0.3719613201,
1.08,0.3763868132,
1.09,0.3806902312,
1.10,0.3848733774,
1.11,0.3889380142,
1.12,0.3928858645,
1.13,0.3967186134,
1.14,0.4004379090,
1.15,0.4040453647,
1.16,0.4075425593,
1.17,0.4109310390,
1.18,0.4142123185,
1.19,0.4173878816,
1.20,0.4204591829,
1.21,0.4234276482,
1.22,0.4262946760,
1.23,0.4290616379,
1.24,0.4317298802,
1.25,0.4343007240,
1.26,0.4367754665,
1.27,0.4391553815,
1.28,0.4414417205,
1.29,0.4436357130,
1.30,0.4457385675,
1.31,0.4477514723,
1.32,0.4496755955,
1.33,0.4515120863,
1.34,0.4532620753,
1.35,0.4549266752,
1.36,0.4565069811,
1.37,0.4580040711,
1.38,0.4594190071,
1.39,0.4607528349,
1.40,0.4620065851,
1.41,0.4631812730,
1.42,0.4642778995,
1.43,0.4652974513,
1.44,0.4662409014,
1.45,0.4671092094,
1.46,0.4679033219,
1.47,0.4686241732,
1.48,0.4692726848,
1.49,0.4698497667,

1.50,0.4703563172,
1.51,0.4707932232,
1.52,0.4711613608,
1.53,0.4714615952,
1.54,0.4716947815,
1.55,0.4718617642,
1.56,0.4719633785,
1.57,0.4720004495,
1.58,0.4719737932,
1.59,0.4718842164,
1.60,0.4717325169,
1.61,0.4715194840,
1.62,0.4712458984,
1.63,0.4709125325,
1.64,0.4705201507,
1.65,0.4700695096,
1.66,0.4695613580,
1.67,0.4689964372,
1.68,0.4683754812,
1.69,0.4676992169,
1.70,0.4669683642,
1.71,0.4661836359,
1.72,0.4653457385,
1.73,0.4644553716,
1.74,0.4635132286,
1.75,0.4625199967,
1.76,0.4614763568,
1.77,0.4603829839,
1.78,0.4592405471,
1.79,0.4580497097,
1.80,0.4568111294,
1.81,0.4555254585,
1.82,0.4541933436,
1.83,0.4528154262,
1.84,0.4513923427,
1.85,0.4499247241,
1.86,0.4484131966,
1.87,0.4468583813,
1.88,0.4452608948,
1.89,0.4436213486,
1.90,0.4419403497,
1.91,0.4402185005,
1.92,0.4384563991,
1.93,0.4366546388,
1.94,0.4348138088,
1.95,0.4329344941,
1.96,0.4310172752,
1.97,0.4290627288,
1.98,0.4270714273,
1.99,0.4250439391,

2.0,+0.4229808288,
2.1,+0.4005119878,
2.2,+0.3750745990,
2.3,+0.3471756175,
2.4,+0.3172916174,
2.5,+0.2858711964,
2.6,+0.2533366161,
2.7,+0.2200848786,
2.8,+0.1864883896,
2.9,+0.1528953242,
3.0,+0.1196297860,
3.1,+0.0869918312,
3.2,+0.0552574117,
3.3,+0.0246782846,
3.4,-0.0045180779,
3.5,-0.0321285485,
3.6,-0.0579743519,
3.7,-0.0819010013,
3.8,-0.1037781504,
3.9,-0.1234993492,
4.0,-0.1409816979,
4.1,-0.1561653918,
4.2,-0.1690131568,
4.3,-0.1795095725,
4.4,-0.1876602868,
4.5,-0.1934911221,
4.6,-0.1970470797,
4.7,-0.1983912468,
4.8,-0.1976036133,
4.9,-0.1947798060,
5.0,-0.1900297497,
5.1,-0.1834762632,
5.2,-0.1752536023,
5.3,-0.1655059586,
5.4,-0.1543859262,
5.5,-0.1420529476,
5.6,-0.1286717494,
5.7,-0.1144107808,
5.8,-0.0994406647,
5.9,-0.0839326741,
6.0,-0.0680572439,
6.1,-0.0519825290,
6.2,-0.0358730193,
6.3,-0.0198882206,
6.4,-0.0041814110,
6.5,+0.0111015195,
6.6,+0.0258231381,
6.7,+0.0398554400,
6.8,+0.0530807167,
6.9,+0.0653923140,

7.0,+0.0766952785,
7.1,+0.0869068881,
7.2,+0.0959570643,
7.3,+0.1037886664,
7.4,+0.1103576658,
7.5,+0.1156332032,
7.6,+0.1195975293,
7.7,+0.1222458319,
7.8,+0.1235859542,
7.9,+0.1236380071,
8.0,+0.1224338825,
8.1,+0.1200166733,
8.2,+0.1164400055,
8.3,+0.1117672931,
8.4,+0.1060709196,
8.5,+0.0994313586,
8.6,+0.0919362396,
8.7,+0.0836793696,
8.8,+0.0747597196,
8.9,+0.0652803850,
9.0,+0.0553475313,
9.1,+0.0450693325,
9.2,+0.0345549134,
9.3,+0.0239133045,
9.4,+0.0132524187,
9.5,+0.0026780588,
9.6,-0.0077070361,
9.7,-0.0178040977,
9.8,-0.0275191811,
9.9,-0.0367639563,
10.,-0.0454564330
]),done);
done;

test_table(lambda([z],expintegral_ci(z)),'ci_2,230,3.2e-8);
[];

/******************************************************************************
   A&S Table 5.1 p. 238, values for (Ei(x)-log(x)-%gamma)/x 
                         from 0.00 through 0.50
******************************************************************************/

block(
ei_1 : make_array(flonum,200,2),
fillarray(ei_1,[
0.00,1.000000000,
0.01,1.002505566,
0.02,1.005022306,
0.03,1.007550283,
0.04,1.010089560,
0.05,1.012640202,
0.06,1.015202272,
0.07,1.017775836,
0.08,1.020360958,
0.09,1.022957705,
0.10,1.025566141,
0.11,1.028186335,
0.12,1.030818352,
0.13,1.033462259,
0.14,1.036118125,
0.15,1.038786018,
0.16,1.041466006,
0.17,1.044158158,
0.18,1.046862544,
0.19,1.049579234,
0.20,1.052308298,
0.21,1.055049807,
0.22,1.057803833,
0.23,1.060570446,
0.24,1.063349719,
0.25,1.066141726,
0.26,1.068946539,
0.27,1.071764232,
0.28,1.074594879,
0.29,1.077438555,
0.30,1.080295334,
0.31,1.083165293,
0.32,1.086048507,
0.33,1.088945053,
0.34,1.091855008,
0.35,1.094778451,
0.36,1.097715458,
0.37,1.100666108,
0.38,1.103630481,
0.39,1.106608656,
0.40,1.109600714,
0.41,1.112606735,
0.42,1.115626800,
0.43,1.118660991,
0.44,1.121709391,
0.45,1.124772082,
0.46,1.127849147,
0.47,1.130940671,
0.48,1.134046738,
0.49,1.137167432,
0.50,1.140302841]),done);
done;

test_table(lambda([z],(expintegral_ei(z)-log(z)-%gamma)/z),'ei_1,50,5.90e-10);
[];

/******************************************************************************
   A&S Table 5.1 p. 239-241, values for Ei(x) from 0.50 through 2.00
******************************************************************************/

block(
ei_2 : make_array(flonum,235,2),
fillarray(ei_2,[

0.50,0.454219905,
0.51,0.487032167, 
0.52,0.519530633,
0.53,0.551730445,
0.54,0.583645931,
0.55,0.615290657,
0.56,0.646677490,
0.57,0.677818642,
0.58,0.708725720,
0.59,0.739409764,
0.60,0.769881290,
0.61,0.800150320,
0.62,0.830226417,
0.63,0.860118716,
0.64,0.889835949,
0.65,0.919386468,
0.66,0.948778277,
0.67,0.978019042,
0.68,1.007116121,
0.69,1.036076576,
0.70,1.064907195,
0.71,1.093614501,
0.72,1.122204777,
0.73,1.150684069,
0.74,1.179058208,
0.75,1.207332816,
0.76,1.235513319,
0.77,1.263604960,
0.78,1.291612805,
0.79,1.319541753,
0.80,1.347396548,
0.81,1.375181783,
0.82,1.402901910,
0.83,1.430561245,
0.84,1.458163978,
0.85,1.485714176,
0.86,1.513215791,
0.87,1.540672664,
0.88,1.568088534,
0.89,1.595467036,
0.90,1.622811714,
0.91,1.650126019,
0.92,1.677413317,
0.93,1.704676891,
0.94,1.731919946,
0.95,1.759145612,
0.96,1.786356947,
0.97,1.813556941,
0.98,1.840748519,
0.99,1.867934543,

1.00,1.895117816,
1.01,1.922301085,
1.02,1.949487042,
1.03,1.976678325,
1.04,2.003877525,
1.05,2.031087184,
1.06,2.058309800,
1.07,2.085547825,
1.08,2.112803672,
1.09,2.140079712,
1.10,2.167378280,
1.11,2.194701672,
1.12,2.222052152,
1.13,2.249431949,
1.14,2.276843260,
1.15,2.304288252,
1.16,2.331769062,
1.17,2.359287800,
1.18,2.386846549,
1.19,2.414447367,
1.20,2.442092285,
1.21,2.469783315,
1.22,2.497522442,
1.23,2.525311634,
1.24,2.553152836,
1.25,2.581047974,
1.26,2.608998956,
1.27,2.637007673,
1.28,2.665075997,
1.29,2.693205785,
1.30,2.721398880,
1.31,2.749657110,
1.32,2.777982287,
1.33,2.806376214,
1.34,2.834840677,
1.35,2.863377453,
1.36,2.891988308,
1.37,2.920674997,
1.38,2.949439263,
1.39,2.978282844,
1.40,3.007207464,
1.41,3.036214843,
1.42,3.065306691,
1.43,3.094484712,
1.44,3.123750601,
1.45,3.153106049,
1.46,3.182552741,
1.47,3.212092355,
1.48,3.241726566,
1.49,3.271457042,

1.50,3.301285449,
1.51,3.331213449,
1.52,3.361242701,
1.53,3.391374858,
1.54,3.421611576,
1.55,3.451954503,
1.56,3.482405289,
1.57,3.512965580,
1.58,3.543637024,
1.59,3.574421266,
1.60,3.605319949,
1.61,3.636334719,
1.62,3.667467221,
1.63,3.698719099,
1.64,3.730091999,
1.65,3.761587569,
1.66,3.793207456,
1.67,3.824953310,
1.68,3.856826782,
1.69,3.888829528,
1.70,3.920963201,
1.71,3.953229462,
1.72,3.985629972,
1.73,4.018166395,
1.74,4.050840400,
1.75,4.083653659,
1.76,4.116607847,
1.77,4.149704645,
1.78,4.182945736,
1.79,4.216332809,
1.80,4.249867557,
1.81,4.283551681,
1.82,4.317386883,
1.83,4.351374872,
1.84,4.385517364,
1.85,4.419816080,
1.86,4.454272746,
1.87,4.488889097,
1.88,4.523666872,
1.89,4.558607817,
1.90,4.593713687,
1.91,4.628986242,
1.92,4.664427249,
1.93,4.700038485,
1.94,4.735821734,
1.95,4.771778785,
1.96,4.807911438,
1.97,4.844221501,
1.98,4.880710791,
1.99,4.917381131,
2.00,4.954234356
]),done);
done;

test_table(lambda([z],expintegral_ei(z)),'ei_2,150,5.70e-10);
[];

/******************************************************************************
  A&S Table 5.1 p. 242-243, values for x*%e^(-x)*Ei(x) from 2.00 through 10.0
******************************************************************************/

block(
ei_3 : make_array(flonum,235,2),
fillarray(ei_3,[

2.0,1.340965420,
2.1,1.371486802,
2.2,1.397421992,
2.3,1.419171534,
2.4,1.437118315,
2.5,1.451625159,
2.6,1.463033397,
2.7,1.471662153,
2.8,1.477808187,
2.9,1.481746162,
3.0,1.483729204,
3.1,1.483989691,
3.2,1.482740191,
3.3,1.480174491,
3.4,1.476468706,
3.5,1.471782389,
3.6,1.466259659,
3.7,1.460030313,
3.8,1.453210902,
3.9,1.445905765,
4.0,1.438208032,
4.1,1.430200557,
4.2,1.421956813,
4.3,1.413541719,
4.4,1.405012424,
4.5,1.396419030,
4.6,1.387805263,
4.7,1.379209093,
4.8,1.370663313,
4.9,1.362196054,
5.0,1.353831278,
5.1,1.345589212,
5.2,1.337486755,
5.3,1.329537845,
5.4,1.321753788,
5.5,1.314143566,
5.6,1.306714107,
5.7,1.299470536,
5.8,1.292416395,
5.9,1.285553849,
6.0,1.278883860,
6.1,1.272406357,
6.2,1.266120373,
6.3,1.260024184,
6.4,1.254115417,
6.5,1.248391155,
6.6,1.242848032,
6.7,1.237482309,
6.8,1.232289952,
6.9,1.227266684,
7.0,1.222408053,
7.1,1.217709472,
7.2,1.213166264,
7.3,1.208773699,
7.4,1.204527026,
7.5,1.200421500,
7.6,1.196452401,
7.7,1.192615063,
7.8,1.188904881,
7.9,1.185317334,
8.0,1.181847987,
8.1,1.178492509,
8.2,1.175246676,
8.3,1.172106376,
8.4,1.169067617,
8.5,1.166126526,
8.6,1.163279354,
8.7,1.160522476,
8.8,1.157852390,
8.9,1.155265719,
9.0,1.152759209,
9.1,1.150329724,
9.2,1.147974251,
9.3,1.145689889,
9.4,1.143473855,
9.5,1.141323476,
9.6,1.139236185,
9.7,1.137209523,
9.8,1.135241130,
9.9,1.133328746,
10.,1.131470205
]),done);
done;

test_table(lambda([z],z*%e^(-z)*expintegral_ei(z)),'ei_3,80,8.95e-10);
[];

/******************************************************************************
   A&S Table 5.1 p. 238, values for (E1(x)-log(x)-%gamma)/x 
                         from 0.00 through 0.50
******************************************************************************/

block(
e1_1 : make_array(flonum,200,2),
fillarray(e1_1,[

0.00,1.0000000000,
0.01,0.9975055452,
0.02,0.9950221392,
0.03,0.9925497201,
0.04,0.9900882265,
0.05,0.9876375971,
0.06,0.9851977714,
0.07,0.9827686889,
0.08,0.9803502898,
0.09,0.9779425142,
0.10,0.9755453033,
0.11,0.9731585980,
0.12,0.9707823399,
0.13,0.9684164710,
0.14,0.9660609336,
0.15,0.9637156702,
0.16,0.9613806240,
0.17,0.9590557383,
0.18,0.9567409569,
0.19,0.9544362237,
0.20,0.9521414833,
0.21,0.9498566804,
0.22,0.9475817603,
0.23,0.9453166684,
0.24,0.9430613506,
0.25,0.9408157528,
0.26,0.9385798221,
0.27,0.9363535046,
0.28,0.9341367481,
0.29,0.9319294997,
0.30,0.9297317075,
0.31,0.9275433196,
0.32,0.9253642845,
0.33,0.9231945510,
0.34,0.9210340684,
0.35,0.9188827858,
0.36,0.9167406533,
0.37,0.9146076209,
0.38,0.9124836388,
0.39,0.9103686582,
0.40,0.9082626297,
0.41,0.9061655048,
0.42,0.9040772350,
0.43,0.9019977725,
0.44,0.8999270693,
0.45,0.8978650778,
0.46,0.8958117511,
0.47,0.8937670423,
0.48,0.8917309048,
0.49,0.8897032920,
0.50,0.8876841584
]),done);
done;

test_table(lambda([z],(expintegral_e1(z)+log(z)+%gamma)/z),'e1_1,50,1.65e-10);
[];

/******************************************************************************
   A&S Table 5.1 p. 239-241, values for E1(x) from 0.50 through 2.00
******************************************************************************/

block(
e1_2 : make_array(flonum,200,2),
fillarray(e1_2,[

0.50,0.559773595,
0.51,0.547822352,
0.52,0.536219798,
0.53,0.524951510,
0.54,0.514003886,
0.55,0.503364081,
0.56,0.493019959,
0.57,0.482960034,
0.58,0.473173433,
0.59,0.463649849,
0.60,0.454379503,
0.61,0.445353112,
0.62,0.436561854,
0.63,0.427997338,
0.64,0.419651581,
0.65,0.411516976,
0.66,0.403586275,
0.67,0.395852563,
0.68,0.388309243,
0.69,0.380950010,
0.70,0.373768843,
0.71,0.366759981,
0.72,0.359917914,
0.73,0.353237364,
0.74,0.346713279,
0.75,0.340340813,
0.76,0.334115321,
0.77,0.328032346,
0.78,0.322087610,
0.79,0.316277004,
0.80,0.310596579,
0.81,0.305042539,
0.82,0.299611236,
0.83,0.294299155,
0.84,0.289102918,
0.85,0.284019269,
0.86,0.279045070,
0.87,0.274177301,
0.88,0.269413046,
0.89,0.264749496,
0.90,0.260183939,
0.91,0.255713758,
0.92,0.251336425,
0.93,0.247049501,
0.94,0.242850627,
0.95,0.238737524,
0.96,0.234707988,
0.97,0.230759890,
0.98,0.226891167,
0.99,0.223099826,

1.00,0.219383934,
1.01,0.215741624,
1.02,0.212171083,
1.03,0.208670559,
1.04,0.205238352,
1.05,0.201872813,
1.06,0.198572347,
1.07,0.195335403,
1.08,0.192160479,
1.09,0.189046118,
1.10,0.185990905,
1.11,0.182993465,
1.12,0.180052467,
1.13,0.177166615,
1.14,0.174334651,
1.15,0.171555354,
1.16,0.168827535,
1.17,0.166150040,
1.18,0.163521748,
1.19,0.160941567,
1.20,0.158408437,
1.21,0.155921324,
1.22,0.153479226,
1.23,0.151081164,
1.24,0.148726188,
1.25,0.146413373,
1.26,0.144141815,
1.27,0.141910639,
1.28,0.139718989,
1.29,0.137566032,
1.30,0.135450958,
1.31,0.133372975,
1.32,0.131331314,
1.33,0.129325224,
1.34,0.127353972,
1.35,0.125416844,
1.36,0.123513146,
1.37,0.121642198,
1.38,0.119803337,
1.39,0.117995919,
1.40,0.116219313,
1.41,0.114472903,
1.42,0.112756090,
1.43,0.111068287,
1.44,0.109408923,
1.45,0.107777440,
1.46,0.106173291,
1.47,0.104595946,
1.48,0.103044882,
1.49,0.101519593,

1.50,0.100019582,
1.51,0.098544365,
1.52,0.097093466,
1.53,0.095666424,
1.54,0.094262786,
1.55,0.092882108,
1.56,0.091523960,
1.57,0.090187917,
1.58,0.088873566,
1.59,0.087580504,
1.60,0.086308334,
1.61,0.085056670,
1.62,0.083825133,
1.63,0.082613354,
1.64,0.081420970,
1.65,0.080247627,
1.66,0.079092978,
1.67,0.077956684,
1.68,0.076838412,
1.69,0.075737839,
1.70,0.074654644,
1.71,0.073588518,
1.72,0.072539154,
1.73,0.071506255,
1.74,0.070489527,
1.75,0.069488685,
1.76,0.068503447,
1.77,0.067533539,
1.78,0.066578691,
1.79,0.065638641,
1.80,0.064713129,
1.81,0.063801903,
1.82,0.062904715,
1.83,0.062021320,
1.84,0.061151482,
1.85,0.060294967,
1.86,0.059451545,
1.87,0.058620994,
1.88,0.057803091,
1.89,0.056997623,
1.90,0.056204378,
1.91,0.055423149,
1.92,0.054653731,
1.93,0.053895927,
1.94,0.053149540,
1.95,0.052414380,
1.96,0.051690257,
1.97,0.050976988,
1.98,0.050274392,
1.99,0.049582291,
2.00,0.048900511
]),done);
done;

test_table(lambda([z],expintegral_e1(z)),'e1_2,150,5.35e-10);
[];

/******************************************************************************
   A&S Table 5.1 p. 242-243, values for x*%e^x*E1(x) from 2.00 through 10.0
******************************************************************************/

block(
e1_3 : make_array(flonum,200,2),
fillarray(e1_3,[

2.0,0.722657234,
2.1,0.730791502,
2.2,0.738431132,
2.3,0.745622149,
2.4,0.752404829,
2.5,0.758814592,
2.6,0.764882722,
2.7,0.770636987,
2.8,0.776102123,
2.9,0.781300252,
3.0,0.786251221,
3.1,0.790972900,
3.2,0.795481422,
3.3,0.799791408,
3.4,0.803916127,
3.5,0.807867661,
3.6,0.811657037,
3.7,0.815294342,
3.8,0.818788821,
3.9,0.822148967,
4.0,0.825382600,
4.1,0.828496926,
4.2,0.831498602,
4.3,0.834393794,
4.4,0.837188207,
4.5,0.839887144,
4.6,0.842495539,
4.7,0.845017971,
4.8,0.847458721,
4.9,0.849821778,
5.0,0.852110880,
5.1,0.854329519,
5.2,0.856480958,
5.3,0.858568275,
5.4,0.860594348,
5.5,0.862561885,
5.6,0.864473436,
5.7,0.866331399,
5.8,0.868138040,
5.9,0.869895494,
6.0,0.871605775,
6.1,0.873270793,
6.2,0.874892347,
6.3,0.876472150,
6.4,0.878011816,
6.5,0.879512881,
6.6,0.880976797,
6.7,0.882404955,
6.8,0.883798662,
6.9,0.885159176,
7.0,0.886487675,
7.1,0.887785294,
7.2,0.889053119,
7.3,0.890292173,
7.4,0.891503440,
7.5,0.892687854,
7.6,0.893846312,
7.7,0.894979666,
7.8,0.896088737,
7.9,0.897174302,
8.0,0.898237113,
8.1,0.899277888,
8.2,0.900297306,
8.3,0.901296033,
8.4,0.902274699,
8.5,0.903233900,
8.6,0.904174228,
8.7,0.905096235,
8.8,0.906000459,
8.9,0.906887415,
9.0,0.907757602,
9.1,0.908611483,
9.2,0.909449530,
9.3,0.910272177,
9.4,0.911079850,
9.5,0.911872958,
9.6,0.912651897,
9.7,0.913417043,
9.8,0.914168766,
9.9,0.914907418,
10.,0.915633339
]),done);
done;

test_table(lambda([z],z*%e^z*expintegral_e1(z)),'e1_3,80,2.50e-8);
[];

/******************************************************************************
   A&S Table 5.6 p. 249-251, values for z*%e^z*E1(z) for Complex values
                             from -19 through 20 for the Real part and
                             from 0 through 20 for the Complex part
******************************************************************************/

block(
ec_1 : make_array(flonum,855,4),
fillarray(ec_1,[

/* Table 5.6 p. 249 */

-19,00,1.059305,0.000000,
-18,00,1.063087,0.000001,
-17,00,1.067394,0.000002,
-16,00,1.072345,0.000006,
-15,00,1.078103,0.000014,

-19,01,1.059090,0.003539,
-18,01,1.062827,0.004010,
-17,01,1.067073,0.004584,
-16,01,1.071942,0.005296,
-15,01,1.077584,0.006195,

-19,02,1.058456,0.007000,
-18,02,1.062061,0.007918,
-17,02,1.066135,0.009032,
-16,02,1.070774,0.010403,
-15,02,1.076102,0.012118,

-19,03,1.057431,0.010310,
-18,03,1.060829,0.011633,
-17,03,1.064636,0.013226,
-16,03,1.068925,0.015172,
-15,03,1.073783,0.017579,

-19,04,1.056058,0.013410,
-18,04,1.059190,0.015079,
-17,04,1.062657,0.017075,
-16,04,1.066508,0.019486,
-15,04,1.070793,0.022432,

-19,05,1.054391,0.016252,
-18,05,1.057215,0.018202,
-17,05,1.060297,0.020512,
-16,05,1.063659,0.023272,
-15,05,1.067318,0.026598,

-19,06,1.052490,0.018806,
-18,06,1.054981,0.020969,
-17,06,1.057655,0.023505,
-16,06,1.060510,0.026499,
-15,06,1.063538,0.030055,

-19,07,1.050413,0.021055,
-18,07,1.052565,0.023364,
-17,07,1.054829,0.026044,
-16,07,1.057187,0.029167,
-15,07,1.059610,0.032823,

-19,08,1.048217,0.022996,
-18,08,1.050037,0.025391,
-17,08,1.051905,0.028141,
-16,08,1.053795,0.031306,
-15,08,1.055664,0.034957,

-19,09,1.045956,0.024637,
-18,09,1.047458,0.027066,
-17,09,1.048958,0.029824,
-16,09,1.050421,0.032960,
-15,09,1.051797,0.036527,

-19,10,1.043672,0.025993,
-18,10,1.044880,0.028412,
-17,10,1.046045,0.031130,
-16,10,1.047129,0.034183,
-15,10,1.048081,0.037609,

-19,11,1.041402,0.027086,
-18,11,1.042345,0.029461,
-17,11,1.043212,0.032102,
-16,11,1.043967,0.035034,
-15,11,1.044559,0.038282,

-19,12,1.039177,0.027940,
-18,12,1.039882,0.030245,
-17,12,1.040490,0.032781,
-16,12,1.040965,0.035567,
-15,12,1.041259,0.038616,

-19,13,1.037018,0.028581,
-18,13,1.037515,0.030796,
-17,13,1.037901,0.033211,
-16,13,1.038140,0.035836,
-15,13,1.038192,0.038677,

-19,14,1.034942,0.029034,
-18,14,1.035259,0.031148,
-17,14,1.035456,0.033431,
-16,14,1.035501,0.035888,
-15,14,1.035359,0.038520,

-19,15,1.032959,0.029326,
-18,15,1.033123,0.031330,
-17,15,1.033162,0.033476,
-16,15,1.033049,0.035765,
-15,15,1.032754,0.038193,

-19,16,1.031076,0.029477,
-18,16,1.031110,0.031368,
-17,16,1.031019,0.033377,
-16,16,1.030780,0.035502,
-15,16,1.030365,0.037735,

-19,17,1.029296,0.029511,
-18,17,1.029222,0.031288,
-17,17,1.029025,0.033162,
-16,17,1.028685,0.035129,
-15,17,1.028180,0.037179,

-19,18,1.027620,0.029445,
-18,18,1.027456,0.031110,
-17,18,1.027174,0.032855,
-16,18,1.026756,0.034672,
-15,18,1.026183,0.036552,

-19,19,1.026046,0.029296,
-18,19,1.025809,0.030854,
-17,19,1.025459,0.032474,
-16,19,1.024981,0.034150,
-15,19,1.024360,0.035873,

-19,20,1.024570,0.029080,
-18,20,1.024275,0.030534,
-17,20,1.023872,0.032037,
-16,20,1.023349,0.033582,
-15,20,1.022695,0.035160,

-14,00,1.084892,0.000037,
-13,00,1.093027,0.000092,
-12,00,1.102975,0.000232,
-11,00,1.115431,0.000577,
-10,00,1.131470,0.001426,

-14,01,1.084200,0.007359,
-13,01,1.092067,0.008913,
-12,01,1.101566,0.011063,
-11,01,1.113230,0.014169,
-10,01,1.127796,0.018879,

-14,02,1.082276,0.014306,
-13,02,1.089498,0.017161,
-12,02,1.098025,0.020981,
-11,02,1.108170,0.026241,
-10,02,1.120286,0.033700,

-14,03,1.079313,0.020604,
-13,03,1.085635,0.024471,
-12,03,1.092873,0.029507,
-11,03,1.101137,0.036189,
-10,03,1.110462,0.045218,

-14,04,1.075560,0.026075,
-13,04,1.080853,0.030637,
-12,04,1.086686,0.036422,
-11,04,1.093013,0.043843,
-10,04,1.099666,0.053451,

-14,05,1.071279,0.030642,
-13,05,1.075522,0.035599,
-12,05,1.079985,0.041724,
-11,05,1.084526,0.049336,
-10,05,1.088877,0.058817,

-14,06,1.066708,0.034303,
-13,06,1.069960,0.039405,
-12,06,1.073185,0.045552,
-11,06,1.076197,0.052967,
-10,06,1.078701,0.061886,

-14,07,1.062046,0.037117,
-13,07,1.064412,0.042169,
-12,07,1.066578,0.048115,
-11,07,1.068350,0.055093,
-10,07,1.069450,0.063225,

-14,08,1.057448,0.039174,
-13,08,1.059054,0.044041,
-12,08,1.060352,0.049644,
-11,08,1.061159,0.056057,
-10,08,1.061235,0.063322,

-14,09,1.053021,0.040580,
-13,09,1.053997,0.045176,
-12,09,1.054606,0.050359,
-11,09,1.054687,0.056158,
-10,09,1.054046,0.062566,

-14,10,1.048834,0.041444,
-13,10,1.049303,0.045719,
-12,10,1.049380,0.050452,
-11,10,1.048933,0.055640,
-10,10,1.047807,0.061249,

-14,11,1.044928,0.041867,
-13,11,1.044997,0.045801,
-12,11,1.044674,0.050084,
-11,11,1.043853,0.054695,
-10,11,1.042417,0.059584,

-14,12,1.041320,0.041938,
-13,12,1.041080,0.045531,
-12,12,1.040464,0.049384,
-11,12,1.039389,0.053465,
-10,12,1.037766,0.057719,

-14,13,1.038010,0.041734,
-13,13,1.037537,0.044999,
-12,13,1.036713,0.048452,
-11,13,1.035473,0.052056,
-10,13,1.033752,0.055758,

-14,14,1.034989,0.041321,
-13,14,1.034344,0.044277,
-12,14,1.033378,0.047365,
-11,14,1.032040,0.050547,
-10,14,1.030282,0.053773,

-14,15,1.032241,0.040751,
-13,15,1.031474,0.043422,
-12,15,1.030414,0.046180,
-11,15,1.029026,0.048991,
-10,15,1.027274,0.051808,

-14,16,1.029747,0.040066,
-13,16,1.028895,0.042477,
-12,16,1.027781,0.044941,
-11,16,1.026377,0.047428,
-10,16,1.024658,0.049894,

-14,17,1.027486,0.039301,
-13,17,1.026579,0.041475,
-12,17,1.025438,0.043679,
-11,17,1.024043,0.045883,
-10,17,1.022375,0.048049,

-14,18,1.025437,0.038481,
-13,18,1.024499,0.040444,
-12,18,1.023352,0.042417,
-11,18,1.021981,0.044374,
-10,18,1.020375,0.046282,

-14,19,1.023580,0.037629,
-13,19,1.022628,0.039401,
-12,19,1.021489,0.041170,
-11,19,1.020155,0.042912,
-10,19,1.018617,0.044599,

-14,20,1.021896,0.036759,
-13,20,1.020942,0.038361,
-12,20,1.019824,0.039950,
-11,20,1.018533,0.041505,
-10,20,1.017066,0.043001,

-09,00,1.152759,0.003489,
-08,00,1.181848,0.008431,
-07,00,1.222408,0.020053,
-06,00,1.278884,0.046723,
-05,00,1.353831,0.105839,

-09,01,1.146232,0.026376,
-08,01,1.169677,0.038841,
-07,01,1.199049,0.060219,
-06,01,1.233798,0.097331,
-05,01,1.268723,0.160826,

-09,02,1.134679,0.044579,
-08,02,1.151385,0.060814,
-07,02,1.169639,0.085335,
-06,02,1.186778,0.122162,
-05,02,1.196351,0.175646,

-09,03,1.120694,0.057595,
-08,03,1.131255,0.074701,
-07,03,1.140733,0.098259,
-06,03,1.146266,0.130005,
-05,03,1.142853,0.170672,

-09,04,1.106249,0.065948,
-08,04,1.111968,0.082156,
-07,04,1.115404,0.102861,
-06,04,1.114273,0.128440,
-05,04,1.105376,0.158134,

-09,05,1.092564,0.070592,
-08,05,1.094818,0.085055,
-07,05,1.094475,0.102411,
-06,05,1.089952,0.122397,
-05,05,1.079407,0.143879,

-09,06,1.080246,0.072520,
-08,06,1.080188,0.084987,
-07,06,1.077672,0.099188,
-06,06,1.071684,0.114638,
-05,06,1.061236,0.130280,

-09,07,1.069494,0.072580,
-08,07,1.067987,0.083120,
-07,07,1.064339,0.094618,
-06,07,1.057935,0.106568,
-05,07,1.048279,0.118116,

-09,08,1.060276,0.071425,
-08,08,1.057920,0.080250,
-07,08,1.053778,0.089537,
-06,08,1.047493,0.098840,
-05,08,1.038838,0.107508,

-09,09,1.052450,0.069523,
-08,09,1.049645,0.076885,
-07,09,1.045382,0.084405,
-06,09,1.039464,0.091717,
-05,09,1.031806,0.098337,

-09,10,1.045832,0.067197,
-08,10,1.042834,0.073340,
-07,10,1.038659,0.079462,
-06,10,1.033205,0.085271,
-05,10,1.026459,0.090413,

-09,11,1.040241,0.064664,
-08,11,1.037210,0.069803,
-07,11,1.033231,0.074821,
-06,11,1.028260,0.079488,
-05,11,1.022317,0.083544,

-09,12,1.035508,0.062063,
-08,12,1.032539,0.066381,
-07,12,1.028808,0.070524,
-06,12,1.024300,0.074315,
-05,12,1.019052,0.077561,

-09,13,1.031490,0.059482,
-08,13,1.028638,0.063128,
-07,13,1.025171,0.066576,
-06,13,1.021090,0.069688,
-05,13,1.016439,0.072320,

-09,14,1.028065,0.056975,
-08,14,1.025359,0.060070,
-07,14,1.022152,0.062962,
-06,14,1.018458,0.065542,
-05,14,1.014319,0.067702,

-09,15,1.025132,0.054573,
-08,15,1.022583,0.057215,
-07,15,1.019626,0.059658,
-06,15,1.016277,0.061817,
-05,15,1.012577,0.063610,

-09,16,1.022608,0.052291,
-08,16,1.020219,0.054559,
-07,16,1.017494,0.056638,
-06,16,1.014452,0.058460,
-05,16,1.011130,0.059962,

-09,17,1.020426,0.050135,
-08,17,1.018192,0.052094,
-07,17,1.015681,0.053874,
-06,17,1.012912,0.055424,
-05,17,1.009915,0.056694,

-09,18,1.018530,0.048106,
-08,18,1.016444,0.049806,
-07,18,1.014129,0.051341,
-06,18,1.011600,0.052670,
-05,18,1.008887,0.053752,

-09,19,1.016874,0.046201,
-08,19,1.014929,0.047684,
-07,19,1.012790,0.049015,
-06,19,1.010476,0.050161,
-05,19,1.008009,0.051092,

-09,20,1.015422,0.044413,
-08,20,1.013607,0.045714,
-07,20,1.011629,0.046875,
-06,20,1.009505,0.047870,
-05,20,1.007254,0.048675,

/* Table 5.6 p. 250 */

-4,00,1.438208,0.230161,
-3,00,1.483729,0.469232,
-2,00,1.340965,0.850337,
-1,00,0.697175,1.155727,
/* -0,00,0.577216,0.000000, den Test auf Null verbessern */

-4,01,1.287244,0.263705,
-3,01,1.251069,0.410413,
-2,01,1.098808,0.561916,
-1,01,0.813486,0.578697,
-0,01,0.621450,0.343378,

-4,02,1.185758,0.247356,
-3,02,1.136171,0.328439,
-2,02,1.032990,0.388428,
-1,02,0.896419,0.378838,
-0,02,0.798042,0.289091,

-4,03,1.123282,0.217835,
-3,03,1.080316,0.262814,
-2,03,1.013205,0.289366,
-1,03,0.936283,0.280906,
-0,03,0.875873,0.237665,

-4,04,1.085153,0.189003,
-3,04,1.051401,0.215118,
-2,04,1.006122,0.228399,
-1,04,0.957446,0.222612,
-0,04,0.916770,0.198713,

-4,05,1.061263,0.164466,
-3,05,1.035185,0.180487,
-2,05,1.003172,0.187857,
-1,05,0.969809,0.183963,
-0,05,0.940714,0.169481,

-4,06,1.045719,0.144391,
-3,06,1.025396,0.154746,
-2,06,1.001788,0.159189,
-1,06,0.977582,0.156511,
-0,06,0.955833,0.147129,

-4,07,1.035205,0.128073,
-3,07,1.019109,0.135079,
-2,07,1.001077,0.137939,
-1,07,0.982756,0.136042,
-0,07,0.965937,0.129646,

-4,08,1.027834,0.114732,
-3,08,1.014861,0.119660,
-2,08,1.000684,0.121599,
-1,08,0.986356,0.120218,
-0,08,0.972994,0.115678,

-4,09,1.022501,0.103711,
-3,09,1.011869,0.107294,
-2,09,1.000454,0.108665,
-1,09,0.988955,0.107634,
-0,09,0.978103,0.104303,

-4,10,1.018534,0.094502,
-3,10,1.009688,0.097181,
-2,10,1.000312,0.098184,
-1,10,0.990887,0.097396,
-0,10,0.981910,0.094885,

-4,11,1.015513,0.086718,
-3,11,1.008052,0.088770,
-2,11,1.000221,0.089525,
-1,11,0.992361,0.088911,
-0,11,0.984819,0.086975,

-4,12,1.013163,0.080069,
-3,12,1.006795,0.081673,
-2,12,1.000161,0.082255,
-1,12,0.993508,0.081769,
-0,12,0.987088,0.080245,

-4,13,1.011303,0.074333,
-3,13,1.005809,0.075609,
-2,13,1.000119,0.076067,
-1,13,0.994418,0.075676,
-0,13,0.988891,0.074457,

-4,14,1.009806,0.069340,
-3,14,1.005022,0.070371,
-2,14,1.000090,0.070738,
-1,14,0.995151,0.070419,
-0,14,0.990345,0.069429,

-4,15,1.008585,0.064959,
-3,15,1.004384,0.065803,
-2,15,1.000070,0.066102,
-1,15,0.995751,0.065838,
-0,15,0.991534,0.065024,

-4,16,1.007577,0.061086,
-3,16,1.003859,0.061786,
-2,16,1.000055,0.062032,
-1,16,0.996246,0.061812,
-0,16,0.992518,0.061135,

-4,17,1.006735,0.057640,
-3,17,1.003423,0.058227,
-2,17,1.000043,0.058432,
-1,17,0.996661,0.058246,
-0,17,0.993342,0.057677,

-4,18,1.006025,0.054555,
-3,18,1.003057,0.055052,
-2,18,1.000035,0.055224,
-1,18,0.997011,0.055066,
-0,18,0.994038,0.054583,

-4,19,1.005420,0.051779,
-3,19,1.002747,0.052202,
-2,19,1.000028,0.052349,
-1,19,0.997309,0.052214,
-0,19,0.994631,0.051801,

-4,20,1.004902,0.049267,
-3,20,1.002481,0.049631,
-2,20,1.000023,0.049757,
-1,20,0.997565,0.049640,
-0,20,0.995140,0.049284,

01,00,0.596347,0.000000,
02,00,0.722657,0.000000,
03,00,0.786251,0.000000,
04,00,0.825383,0.000000,
05,00,0.852111,0.000000,

01,01,0.673321,0.147864,
02,01,0.747012,0.075661,
03,01,0.797036,0.045686,
04,01,0.831126,0.030619,
05,01,0.855544,0.021985,

01,02,0.777514,0.186570,
02,02,0.796965,0.118228,
03,02,0.823055,0.078753,
04,02,0.846097,0.055494,
05,02,0.864880,0.040999,

01,03,0.847468,0.181226,
02,03,0.844361,0.132252,
03,03,0.853176,0.096659,
04,03,0.865521,0.072180,
05,03,0.877860,0.055341,

01,04,0.891460,0.165207,
02,04,0.881036,0.131686,
03,04,0.880584,0.103403,
04,04,0.885308,0.081408,
05,04,0.892143,0.064825,

01,05,0.919826,0.148271,
02,05,0.907873,0.125136,
03,05,0.903152,0.103577,
04,05,0.903231,0.085187,
05,05,0.906058,0.070209,

01,06,0.938827,0.132986,
02,06,0.927384,0.116656,
03,06,0.921006,0.100357,
04,06,0.918527,0.085460,
05,06,0.918708,0.072544,

01,07,0.952032,0.119807,
02,07,0.941722,0.107990,
03,07,0.934958,0.095598,
04,07,0.931209,0.083666,
05,07,0.929765,0.072792,

01,08,0.961512,0.108589,
02,08,0.952435,0.099830,
03,08,0.945868,0.090303,
04,08,0.941594,0.080755,
05,08,0.939221,0.071700,

01,09,0.968512,0.099045,
02,09,0.960582,0.092408,
03,09,0.954457,0.084986,
04,09,0.950072,0.077313,
05,09,0.947219,0.069799,

01,10,0.973810,0.090888,
02,10,0.966885,0.085758,
03,10,0.961283,0.079898,
04,10,0.957007,0.073688,
05,10,0.953955,0.067447,

01,11,0.977904,0.083871,
02,11,0.971842,0.079836,
03,11,0.966766,0.075147,
04,11,0.962708,0.070080,
05,11,0.959626,0.064878,

01,12,0.981127,0.077790,
02,12,0.975799,0.074567,
03,12,0.971216,0.070769,
04,12,0.967423,0.066599,
05,12,0.964412,0.062242,

01,13,0.983706,0.072484,
02,13,0.979000,0.069873,
03,13,0.974865,0.066762,
04,13,0.971351,0.063300,
05,13,0.968464,0.059630,

01,14,0.985799,0.067822,
02,14,0.981621,0.065679,
03,14,0.977888,0.063104,
04,14,0.974646,0.060206,
05,14,0.971911,0.057096,

01,15,0.987519,0.063698,
02,15,0.983791,0.061921,
03,15,0.980414,0.059767,
04,15,0.977430,0.057322,
05,15,0.974858,0.054671,

01,16,0.988949,0.060029,
02,16,0.985606,0.058539,
03,16,0.982544,0.056723,
04,16,0.979799,0.054644,
05,16,0.977391,0.052371,

01,17,0.990149,0.056745,
02,17,0.987138,0.055485,
03,17,0.984353,0.053941,
04,17,0.981827,0.052162,
05,17,0.979579,0.050200,

01,18,0.991167,0.053792,
02,18,0.988442,0.052717,
03,18,0.985902,0.051394,
04,18,0.983574,0.049861,
05,18,0.981478,0.048160,

01,19,0.992036,0.051122,
02,19,0.989561,0.050199,
03,19,0.987237,0.049057,
04,19,0.985089,0.047728,
05,19,0.983135,0.046245,

01,20,0.992784,0.048699,
02,20,0.990527,0.047900,
03,20,0.988395,0.046909,
04,20,0.986410,0.045749,
05,20,0.984587,0.044449,

06,00,0.871606,0.000000,
07,00,0.886488,0.000000,
08,00,0.898237,0.000000,
09,00,0.907758,0.000000,
10,00,0.915633,0.000000,

06,01,0.873827,0.016570,
07,01,0.888009,0.012947,
08,01,0.899327,0.010401,
09,01,0.908565,0.008543,
10,01,0.916249,0.007143,

06,02,0.880023,0.031454,
07,02,0.892327,0.024866,
08,02,0.902453,0.020140,
09,02,0.910901,0.016639,
10,02,0.918040,0.013975,

06,03,0.889029,0.043517,
07,03,0.898793,0.034995,
08,03,0.907236,0.028693,
09,03,0.914531,0.023921,
10,03,0.920856,0.020230,

06,04,0.899484,0.052380,
07,04,0.906591,0.042967,
08,04,0.913167,0.035755,
09,04,0.919127,0.030145,
10,04,0.924479,0.025717,

06,05,0.910242,0.058259,
07,05,0.914952,0.048780,
08,05,0.919729,0.041242,
09,05,0.924336,0.035208,
10,05,0.928664,0.030334,

06,06,0.920534,0.061676,
07,06,0.923283,0.052667,
08,06,0.926481,0.045242,
09,06,0.929836,0.039123,
10,06,0.933175,0.034063,

06,07,0.929945,0.063220,
07,07,0.931193,0.054971,
08,07,0.933096,0.047942,
09,07,0.935365,0.041986,
10,07,0.937807,0.036944,

06,08,0.938313,0.063425,
07,08,0.938469,0.056047,
08,08,0.939359,0.049570,
09,08,0.940731,0.043936,
10,08,0.942398,0.039060,

06,09,0.945629,0.062714,
07,09,0.945023,0.056211,
08,09,0.945154,0.050349,
09,09,0.945812,0.045128,
10,09,0.946833,0.040514,

06,10,0.951965,0.061408,
07,10,0.950850,0.055725,
08,10,0.950427,0.050481,
09,10,0.950535,0.045711,
10,10,0.951035,0.041413,

06,11,0.957427,0.059735,
07,11,0.955987,0.054790,
08,11,0.955176,0.050135,
09,11,0.954870,0.045818,
10,11,0.954959,0.041861,

06,12,0.962128,0.057855,
07,12,0.960495,0.053560,
08,12,0.959421,0.049444,
09,12,0.958814,0.045563,
10,12,0.958586,0.041948,

06,13,0.966178,0.055877,
07,13,0.964444,0.052146,
08,13,0.963201,0.048514,
09,13,0.962379,0.045038,
10,13,0.961913,0.041755,

06,14,0.969673,0.053874,
07,14,0.967903,0.050627,
08,14,0.966559,0.047425,
09,14,0.965591,0.044319,
10,14,0.964949,0.041347,

06,15,0.972699,0.051894,
07,15,0.970935,0.049062,
08,15,0.969539,0.046236,
09,15,0.968477,0.043463,
10,15,0.967710,0.040780,

06,16,0.975326,0.049966,
07,16,0.973597,0.047489,
08,16,0.972185,0.044992,
09,16,0.971067,0.042516,
10,16,0.970214,0.040095,

06,17,0.977617,0.048109,
07,17,0.975940,0.045935,
08,17,0.974538,0.043724,
09,17,0.973393,0.041512,
10,17,0.972484,0.039329,

06,18,0.979622,0.046332,
07,18,0.978009,0.044419,
08,18,0.976632,0.042456,
09,18,0.975481,0.040477,
10,18,0.974540,0.038508,

06,19,0.981384,0.044641,
07,19,0.979839,0.042951,
08,19,0.978500,0.041205,
09,19,0.977357,0.039431,
10,19,0.976402,0.037653,

06,20,0.982938,0.043036,
07,20,0.981465,0.041538,
08,20,0.980169,0.039980,
09,20,0.979047,0.038388,
10,20,0.978090,0.036781,

/* Table 5.6 p. 251 */

11,00,0.922260,0.000000,
12,00,0.927914,0.000000,
13,00,0.932796,0.000000,
14,00,0.937055,0.000000,
15,00,0.940804,0.000000,

11,01,0.922740,0.006063,
12,01,0.928295,0.005212,
13,01,0.933105,0.004528,
14,01,0.937308,0.003972,
15,01,0.941014,0.003512,

11,02,0.924143,0.011902,
12,02,0.929416,0.010258,
13,02,0.934013,0.008932,
14,02,0.938055,0.007847,
15,02,0.941636,0.006949,

11,03,0.926370,0.017321,
12,03,0.931205,0.014991,
13,03,0.935473,0.013098,
14,03,0.939261,0.011540,
15,03,0.942643,0.010242,

11,04,0.929270,0.022171,
12,04,0.933560,0.019295,
13,04,0.937408,0.016934,
14,04,0.940870,0.014974,
15,04,0.943994,0.013331,

11,05,0.932672,0.026361,
12,05,0.936356,0.023091,
13,05,0.939729,0.020373,
14,05,0.942816,0.018095,
15,05,0.945640,0.016169,

11,06,0.936400,0.029857,
12,06,0.939462,0.026339,
13,06,0.942338,0.023378,
14,06,0.945024,0.020867,
15,06,0.947522,0.018725,

11,07,0.940297,0.032670,
12,07,0.942757,0.029036,
13,07,0.945140,0.025934,
14,07,0.947419,0.023273,
15,07,0.949582,0.020980,

11,08,0.944229,0.034847,
12,08,0.946132,0.031205,
13,08,0.948047,0.028052,
14,08,0.949933,0.025315,
15,08,0.951765,0.022931,

11,09,0.948093,0.036453,
12,09,0.949500,0.032887,
13,09,0.950985,0.029756,
14,09,0.952502,0.027004,
15,09,0.954018,0.024582,

11,10,0.951816,0.037566,
12,10,0.952792,0.034134,
13,10,0.953895,0.031081,
14,10,0.955075,0.028365,
15,10,0.956296,0.025949,

11,11,0.955347,0.038261,
12,11,0.955958,0.035004,
13,11,0.956729,0.032068,
14,11,0.957610,0.029426,
15,11,0.958563,0.027052,

11,12,0.958659,0.038612,
12,12,0.958968,0.035552,
13,12,0.959454,0.032761,
14,12,0.960073,0.030221,
15,12,0.960787,0.027915,

11,13,0.961739,0.038684,
12,13,0.961800,0.035833,
13,13,0.962049,0.033201,
14,13,0.962443,0.030781,
15,13,0.962947,0.028564,

11,14,0.964583,0.038534,
12,14,0.964447,0.035893,
13,14,0.964499,0.033428,
14,14,0.964702,0.031140,
15,14,0.965026,0.029024,

11,15,0.967199,0.038211,
12,15,0.966907,0.035775,
13,15,0.966799,0.033479,
14,15,0.966843,0.031327,
15,15,0.967011,0.029320,

11,16,0.969597,0.037756,
12,16,0.969184,0.035515,
13,16,0.968947,0.033384,
14,16,0.968860,0.031370,
15,16,0.968897,0.029476,

11,17,0.971789,0.037200,
12,17,0.971285,0.035144,
13,17,0.970946,0.033172,
14,17,0.970752,0.031293,
15,17,0.970680,0.029512,

11,18,0.973792,0.036572,
12,18,0.973220,0.034687,
13,18,0.972802,0.032865,
14,18,0.972521,0.031117,
15,18,0.972359,0.029448,

11,19,0.975621,0.035893,
12,19,0.974999,0.034166,
13,19,0.974521,0.032485,
14,19,0.974172,0.030862,
15,19,0.973936,0.029301,

11,20,0.977290,0.035179,
12,20,0.976634,0.033597,
13,20,0.976112,0.032049,
14,20,0.975709,0.030542,
15,20,0.975414,0.029086,

16,00,0.944130,0.000000,
17,00,0.947100,0.000000,
18,00,0.949769,0.000000,
19,00,0.952181,0.000000,
20,00,0.954371,0.000000,

16,01,0.944306,0.003128,
17,01,0.947250,0.002804,
18,01,0.949897,0.002527,
19,01,0.952291,0.002290,
20,01,0.954467,0.002085,

16,02,0.944829,0.006196,
17,02,0.947693,0.005560,
18,02,0.950277,0.005016,
19,02,0.952619,0.004549,
20,02,0.954752,0.004144,

16,03,0.945678,0.009150,
17,03,0.948416,0.008223,
18,03,0.950898,0.007430,
19,03,0.953156,0.006745,
20,03,0.955219,0.006151,

16,04,0.946824,0.011940,
17,04,0.949395,0.010754,
18,04,0.951741,0.009735,
19,04,0.953887,0.008853,
20,04,0.955856,0.008084,

16,05,0.948226,0.014529,
17,05,0.950600,0.013121,
18,05,0.952782,0.011904,
19,05,0.954793,0.010847,
20,05,0.956650,0.009922,

16,06,0.949842,0.016886,
17,06,0.951995,0.015296,
18,06,0.953995,0.013916,
19,06,0.955853,0.012709,
20,06,0.957581,0.011649,

16,07,0.951624,0.018994,
17,07,0.953545,0.017265,
18,07,0.955349,0.015753,
19,07,0.957043,0.014425,
20,07,0.958631,0.013253,

16,08,0.953527,0.020847,
17,08,0.955212,0.019019,
18,08,0.956815,0.017409,
19,08,0.958337,0.015986,
20,08,0.959779,0.014723,

16,09,0.955509,0.022445,
17,09,0.956960,0.020555,
18,09,0.958363,0.018878,
19,09,0.959712,0.017387,
20,09,0.961004,0.016056,

16,10,0.957530,0.023797,
17,10,0.958758,0.021878,
18,10,0.959966,0.020163,
19,10,0.961144,0.018628,
20,10,0.962288,0.017250,

16,11,0.959559,0.024917,
17,11,0.960576,0.022998,
18,11,0.961598,0.021270,
19,11,0.962612,0.019712,
20,11,0.963611,0.018305,

16,12,0.961568,0.025823,
17,12,0.962391,0.023927,
18,12,0.963238,0.022207,
19,12,0.964097,0.020645,
20,12,0.964956,0.019227,

16,13,0.963534,0.026534,
17,13,0.964181,0.024679,
18,13,0.964868,0.022984,
19,13,0.965582,0.021436,
20,13,0.966310,0.020021,

16,14,0.965443,0.027070,
17,14,0.965931,0.025271,
18,14,0.966472,0.023616,
19,14,0.967052,0.022094,
20,14,0.967658,0.020694,

16,15,0.967280,0.027453,
17,15,0.967628,0.025720,
18,15,0.968039,0.024114,
19,15,0.968496,0.022629,
20,15,0.968990,0.021255,

16,16,0.969038,0.027700,
17,16,0.969264,0.026041,
18,16,0.969558,0.024493,
19,16,0.969906,0.023052,
20,16,0.970297,0.021712,

16,17,0.970712,0.027831,
17,17,0.970832,0.026249,
18,17,0.971023,0.024765,
19,17,0.971273,0.023375,
20,17,0.971571,0.022075,

16,18,0.972300,0.027862,
17,18,0.972328,0.026361,
18,18,0.972430,0.024943,
19,18,0.972594,0.023607,
20,18,0.972808,0.022352,

16,19,0.973800,0.027809,
17,19,0.973751,0.026388,
18,19,0.973775,0.025038,
19,19,0.973863,0.023760,
20,19,0.974004,0.022552,

16,20,0.975215,0.027685,
17,20,0.975099,0.026343,
18,20,0.975057,0.025062,
19,20,0.975079,0.023842,
20,20,0.975155,0.022684
]),done);
done;

test_complex_table(lambda([z],z*%e^z*expintegral_e1(z)),'ec_1,838,1.25e-6);
[];

kill(all);
done;

/*****************************************************************************/
