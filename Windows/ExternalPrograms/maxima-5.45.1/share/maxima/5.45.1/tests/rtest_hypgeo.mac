/******************************************************************************

   Tests from A&S

******************************************************************************/

/* Make assumptions about parameters which we will use for the tests */

(kill(all),declare(n,integer, k,real),assume(s>0,n>0, k>0),'done);
done;

/******************************************************************************
   First part: A&S 29.3.1 to 29.3.33

   Problem 2: A&S: 29.3.1 OK
******************************************************************************/

specint(%e^(-s*t),t);
1/s;

/*****************************************************************************
   Problem 3: A&S: 29.3.2 OK
******************************************************************************/

specint(%e^(-s*t)*t,t);
1/s^2;

/*****************************************************************************
   Problem 4: A&S: 29.3.3 OK
******************************************************************************/

specint(%e^(-s*t)*t^(n-1)/gamma(n),t);  /* use gamma(n) instead of (n-1)! */
1/s^n;

/*****************************************************************************
   Problem 5: A&S: 29.3.4 OK
******************************************************************************/

specint(%e^(-s*t)/sqrt(%pi*t),t);
1/sqrt(s);

/*****************************************************************************
   Problem 6: A&S: 29.3.5 OK
******************************************************************************/

specint(%e^(-s*t)*2*sqrt(t/%pi),t);
1/s^(3/2);

/*****************************************************************************
   Problem 7-10: A&S: 29.3.6 OK
******************************************************************************/

/* Define the function to be integrated */

f(n,t):= 2^n*t^(n-1/2)/(product(2*k-1,k,1,n)*sqrt(%pi));
f(n,t):= 2^n*t^(n-1/2)/(product(2*k-1,k,1,n)*sqrt(%pi));

/* Test for 3 values of n. 
   Can Maxima find the general solution, too? */

specint(%e^(-s*t)*f(3,t),t);
s^(-3-1/2);

specint(%e^(-s*t)*f(7,t),t);
s^(-7-1/2);

specint(%e^(-s*t)*f(100,t),t);
s^(-100-1/2);

/*****************************************************************************
   Problem 11: A&S: 29.3.7 OK
******************************************************************************/

specint(%e^(-s*t)*t^(k-1),t);
gamma(k)/s^k;

/*****************************************************************************
   Problem 12: A&S: 29.3.8 OK
******************************************************************************/

(assume(s+a>0), specint(%e^(-s*t)*%e^(-a*t),t));
1/(s+a);

/*****************************************************************************
   Problem 13: A&S: 29.3.9 OK
******************************************************************************/

specint(%e^(-s*t)*t*%e^(-a*t),t);
1/(s+a)^2;

/*****************************************************************************
   Problem 14: A&S: 29.3.10 OK
******************************************************************************/

specint(%e^(-s*t)*t^(n-1)*%e^(-a*t)/gamma(n),t);
1/(s+a)^n;

/*****************************************************************************
   Problem 15: A&S: 29.3.11 OK
******************************************************************************/

specint(%e^(-s*t)*t^(k-1)*%e^(-a*t),t);
gamma(k)/(s+a)^k;

/*****************************************************************************
   Problem 16: A&S: 29.3.12 OK New
   No solution with the original code because of the denominator.
******************************************************************************/

(assume(s+b>0), factor(specint(%e^(-s*t)*(%e^(-a*t)-%e^(-b*t))/(b-a),t)));
1/((s+a)*(s+b));

/*****************************************************************************
   Problem 17: A&S: 29.3.13 OK New
   No solution with the original code because of the denominator.
******************************************************************************/

factor(specint(%e^(-s*t)*(a*%e^(-a*t)-b*%e^(-b*t))/(a-b),t));
s/((s+a)*(s+b));

/*****************************************************************************
   Problem 18: A&S: 29.3.14 OK New
   No solution with the original code because of the denominator.
******************************************************************************/

(assume(s+c>0), 
  factor(specint(%e^(-s*t)*((b-c)*%e^(-a*t)+(c-a)*%e^(-b*t)+(a-b)*%e^(-c*t))/((b-a)*(b-c)*(c-a)),t)));
1/((s+a)*(s+b)*(s+c));

/*****************************************************************************
   Problem 19: A&S: 29.3.15 OK
******************************************************************************/

ratsimp(specint(%e^(-s*t)*sin(a*t)/a,t));
1/(s^2+a^2);

/*****************************************************************************
   Problem 20: A&S: 29.3.16 OK
******************************************************************************/

ratsimp(specint(%e^(-s*t)*cos(a*t),t));
s/(s^2+a^2);

/*****************************************************************************
   Problem 21: A&S: 29.3.17 OK
******************************************************************************/

(assume(s-a>0),ratsimp(specint(%e^(-s*t)*sinh(a*t)/a,t)));
1/(s^2-a^2);

/*****************************************************************************
   Problem 22: A&S: 29.3.18 OK
******************************************************************************/

ratsimp(specint(%e^(-s*t)*cosh(a*t),t));
s/(s^2-a^2);

/*****************************************************************************
   Problem 23: A&S: 29.3.19 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(1-cos(a*t))/a^2,t)));
1/(s*(s^2+a^2));

/*****************************************************************************
   Problem 24: A&S: 29.3.20 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(a*t-sin(a*t))/a^3,t)));
1/(s^2*(s^2+a^2));

/*****************************************************************************
   Problem 25: A&S: 29.3.21 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(sin(a*t)-a*t*cos(a*t))/(2*a^3),t)));
1/(s^2+a^2)^2;

/*****************************************************************************
   Problem 26: A&S: 29.3.22 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*t*sin(a*t)/(2*a),t)));
s/(s^2+a^2)^2;

/*****************************************************************************
   Problem 27: A&S: 29.3.23 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(sin(a*t)+a*t*cos(a*t))/(2*a),t)));
s^2/(s^2+a^2)^2;

/*****************************************************************************
   Problem 28: A&S: 29.3.24 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*t*cos(a*t),t)));
(s-a)*(s+a)/(s^2+a^2)^2;

/*****************************************************************************
   Problem 29: A&S: 29.3.25 OK New
   After implementing a more general code to extract a constant denominator
   we get the correct result.
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(cos(a*t)-cos(b*t))/(b^2-a^2),t)));
s/((s^2+a^2)*(s^2+b^2));

/*****************************************************************************
   Problem 30: A&S: 29.3.26 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(%e^(-a*t)*sin(b*t))/b,t)));
1/(s^2+2*a*s+b^2+a^2);

/*****************************************************************************
   Problem 31: A&S: 29.3.27 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(%e^(-a*t)*cos(b*t)),t)));
(s+a)/(s^2+2*a*s+b^2+a^2);

/*****************************************************************************
   Problem 32: A&S: 29.3.28 OK
******************************************************************************/

(assume(2*s-a>0),
factor(ratsimp(specint(%e^(-s*t)*(%e^(-a*t)-%e^(a*t/2)*(cos(a*t*sqrt(3)/2)
                                           -sqrt(3)*sin(a*t*sqrt(3)/2))),t))));
3*a^2/((s+a)*(s^2-a*s+a^2));  /* that's 3*a^2/(s^3+a^3) */

/*****************************************************************************
   Problem 33: A&S: 29.3.29 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(sin(a*t)*cosh(a*t)-cos(a*t)*sinh(a*t)),t)));
4*a^3/((s^2-2*a*s+2*a^2)*(s^2+2*a*s+2*a^2));

/*****************************************************************************
   Problem 34: A&S: 29.3.30 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*sin(a*t)*sinh(a*t)/(2*a^2),t)));
s/((s^2-2*a*s+2*a^2)*(s^2+2*a*s+2*a^2));

/*****************************************************************************
   Problem 35: A&S: 29.3.31 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(sinh(a*t)-sin(a*t))/(2*a^3),t)));
1/((s-a)*(s+a)*(s^2+a^2));

/*****************************************************************************
   Problem 36: A&S: 29.3.32 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(cosh(a*t)-cos(a*t))/(2*a^2),t)));
s/((s-a)*(s+a)*(s^2+a^2));

/*****************************************************************************
   Problem 37: A&S: 29.3.33 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*((1+a^2*t^2)*sin(a*t)-a*t*cos(a*t)),t)));
8*a^3*s^2/(s^2+a^2)^3;

/******************************************************************************
   Problem 38: A&S: 29.3.34

   Laguerre Polynom

******************************************************************************/

/* We test the integration of the Laguerre function for three different 
   values for the order of the polynom.
*/

factor(specint(%e^(-s*t)*laguerre(1,t),t));
(s-1)/s^2;

factor(specint(%e^(-s*t)*laguerre(2,t),t));
(s-1)^2/s^3;

factor(specint(%e^(-s*t)*laguerre(10,t),t));
(s-1)^10/s^(10+1);

/*****************************************************************************
   The code knows the general Laguerre function %l[n,a](x).
   There should be the relationship: laguerre(n,t) -> %l[n,0](t).

   But it doesn't work. We got a lot of errors when we try to use %l[n,a](t)
   in a Laplace transformation.

   First:  The function ltw seems not to be correct. There are differences
           between the code and the formula A&S 13.6.9.
           The code uses the Lisp-Function FACTORIAL. That's wrong for a
           symbol. We get a Lisp error. We have to use a general GAMMA 
           expression.
   Second: In the transformation to a Hypergeomtric function there are
           similar problems. We get the expression gamma(1-n) which is not 
           defined for all positive integers n. The code stops with the
           message gamma( .. ) is undefined.
           The complete transformation formula has to be verified.
   Last:   After some corrections to the routine ltw the result is OK.
*/

/* Problem 41: OK New
 * After correction of some bugs we get the correct result.    
 * First a test with a special value for the order of the Laguerre function.
 */

factor(specint(%e^(-s*t)*'laguerre(10,t),t));
(s-1)^10/s^11;

factor(specint(%e^(-s*t)*'laguerre(n,t),t));
(s-1)^n/s^(n+1);

/* Problem 43: OK We get a result. New
   Because n is declared to be an integer, the implemented Laguerre function
   simplifies to a sum. The summand can be integrated.
   This summand is equivalent to the general solution above.
*/

(assume(i1>0), niceindices(specint(%e^(-s*t)*laguerre(n,t),t)));
'sum(gamma(i+1)*pochhammer(-n,i)*s^(-i-1)/i!^2,i,0,n);

/*****************************************************************************
   Problem 44: A&S: 29.3.35 OK
******************************************************************************/

factor(specint(%e^(-s*t)*(1/(sqrt(%pi*t))*%e^(-a*t)*(1-2*a*t)),t));
s/(s+a)^(3/2);

/*****************************************************************************
   Problem 45: A&S: 29.3.36 OK New
   sqrt(s+a)-sqrt(s+b);
******************************************************************************/

specint(%e^(-s*t)*(1/(2*sqrt(%pi*t^3)))*(%e^(-b*t)-%e^(-a*t)),t);
-sqrt(s+b)+sqrt(s+a);

/******************************************************************************
 *
 * Error functions erf und erfc
 *
 ******************************************************************************/

assume(s-a^2>0,a>0);
[s>a^2,a>0];

/*****************************************************************************
   Problem 47: A&S: 29.3.37 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(1/sqrt(%pi*t)-a*%e^(a^2*t)
                                                *erfc(a*sqrt(t))),t)));
(sqrt(s)-a)/(s-a^2);

/*****************************************************************************
   Problem 48: A&S: 29.3.38 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(1/sqrt(%pi*t)+a*%e^(a^2*t)
                                                *erf(a*sqrt(t))),t)));
sqrt(s)/(s-a^2);

/*****************************************************************************
   Problem 49: A&S: 29.3.39 OK
   In this Laplace transform the integral represents the erfi function.
   Maxima does the integration correct.
******************************************************************************/

(assume(t>0),
 factor(ratsimp(specint(%e^(-s*t)*(1/sqrt(%pi*t)-2*a/sqrt(%pi)*%e^(-a^2*t)
                            *integrate(%e^(lambda^2),lambda,0,a*sqrt(t))),t))));
sqrt(s)/(s+a^2);

/*****************************************************************************
   Problem 50: A&S: 29.3.40 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*1/a*%e^(a^2*t)*erf(a*sqrt(t)),t)));
1/(sqrt(s)*(s-a^2));

/*****************************************************************************
   Problem 51: A&S: 29.3.41 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(2/(a*sqrt(%pi))*%e^(-a^2*t)
                             *integrate(%e^(lambda^2),lambda,0,a*sqrt(t))),t)));
1/(sqrt(s)*(s+a^2));

/*****************************************************************************
   Problem 52: A&S: 29.3.42 OK
******************************************************************************/

(assume(s-b^2>0,b>0),
 factor(ratsimp(specint(%e^(-s*t)*(%e^(a^2*t)*(b-a*erf(a*sqrt(t)))
                                           -b*%e^(b^2*t)*erfc(b*sqrt(t))),t))));
(b-a)*(b+a)*(sqrt(s)-b)/((s-a^2)*(s-b^2));

/*****************************************************************************
   Problem 53: A&S: 29.3.43 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*%e^(a^2*t)*erfc(a*sqrt(t)),t)));
(sqrt(s)-a)/(sqrt(s)*(s-a^2));

/*****************************************************************************
   Problem 54: A&S: 29.3.44 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(1/sqrt(b-a))*%e^(-a*t)
                                              *erf(sqrt(b-a)*sqrt(t)),t)));
1/((s+a)*sqrt(s+b));

/*****************************************************************************
   Problem 55: A&S: 29.3.45 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(%e^(a^2*t)*(b/a*erf(a*sqrt(t))-1)
                                              +%e^(b^2*t)*erfc(b*sqrt(t))),t)));
((b-a)*(b+a)*(s-b*sqrt(s)))/(s*(s-a^2)*(s-b^2));

/******************************************************************************
  Problem 56: A&S 29.3.46 and A&S 29.3.47

  Hermite
******************************************************************************/

/* We test the integration of the Hermite Polynom for three different 
   values for the order of the polynom.
*/

block (h1(n,x):= n!/((2*n)!*sqrt(%pi*t))*hermite(2*n,sqrt(t)),
   h1(n,x):= n!/((2*n)!*sqrt(%pi*t))*hermite(2*n,sqrt(t)), 
   done
);
done;

/* Problem 57: OK */

factor(specint(%e^(-s*t)*h1(1,t),t));
-((s-1)/(s^(3/2)));

/* Problem 58: OK */

factor(specint(%e^(-s*t)*h1(2,t),t));
((s-1)^2/(s^(5/2)));

/* Problem 59: OK */

factor(specint(%e^(-s*t)*h1(10,t),t));
((s-1)^10/(s^(10+1/2)));

/* AS 29.3.47 */

h2(n,x):= n!/((2*n+1)!*sqrt(%pi))*hermite(2*n+1,sqrt(t));
h2(n,x):= n!/((2*n+1)!*sqrt(%pi))*hermite(2*n+1,sqrt(t));

/* Problem 61: OK */

factor(specint(%e^(-s*t)*h2(1,t),t));
-((s-1)/(s^(5/2)));

/* Problem 62: OK */

factor(specint(%e^(-s*t)*h2(2,t),t));
((s-1)^2/(s^(7/2)));

/* Problem 63: OK */

factor(specint(%e^(-s*t)*h2(10,t),t));
((s-1)^10/(s^(10+3/2)));

/* Laplace transform of hermite for even and odd order:
 * 
 * Problem 64: AS 29.3.46 
 */

laplace(1/sqrt(t)*'hermite(2*n,sqrt(t)),t,s);
%pi*2^(2*n)*(1-1/s)^n/(gamma((2*n-1)/-2)*sqrt(s));

/* Problem 65: AS 29.3.47 */

laplace('hermite(2*n+1,sqrt(t)),t,s);
-%pi*2^(2*n+2)*(1-1/s)^n/(2*gamma((2*n+1)/-2)*s^(3/2));

/******************************************************************************
  A&S 29.3.48 to A&S 29.3.60

  Bessel I und Bessel J
******************************************************************************/

/*****************************************************************************
   Problem 66: A&S: 29.3.48 OK
******************************************************************************/

factor(specint(%e^(-s*t)*a*%e^(-a*t)*(bessel_i(1,a*t)+bessel_i(0,a*t)),t));
-1*((sqrt(s)*sqrt(s+2*a)-s-2*a)/(sqrt(s)*sqrt(s+2*a)));

/*****************************************************************************
   Problem 67: A&S: 29.3.49 OK
******************************************************************************/

factor(specint(%e^(-s*t)*%e^(-(a+b)/2*t)*bessel_i(0,(a-b)/2*t),t));
1/sqrt(s^2+(b+a)*s+a*b);

/*****************************************************************************
   Problem 68: A&S: 29.3.50 OK New
   Maxima doesn't know the simplification for gamma(2*k), but the 
   answer is correct.
   The original code gives additional phase factors.
******************************************************************************/

(assume(2*k-1>0),
 factor(radcan(specint(%e^(-s*t)*sqrt(%pi)*(t/(a-b))^(k-1/2)
                               *%e^(-(a+b)/2*t)*bessel_i(k-1/2,(a-b)/2*t),t))));
2*sqrt(%pi)*gamma(2*k)/(2^(2*k)*gamma((2*k+1)/2)*(s+a)^k*(s+b)^k);

/*****************************************************************************
   Problem 69: A&S: 29.3.51 OK
******************************************************************************/

factor(specint(%e^(-s*t)*t*%e^(-(a+b)/2*t)*(bessel_i(0,(a-b)/2*t)
                                                    +bessel_i(1,(a-b)/2*t)),t));
1/((s+b)*sqrt(s^2+(b+a)*s+a*b));

/*****************************************************************************
   Problem 70: A&S: 29.3.52 OK
******************************************************************************/

factor(specint(%e^(-s*t)*(1/t)*%e^(-a*t)*bessel_i(1,a*t),t));
/*(sqrt(s+2*a)-sqrt(s))/(sqrt(s+2*a)+sqrt(s));*/
-((sqrt(s)*sqrt(s+2*a)-s-a)/a);

/*****************************************************************************
   Problem 71: A&S: 29.3.53 OK New
   The additional phase factor vanish.
******************************************************************************/

/* The result isn't as simple as A&S but correct */

factor(radcan(specint(%e^(-s*t)*(k/t)*%e^(-(a+b)/2*t)*bessel_i(k,(a-b)/2*t),t)));
/* (a-b)^k/(sqrt(s+a)+sqrt(s+b))^(2*k); */
((b-a)^k*k*(-1)^k*gamma(k))/(gamma(k+1)*(2*sqrt(s+a)*sqrt(s+b)+2*s+b+a)^k);

/*****************************************************************************
   Problem 72: A&S: 29.3.54 OK New
   The additional phase factor vanish.
******************************************************************************/

(assume (nu>0),
 factor(specint(%e^(-s*t)*(1/a^nu)*%e^(-a/2*t)*bessel_i(nu,a/2*t),t)));
/*((sqrt(s+a)+sqrt(s))^(-2*nu))/(sqrt(s)*sqrt(s+a));*/
1/(sqrt(s)*sqrt(s+a)*(2*sqrt(s)*sqrt(s+a)+2*s+a)^nu);

/*****************************************************************************
   Problem 73: A&S: 29.3.55 OK
******************************************************************************/

factor(specint(%e^(-s*t)*bessel_j(0,a*t),t));
1/sqrt(s^2+a^2);

/*****************************************************************************
   Problem 74: A&S: 29.3.56 OK
******************************************************************************/

factor(specint(%e^(-s*t)*a^nu*bessel_j(nu,a*t),t));
a^(2*nu)/(sqrt(s^2+a^2)*(sqrt(s^2+a^2)+s)^nu);

/*****************************************************************************
   Problem 75: A&S: 29.3.57 OK
   Maxima doesn't know the simplification for gamma(2*k)
******************************************************************************/

factor(specint(%e^(-s*t)*sqrt(%pi)/gamma(k)*(t/(2*a))^(k-1/2)*bessel_j(k-1/2,a*t),t));
2*sqrt(%pi)*gamma(2*k)/(2^(2*k)*gamma(k)*gamma((2*k+1)/2)*(s^2+a^2)^k);

/*****************************************************************************
   Problem 76: A&S: 29.3.58 OK
   The result of Maxima is correct and can be further simplified to
   (sqrt(s^2+a^2)-s)^k
******************************************************************************/

factor(specint(%e^(-s*t)*(k*a^k/t)*bessel_j(k,a*t),t));
a^(2*k)*k*gamma(k)/(gamma(k+1)*(sqrt(s^2+a^2)+s)^k);

/*****************************************************************************
   Problem 77: A&S: 29.3.59 OK New
   The additional phase factors vanish.
   The result can be further simplified to (s-sqrt(s^2-a^2))^nu/sqrt(s^2-a^2)
******************************************************************************/

factor(specint(%e^(-s*t)*a^nu*bessel_i(nu,a*t),t));
a^(2*nu)/(sqrt(s^2-a^2)*(sqrt(s^2-a^2)+s)^nu);

/*****************************************************************************
   Problem 78: A&S: 29.3.60 OK New
   Use gamma(2*z)=2^(2*z-1)/sqrt(%pi)*gamma(z)*gamma(z+1/2) to show that
   the result of Maxima is equivalent to the result of A&S: 1/(s^2-a^2)^k;
   The additional phase factors vanish.
******************************************************************************/

radcan(specint(%e^(-s*t)*sqrt(%pi)/gamma(k)*(t/(2*a))^(k-1/2)
                                                       *bessel_i(k-1/2,a*t),t));
2*sqrt(%pi)*gamma(2*k)/(2^(2*k)*gamma(k)*gamma((2*k+1)/2)*(s-a)^k*(s+a)^k);

/*****************************************************************************
   Problem 79: A&S: 29.3.61 OK New
   An algorithm for the Unit Step function has been implemented.
******************************************************************************/

specint(%e^(-s*t)*unit_step(t-k),t);
1/s*%e^(-s*k);

/*****************************************************************************
   Problem 80: A&S: 29.3.62 OK New
******************************************************************************/

radcan(specint(%e^(-s*t)*(t-k)*unit_step(t-k),t));
1/s^2*%e^(-s*k);

/*****************************************************************************
   Problem 81: A&S: 29.3.63 OK New
******************************************************************************/

ratsimp(specint(%e^(-s*t)*(t-k)^(nu-1)/gamma(nu)*unit_step(t-k),t));
1/s^nu*%e^(-k*s);

/*****************************************************************************
   Problem 82: A&S: 29.3.64 OK New
******************************************************************************/

ratsimp(specint(%e^(-s*t)*(unit_step(t)-unit_step(t-k)),t));
(%e^(-s*k)*(%e^(k*s)-1))/s;

/*****************************************************************************
   Problem 83: A&S: 29.3.65 OK New
******************************************************************************/

ratsimp(specint(%e^(-s*t)*sum(unit_step(t-n*k),n,0,inf),t)),simpsum;
%e^(k*s)/(s*%e^(k*s)-s);

/*****************************************************************************
   Problem 84: A&S: 29.3.66 (OK NEW)
   $SPECINT gets a result with a sum. This sum simplifies with simpsum to
   the correct result: 1/(s*%e^(k*s)-a*s)

   But Maxima ask in the simplifier of the sum for the sign of %e^(k*?psey)-a.
   We have a problem to give Maxima this as a rule. It doesn't work.
   But when we do it in two steps and give a rule for %e^(k*s)-a it works and
   we get the expected result.
******************************************************************************/

block([result],
 (assume(%e^(k*s)-a>0),
 result:ratsimp(specint(%e^(-s*t)*sum(a^(n-1)*unit_step(t-n*k),n,1,inf),t)),
 ev(result,simpsum)));
%e^(-k*s)/(s*(1-a*%e^(-k*s)));

/*****************************************************************************
   Problem 85: A&S: 29.3.67 OK New
   The result of Maxima is equivalent to 1/s*tanh(k*s)
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(unit_step(t)+2*sum((-1)^n*unit_step(t-2*n*k),n,1,inf)),t))),simpsum;
(%e^(k*s)-1)*(%e^(k*s)+1)/(s*(%e^(2*k*s)+1));

/*****************************************************************************
   Problem 86: A&S: 29.3.68 OK New
******************************************************************************/

ratsimp(specint(%e^(-s*t)*sum((-1)^n*unit_step(t-n*k),n,0,inf),t)),simpsum;
%e^(k*s)/(s*%e^(k*s)+s);

/*****************************************************************************
   Problem 87: A&S: 29.3.69 OK New
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(t*unit_step(t)+2*sum((-1)^n*(t-2*n*k)
                                     *unit_step(t-2*n*k),n,1,inf)),t))),simpsum;
(%e^(k*s)-1)*(%e^(k*s)+1)/(s^2*(%e^(2*k*s)+1));

/*****************************************************************************
   Problem 88: A&S: 29.3.70 OK New
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)
                            *2*sum(unit_step(t-(2*n+1)*k),n,0,inf),t))),simpsum;
2*%e^(k*s)/(s*(%e^(k*s)-1)*(%e^(k*s)+1));

/*****************************************************************************
   Problem 89: A&S: 29.3.71 OK New
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*2*sum((-1)^n
                                  *unit_step(t-(2*n+1)*k),n,0,inf),t))),simpsum;
2*%e^(k*s)/(s*(%e^(2*k*s)+1));

/*****************************************************************************
   Problem 90: A&S: 29.3.72 OK New
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(unit_step(t)
                               +2*sum(unit_step(t-2*n*k),n,1,inf)),t))),simpsum;
(%e^(2*k*s)+1)/(s*(%e^(k*s)-1)*(%e^(k*s)+1));

/*****************************************************************************
   Problem 91: A&S: 29.3.73 (OK Noun form New)
   We have no algorithm for the Abs function.
   The result is k/(s^2+k^2)*coth(%pi*s/(2*k))
   Because we exponentialize the integrand, we don't get 
   a noun form with the original Sin function.
******************************************************************************/

specint(%e^(-s*t)*abs(sin(k*t)),t);
'specint(%e^-(s*t)*abs(%e^(2*%i*k*t)-1),t)/2$

/*****************************************************************************
   Problem 92: A&S: 29.3.74 OK New
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*sum((-1)^n*sin(t)
                                      *unit_step(t-n*%pi),n,0,inf),t))),simpsum;
%e^(%pi*s)/((s^2+1)*(%e^(%pi*s)-1));

/*****************************************************************************
   Problem 93: A&S: 29.3.75 OK
******************************************************************************/

factor(specint(%e^(-s*t)*bessel_j(0,2*sqrt(k*t)),t));
%e^(-k/s)/s;

/*****************************************************************************
   Problem 94: A&S: 29.3.76 OK New
******************************************************************************/

ratsimp(specint(%e^(-s*t)*1/sqrt(%pi*t)*cos(2*sqrt(k*t)),t));
%e^(-k/s)/sqrt(s);

/*****************************************************************************
   Problem 95: A&S: 29.3.77 OK New
******************************************************************************/

ratsimp(specint(%e^(-s*t)*1/sqrt(%pi*t)*cosh(2*sqrt(k*t)),t));
%e^(k/s)/sqrt(s);

/*****************************************************************************
   Problem 96: A&S: 29.3.78 OK New
******************************************************************************/

ratsimp(specint(%e^(-s*t)*1/sqrt(%pi*k)*sin(2*sqrt(k*t)),t));
s^(-3/2)*%e^(-k/s);

/*****************************************************************************
   Problem 97: A&S: 29.3.79 OK New
******************************************************************************/

ratsimp(specint(%e^(-s*t)*1/sqrt(%pi*k)*sinh(2*sqrt(k*t)),t));
s^(-3/2)*%e^(k/s);

/*****************************************************************************
   Problem 98: A&S: 29.3.80 OK
******************************************************************************/

(assume(nu-1>0),
 ratsimp(specint(%e^(-s*t)*(t/k)^((nu-1)/2)*bessel_j(nu-1,2*sqrt(k*t)),t)));
(1/s^nu)*%e^(-k/s);

/*****************************************************************************
   Problem 99: A&S: 29.3.81 OK New
******************************************************************************/

(assume(nu-1>0),
 ratsimp(specint(%e^(-s*t)*(t/k)^((nu-1)/2)*bessel_i(nu-1,2*sqrt(k*t)),t)));
(1/s^nu)*%e^(k/s);

/******************************************************************************
   Problem 100: A&S: 29.3.82 OK New
******************************************************************************/

(block [besselexpand:true],
  ratsimp(exponentialize(
    specint(%e^(-s*t)*k/(2*sqrt(%pi*t^3))*%e^(-k^2/(4*t)),t))));
%e^(-k*sqrt(s));

/******************************************************************************
   Problem 101: A&S: 29.3.83 (OK noun form New)
   Maxima doesn't find a result. The noun form is correct.
   Tabulated result is: 1/s*%e^(-k*sqrt(s))
******************************************************************************/

specint(%e^(-s*t)*erfc(k/(2*sqrt(t))),t);
'specint(%e^(-s*t)*erfc(k/(2*sqrt(t))),t);

/*****************************************************************************
   Problem 102: A&S: 29.3.84 OK New
******************************************************************************/

ratsimp(exponentialize(specint(%e^(-s*t)/sqrt(%pi*t)*%e^(-k^2/(4*t)),t)));
1/sqrt(s)*%e^(-k*sqrt(s));

/*****************************************************************************
   Problem 103: A&S: 29.3.85 (OK noun form New)
   Tabulated result: 1/s^2*%e^(-k*sqrt(s))
******************************************************************************/

specint(%e^(-s*t)*2*sqrt(t)*%i*erfc(k/(2*sqrt(t))),t);
'specint(%e^(-s*t)*2*sqrt(t)*%i*erfc(k/(2*sqrt(t))),t);

/*****************************************************************************
   Problem 104: A&S: 29.3.86 (OK noun form New)
   Tabulated result: 1/(1+n/2)*%e^(-k*sqrt(s))
******************************************************************************/

specint(%e^(-s*t)*(4*t)^(n/2)*%i*erfc(k/(2*sqrt(t))),t);
'specint(%e^(-s*t)*(4*t)^(n/2)*%i*erfc(k/(2*sqrt(t))),t);

/*****************************************************************************
   Problem 105: A&S: 29.3.87 (OK noun form New)
   We have no algorithm for an argument 1/sqrt(t).
   Tabulated result: s^((n-1)/2)*%e^(-k*sqrt(s));
******************************************************************************/

specint(%e^(-s*t)*%e^(-k^2/(4*t))/(2^n*sqrt(%pi*t^(n+1)))
                                                  *hermite(n,(k/(2*sqrt(t)))),t);
'specint(hermite(n,k/(2*sqrt(t)))*t^(-n/2-1/2)*%e^(-s*t-k^2/(4*t)),t)
 /(sqrt(%pi)*2^n);

/*****************************************************************************
   Problem 106: A&S: 29.3.88 (Ok noun form New)
   Tabulated result: %e^(-k*sqrt(s))/(a*sqrt(s));
   We have a sum with 3 terms. Maxima gives a partially result for 2 terms.
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*(1/sqrt(%pi*t)*exp(-k^2/(4*t))
                     -a*%e^(a*k)*%e^(a^2*t)*erfc(a*sqrt(t)+k/(2*sqrt(t)))),t)));
(sqrt(s)*'specint(-a*%e^(-s*t+a^2*t+a*k)*erfc((2*a*t+k)/(2*sqrt(t))),t)
                                      -sinh(k*sqrt(s))+cosh(k*sqrt(s)))/sqrt(s);

/*****************************************************************************
   Problem 107: A&S: 29.3.89 (OK noun form New)
   Tabulated result: a*e^(-k*sqrt(s))/(s*(a+sqrt(s)));
******************************************************************************/

specint(%e^(-s*t)*(-%e^(a*k)*%e^(a^2*t)*erfc(a*sqrt(t)+k/(2*sqrt(t)))
                                                       +erfc(k/(2*sqrt(t)))),t);
'specint(-erfc(a*sqrt(t)+k/(2*sqrt(t)))*%e^(-s*t+a^2*t+a*k),t)
                                     +'specint(erfc(k/(2*sqrt(t)))*%e^-(s*t),t);

/*****************************************************************************
   Problem 108: A&S: 29.3.90 (OK noun form New)
   Tabulated result: %e^(-k*sqrt(s))/(sqrt(s)*(a+sqrt(s)));
******************************************************************************/

specint(%e^(-s*t)*%e^(a*k)*%e^(a^2*t)*erfc(a*sqrt(t)+k/(2*sqrt(t))),t);
'specint(%e^(-s*t)*%e^(a*k)*%e^(a^2*t)*erfc(a*sqrt(t)+k/(2*sqrt(t))),t);

/*****************************************************************************
   Problem 109: A&S: 29.3.91 (Ok noun form New)
   Tabulated result: %e^(-k*sqrt(s*(s+a)))/sqrt(s*(s+a))
******************************************************************************/
 
specint(%e^(-s*t)*%e^(a*t/2)*bessel_i(0,1/2*a*sqrt(t^2-k^2))*unit_step(t-k),t);
'specint(%e^(-s*t)*%e^(a*t/2)*bessel_i(0,1/2*a*sqrt(t^2-k^2))*unit_step(t-k),t);

/*****************************************************************************
   Problem 110: A&S: 29.3.92 (OK noun form New)
   Tabulated result: %e^(-k*sqrt(s^2+a^2))/sqrt(s^2+a^2)
******************************************************************************/

specint(%e^(-s*t)*bessel_j(0,a*sqrt(t^2-k^2))*unit_step(t-k),t);
'specint(%e^(-s*t)*bessel_j(0,a*sqrt(t^2-k^2))*unit_step(t-k),t);

/*****************************************************************************
   Problem 111: A&S: 29.3.93 (OK noun form New)
   Tabulated result: %e^(-k*sqrt(s^2-a^2))/sqrt(s^2-a^2)
******************************************************************************/

specint(%e^(-s*t)*bessel_i(0,a*sqrt(t^2-k^2))*unit_step(t-k),t);
'specint(%e^(-s*t)*bessel_i(0,a*sqrt(t^2-k^2))*unit_step(t-k),t);

/*****************************************************************************
   Problem 112: A&S: 29.3.94 (OK noun form New)
   Tabulated result: %e^(-k*(sqrt(s^2+a^2))-s)/sqrt(s^2+a^2)
******************************************************************************/

specint(%e^(-s*t)*bessel_j(0,a*sqrt(t^2+2*k*t)),t);
'specint(%e^(-s*t)*bessel_j(0,a*sqrt(t)*sqrt(t+2*k)),t);

/*****************************************************************************
   Problem 113: A&S: 29.3.95 (OK noun form New)
   Tabulated result: %e^(-k*s)-%e^(-k*sqrt(s^2+a^2))
******************************************************************************/

specint(%e^(-s*t)*a*k/sqrt(t^2-k^2)*bessel_j(1,a*sqrt(t^2-k^2))*unit_step(t-k),t);
'specint(%e^(-s*t)*a*k/sqrt(t^2-k^2)*bessel_j(1,a*sqrt(t^2-k^2))*unit_step(t-k),t);

/*****************************************************************************
   Problem 114: A&S: 29.3.96 (OK noun form New)
   Tabulated result: -%e^(-k*s)+%e^(-k*sqrt(s^2-a^2))
******************************************************************************/

specint(%e^(-s*t)*a*k/sqrt(t^2-k^2)*bessel_i(1,a*sqrt(t^2-k^2))*unit_step(t-k),t);
'specint(%e^(-s*t)*a*k/sqrt(t^2-k^2)*bessel_i(1,a*sqrt(t^2-k^2))*unit_step(t-k),t);

/*****************************************************************************
   Problem 115: A&S: 29.3.97 (OK noun form New)
   Tabulated result:
      a^nu*%e^(-k*sqrt(s^2+a^2))/(sqrt(s^2+a^2)*a^2*(sqrt(s^2+a^2)+s)^nu)
******************************************************************************/

specint(%e^(-s*t)*((t-k)/(t+k))^(nu/2)*bessel_j(nu,a*sqrt(t^2-k^2))*unit_step(t-k),t);
'specint(%e^(-s*t)*((t-k)/(t+k))^(nu/2)*bessel_j(nu,a*sqrt(t^2-k^2))*unit_step(t-k),t);

/*****************************************************************************
   Problem 116: A&S: 29.3.98 OK New
******************************************************************************/

ratsimp(specint(%e^(-s*t)*(-%gamma-log(t)),t));
1/s*log(s);

/*****************************************************************************
   Problem 117: A&S: 29.3.99 OK New
******************************************************************************/

ratsimp(specint(%e^(-s*t)*t^(k-1)/gamma(k)*(psi[0](k)-log(t)),t));
1/s^k*log(s);

/*****************************************************************************
   Problem 118: A&S: 29.3.100 OK NEW
   We support the expintegral_e1 and get a new result.
   Tabulated result: log(s)/(s-a);
******************************************************************************/

ratsimp(specint(%e^(-s*t)*%e^(a*t)*(log(a)+expintegral_e1(a*t)),t));
log(s)/(s-a);

/*****************************************************************************
   Problem 119: A&S: 29.3.101 OK NEW
    
   Tabulated result: log(s)/(s^2+1)
******************************************************************************/

radcan(specint(%e^(-s*t)*(cos(t)*expintegral_si(t)-sin(t)*expintegral_ci(t)),t)),
  logarc:true,logexpand:super;
log(s)/(s^2+1);

/*****************************************************************************
   Problem 120: A&S: 29.3.102 OK NEW
   Tabulated result: s*log(s)/(s^2+1)
******************************************************************************/

radcan(specint(%e^(-s*t)*(-sin(t)*expintegral_si(t)-cos(t)*expintegral_ci(t)),t)),
   logarc:true,logexpand:super;
s*log(s)/(s^2+1);

/*****************************************************************************
   Problem 121: A&S: 29.3.103 OK New
   We support the expintegral_e1 and get a new result.
   Tabulated result: 1/s*log(1+k*s)
******************************************************************************/

specint(%e^(-s*t)*expintegral_e1(t/k),t);
log(1+k*s)/s;

/*****************************************************************************
   Problem 122: A&S: 29.3.104 OK New
******************************************************************************/

specint(%e^(-s*t)*1/t*(%e^(-b*t)-%e^(-a*t)),t);
log((s+a)/(s+b));

/*****************************************************************************
   Problem 123: A&S: 29.3.105 OK NEW
   Tabulated result: 1/s*log(1+k^2*s^2)
******************************************************************************/

radcan(specint(%e^(-s*t)*(-2)*expintegral_ci(t/k),t));
1/s*log(1+k^2*s^2);

/*****************************************************************************
   Problem 124: A&S: 29.3.106 OK NEW
   Tabulated result: 1/s*log(s^2+a^2)
******************************************************************************/

ratsimp(specint(%e^(-s*t)*(2*log(a)-2*expintegral_ci(a*t)),t));
1/s*log(s^2+a^2);

/*****************************************************************************
   Problem 125: A&S: 29.3.107 OK NEW
   We get a correct noun form with a partially evaluated integral.
   Tabulated result: 1/s^2*log(s^2+a^2)
******************************************************************************/

ratsimp(specint(%e^(-s*t)*(2*t*log(a)+2/a*sin(a*t)-2*t*expintegral_ci(a*t)),t));
1/s^2*log(s^2+a^2);

/*****************************************************************************
   Problem 126: A&S: 29.3.108 OK New
   Tabulated result: log((s^2+a^2)/s^2);
******************************************************************************/

specint(%e^(-s*t)*2/t*(1-cos(a*t)),t);
log(a^2/s^2+1);

/*****************************************************************************
   Problem 127: A&S: 29.3.109 OK New
   Tabulated result: log((s^2-a^2)/s^2);
******************************************************************************/

specint(%e^(-s*t)*2*(1-cosh(a*t))/t,t);
log(1-a^2/s^2);

/*****************************************************************************
   Problem 128: A&S: 29.3.110 OK New
   arctan(k/s);
******************************************************************************/

radcan(specint(%e^(-s*t)*sin(k*t)/t,t));
-((%i*log(s+%i*k)-%i*log(s-%i*k)) /2);

/*****************************************************************************
   Problem 129: A&S: 29.3.111 (OK Noun form New)
   1/s*arctan(k/s);
******************************************************************************/

specint(%e^(-s*t)*expintegral_si(k*t),t);
1/s*atan(k/s);

/*****************************************************************************
   Problem 130: A&S: 29.3.112 OK
******************************************************************************/

factor(ratsimp(specint(%e^(-s*t)*1/(k*sqrt(%pi))*exp(-t^2/(4*k^2)),t)));
-%e^(k^2*s^2)*(erf(k*s)-1);

/*****************************************************************************
   Problem 131: A&S: 29.3.113 (Ok noun form New)
   Tabulated result: 1/s*%e^(k^2*s^2)*erfc(k*s);
******************************************************************************/

specint(%e^(-s*t)*erf(t/(2*k)),t);
'specint(%e^(-s*t)*erf(t/(2*k)),t);

/*****************************************************************************
   Problem 132: A&S: 29.3.114 OK New
   Tabulated result is %e^(k*s)*erfc(sqrt(k*s));
******************************************************************************/

radcan(specint(%e^(-s*t)*sqrt(k)/(%pi*sqrt(t)*(t+k)),t));
%e^(k*s)*(1-erf(sqrt(k*s)));

/*****************************************************************************
   Problem 133: A&S: 29.3.115 OK New
   gamma_incomplete(1/2,a*s)=sqrt(%pi)*erfc(sqrt(a*s))
   1/sqrt(s)*erfc(sqrt(k*s));
******************************************************************************/

specint(%e^(-s*t)/sqrt(%pi*t)*unit_step(t-k),t),gamma_expand:true;
1/sqrt(s)*erfc(sqrt(k)*sqrt(s));

/*****************************************************************************
   Problem 134: A&S: 29.3.116 OK New
   1/sqrt(s)*%e^(k*s)*erfc(sqrt(k*s));
******************************************************************************/

specint(%e^(-s*t)*1/sqrt(%pi*(t+k)),t),gamma_expand:true;
erfc(sqrt(k)*sqrt(s))*%e^(k*s)/sqrt(s);

/*****************************************************************************
   Problem 135: A&S: 29.3.117 (OK noun form)
   We have t^-1*sin(sqrt(t)) and F35P147 fails because of factor t^-1.
   Tabulated result: erf(k/sqrt(s));
******************************************************************************/

radcan(specint(%e^(-s*t)*sin(2*k*sqrt(t))/(%pi*t),t));
'specint(-%i*%e^(2*%i*k*sqrt(t)-s*t)/(2*%pi*t),t)
   +'specint(%i*%e^(-s*t-2*%i*k*sqrt(t))/(2*%pi*t),t);

/*****************************************************************************
   Problem 136: A&S: 29.3.118 OK
******************************************************************************/

ratsimp(specint(%e^(-s*t)*1/sqrt(%pi*t)*%e^(-2*k*sqrt(t)),t));
-((erf(k/sqrt(s))-1)*%e^(k^2/s)/sqrt(s));

/*****************************************************************************
   Problem 137: A&S: 29.3.119 (OK noun form New)
   bessel_k(0,k*s);
   We have no algorithm for 1/sqrt(t^2-k^2)
******************************************************************************/

specint(%e^(-s*t)*1/sqrt(t^2-k^2)*unit_step(t-k),t);
'specint(%e^(-s*t)*1/sqrt(t^2-k^2)*unit_step(t-k),t);

/*****************************************************************************
   Problem 138: A&S: 29.3.120 OK New
******************************************************************************/

specint(%e^(-s*t)*1/(2*t)*exp(-k^2/(4*t)),t);
bessel_k(0,k*sqrt(s));

/*****************************************************************************
   Problem 139: A&S: 29.3.121 OK New
   We know U(3/2,3,z)= %e^(k*s)*bessel_k(1,z/2)/(sqrt(%pi)*z) and we get
   the tabulated result: 1/s*%e^(k*s)*bessel_k(1,k*s);
******************************************************************************/

ratsimp(specint(%e^(-s*t)/k*sqrt(t*(t+2*k)),t));
2*k*sqrt(%pi)*hypergeometric_u(3/2,3,(2*k*s));

/*****************************************************************************
   Problem 140: A&S: 29.3.122 OK New
   The original code had an extra factor.
******************************************************************************/

specint(%e^(-s*t)/k*%e^(-k^2/(4*t)),t);
1/sqrt(s)*bessel_k(1,k*sqrt(s));

/*****************************************************************************
   Problem 141: A&S: 29.3.123 (OK noun formn New)
   1/sqrt(s)*%e^(k/s)*bessel_k(0,k/s);
******************************************************************************/

specint(%e^(-s*t)*2/sqrt(%pi*t)*bessel_k(0,2*sqrt(2*k*t)),t);
'specint(2*bessel_k(0,2*sqrt(2)*sqrt(k)*sqrt(t))*%e^(-s*t)/(sqrt(%pi)*sqrt(t)),t);

/*****************************************************************************
   Problem 142: A&S: 29.3.124 OK New
   We get a result in parts. I think the algorithm to calculate t^v*(t+a)^w
   can be further generalized to get also a result for this integral.
   The problem is the pattern which doesn't match sqrt(2*k-t).
   The pattern is further generalizied. With 
     U(1/2,1,z)=%e^(z/2)*K0(z/2)
     U(1/2,1-z)=%e^(-z/2)*(K0(z/2)+%i*%pi*I0(z/2))
   we get the expected result:
   %pi*%e^(-s*k)*bessel_i(0,k*s);
******************************************************************************/

specint(%e^(-s*t)*(unit_step(t)-unit_step(t-2*k))/sqrt(t*(2*k-t)),t);
sqrt(%pi)*%i*'hypergeometric_u(1/2,1,2*k*s)*%e^-(2*k*s)-sqrt(%pi)*%i*'hypergeometric_u(1/2,1,-2*k*s);

/*****************************************************************************
   Problem 143: A&S: 29.3.125 Error
   Can we verrify the result: %e^(-s*k)*bessel_i(1,k*s)
   Here we have a problem: We get a result with four Hypergeometric U functions.
   But the result simplifies to something like 
    (a * bessel_i(0,k*s)  + b * bessel_i(1,k*s))*%e^(-s*k)
   We have no bessel_i(0,k*s) in the expected result. What is wrong???
   We declare this test to be an error.
******************************************************************************/

radcan(specint(%e^(-s*t)*(unit_step(t)-unit_step(t-2*k))*(k-t)/(%pi*k*sqrt(t*(2*k-t))),t));
done;

/*****************************************************************************
   Problem 144: A&S: 29.3.126 OK
   %e^(a*s)*E[1](a*s);
******************************************************************************/

specint(%e^(-s*t)/(t+a),t);
gamma_incomplete(0,a*s)*%e^(a*s);

/*****************************************************************************
   Problem 145: A&S: 29.3.127 OK
   (1/a-s*%e^(a*s)*E[1](a*s));
******************************************************************************/

radcan(specint(%e^(-s*t)/(t+a)^2,t)),gamma_expand:true;
(expintegral_ei(-a*s)*a*s*%e^(a*s)+1)/a;

/*****************************************************************************
   Problem 146: A&S: 29.3.128 OK
   (a^(1-n)*%e^(a*s)*E[n](a*s));
******************************************************************************/

specint(%e^(-s*t)/(t+a)^n,t);
gamma_incomplete(1-n,a*s)*s^(n-1)*%e^(a*s);

/*****************************************************************************
   Problem 147: A&S: 29.3.129 (OK noun form)
   (%pi/2-Si(s))*cos(s)+Ci(s)*sin(s);
   For this case the noun form doesn't look nice.
******************************************************************************/

specint(%e^(-s*t)/(t^2+1),t);
'specint(1/(t^2*%e^(s*t)+%e^(s*t)),t);

/*****************************************************************************
   End of tests from A&S
******************************************************************************/
/*******************************************************************************

  Do the tests with the tabulated Laplace transforms from EqWorld

*******************************************************************************/

(kill(all), assume(s>0, a>0, b>0, n>0, nu>-1), declare(n,integer, nu,real));
done;

/*******************************************************************************

   Expressions with Power-Law Functions 

*******************************************************************************/

/* Problem 149: No. 1 OK */

specint(%e^(-s*t),t);
1/s;

/* Problem 150: No. 2 OK New
   This is an example for the step function u(t).
   We have implemented an algorithm with unit_step.
*/

specint(%e^(-s*t)*(unit_step(t-a)-unit_step(t-b)),t);
%e^-(a*s)/s-%e^-(b*s)/s;

/* Problem 151: No. 3 OK */

specint(%e^(-s*t)*t,t);
1/s^2;

/* Problem 152: No. 4 OK New
   The result of Maxima is equivalent to the
   tabulated result: -%e^(a*s)*ei(-a*p)
*/

specint(%e^(-s*t)*(t+a)^-1,t);
gamma_incomplete(0,a*s)*%e^(a*s);

/* Problem 153: No. 5 OK */

specint(%e^(-s*t)*t^n,t);
gamma(n+1)/s^(1+n);

/* Problem 154: No. 6 OK */

specint(%e^(-s*t)*t^(n-1/2),t);
gamma(n+1/2)/s^(1/2+n);

/* Problem 155: No. 7 OK New
   With gamma_incomplete(1/2,a*s)=sqrt(%pi)*erfc(sqrt(a*s)) the result of 
   Maxima is equivalent to the
   tabulated result: sqrt(%pi/s)*%e^(a*s)*erfc(sqrt(a*s));
*/

specint(%e^(-s*t)/sqrt(t+a),t);
gamma_incomplete(1/2,a*s)*%e^(a*s)/sqrt(s);

/* Problem 156: No. 8 OK New
   tabulated result: sqrt(%pi/s)-%pi*sqrt(a)*%e^(a*s)*erfc(sqrt(a*s))
*/

radcan(specint(%e^(-s*t)*sqrt(t)/(t+a),t));
(sqrt(a)*(%pi*erf(sqrt(a)*sqrt(s))-%pi)*sqrt(s)*%e^(a*s)+sqrt(%pi))/sqrt(s);

/* Problem 157: No. OK New
   With gamma_incomplete(-1/2,z)=2*e^-z/sqrt(z)-2*sqrt(%pi)*erfc(sqrt(z))
   the result of Maxima is equivalent to the
   Tabulated result: 2*a^(-1/2)-2*(%pi*s)^(1/2)*%e^(a*s)*erfc(sqrt(a*s))
*/

specint(%e^(-s*t)*(t+a)^(-3/2),t);
gamma_incomplete(-1/2,a*s)*sqrt(s)*%e^(a*s);

/* Problem 158: No. 10 OK New
   Tabulated result: (%pi/s)^(1/2)-%pi*a^(1/2)*e^(a*s)*erfc(sqrt(a*s));
*/

radcan(specint(%e^(-s*t)*t^(1/2)*(t+a)^(-1),t));
(sqrt(a)*(%pi*erf(sqrt(a)*sqrt(s))-%pi)*sqrt(s)*%e^(a*s)+sqrt(%pi))/sqrt(s);

/* Problem 159: No. 11 OK New
   Tabulated result: %pi*a^(1/2)*e^(a*s)*erfc(sqrt(a*s));
*/

radcan(specint(%e^(-s*t)*t^(-1/2)*(t+a)^(-1),t));
-((%pi*erf(sqrt(a)*sqrt(s))-%pi)*%e^(a*s)/sqrt(a));

/* Problem 160: No. 12 OK */

specint(%e^(-s*t)*t^nu,t);
gamma(nu+1)/s^(nu+1);

/* Problem 161: No. 13 OK New
   Tabulated result: s^(-nu-1)*%e^(a*s)*gamma_incomplete(nu+1,a*s)
*/

specint(%e^(-s*t)*(t+a)^nu,t);
gamma_incomplete(nu+1,a*s)*s^(-nu-1)*%e^(a*s);

/* Problem 162: No. 14 Ok New
   With 
     gamma_incomplete(-v,a*s) = gamma(-v,a*s) - gamma_incomplete_lower(-v,a*s) and
     gamma(v+1) = v * gamma(v) 
   the result of Maxima can be shown to be equivalent ot the
   tabulated result: a^nu*gamma(nu+1)*e^(a*s)*gamma_incomplete(-nu,a*s);
*/

radcan(specint(%e^(-s*t)*t^nu*(t+a)^(-1),t));
(a^nu*gamma(-nu)*gamma(nu+1)-a^nu*nu*gamma_incomplete_lower(-nu,a*s)*gamma(nu))*%e^(a*s);

/*******************************************************************************

   Expressions with Exponential Functions

*******************************************************************************/

/* Problem 163: No. 1 OK */

specint(%e^(-s*t)*%e^(-a*t),t);
(s+a)^(-1);

/* Problem 164: No. 2 OK */

specint(%e^(-s*t)*t*%e^(-a*t),t);
(s+a)^(-2);

/* Problem 165: No. 3 OK */

(assume(nu>0), specint(%e^(-s*t)*t^(nu-1)*%e^(-a*t),t));
gamma(nu)*(s+a)^(-nu);

/* Problem 166: No. 4 OK New
   After extension of the algorithm we find the tabulated result.
*/

specint(%e^(-s*t)*(%e^(-a*t)-%e^(-b*t))/t,t);
-log((s+a)/(s+b));

/* Problem 167: No. 5 OK New
   Tabulated result: (s+2*a)*log(s+2*a)+s*log(s)-2*(s+a)*log(s+a);
*/

specint(%e^(-s*t)*(1-%e^(-a*t))^2/t^2,t);
(s+2*a)*log(s+2*a)+s*log(s)-2*(s+a)*log(s+a);

/* Problem 168: No. 6 OK */

factor(radcan(specint(%e^(-s*t)*%e^(-a*t^2),t)));
- (sqrt(%pi)*%e^(s^2/(4*a))*(erf(s/(2*sqrt(a)))-1))/(2*sqrt(a));

/* Problem 169: No. 7 OK */

factor(expand(radcan(specint(%e^(-s*t)*t*%e^(-a*t^2),t))));
(sqrt(%pi)*s*%e^(s^2/(4*a))*erf(s/(2*sqrt(a)))-sqrt(%pi)*s*%e^(s^2/(4*a))+2*sqrt(a))/(4*a^(3/2)); 

/* Problem 170: No. 8 OK */

specint(%e^(-s*t)*%e^(-a/t),t);
2*sqrt(a/s)*bessel_k(1,2*sqrt(a*s));

/* Problem 171: No. 9 OK */

block([besselexpand:true,exponentialize:true],radcan(specint(%e^(-s*t)*sqrt(t)*%e^(-a/t),t)));
((2*sqrt(%pi)*sqrt(a)*sqrt(s)+sqrt(%pi))*%e^(-2*sqrt(a)*sqrt(s)))/(2*s^(3/2));

/* Problem 172: No. 10 OK */

block([besselexpand:true,exponentialize:true],radcan(specint(%e^(-s*t)/sqrt(t)*%e^(-a/t),t)));
sqrt(%pi/s)*%e^(-2*sqrt(a*s));

/* Problem 173: No. 11 OK */

block([besselexpand:true,exponentialize:true],radcan(specint(%e^(-s*t)/(t*sqrt(t))*%e^(-a/t),t)));
sqrt(%pi/a)*%e^(-2*sqrt(a*s));

/* Problem 174: No. 12 OK
   We calculate for an integer to prevent the conversion to bessel_i.
*/

factor(specint(%e^(-s*t)*t^(n-1)*%e^(-a/t),t));
2*a^(n/2)*bessel_k(n,2*sqrt(a)*sqrt(s))/s^(n/2);

/* Problem 175: No. 13 OK
   Answer of EqWorld is 
     s^(-1)-(%pi*a)^(1/2)*s^(-3/2)*e^(a/s)*erfc(sqrt(a/s))
*/

radcan(specint(%e^(-s*t)*%e^(-2*sqrt(a*t)),t));
(sqrt(%pi)*sqrt(a)*(erf(sqrt(a)/sqrt(s))-1)*%e^(a/s)+sqrt(s))/s^(3/2);

/* Problem 176: No. 14 OK
   Result of EqWorld is (%pi/s)^(1/2)*%e^(a/s)*erfc(sqrt(a/s));
   Maxima doesn't convert erf(z)-1 -> erfc(z)
*/

radcan(specint(%e^(-s*t)/sqrt(t)*%e^(-2*sqrt(a*t)),t));
-((sqrt(%pi)*(erf(sqrt(a)/sqrt(s))-1)*%e^(a/s))/sqrt(s));

/*******************************************************************************

   Expressions with Trigonometric Functions

*******************************************************************************/

/* Problem 177: No. 1 OK */

radcan(specint(%e^(-s*t)*sin(a*t),t));
a/(s^2+a^2);

/* Problem 178: No. 2 (OK noun form New)  
   We have no algorithm for the abs function
   Tabulated result: a/(s^2+a^2)*coth(%pi*s/(2*a));
*/

specint(%e^(-s*t)*(abs(sin(a*t))),t);
'specint(%e^-(s*t)*abs(%e^(2*%i*a*t)-1),t)/2$

/* Problem 179: No. 3 (OK noun form New)
   The result of EqWorld includes a product:
      a^(2*n)*(2*n)!/(s*product(s^2+(2*k*a)^2,k,1,n));
*/

specint(%e^(-s*t)*(sin(a*t))^(2*n),t);
'specint((-1)^n*(%e^(2*%i*a*t)-1)^(2*n)*%e^(-s*t-2*%i*a*n*t),t)/2^(2*n);

/* Problem 180: No. 4 (OK noun form New) 
   The result of EqWorld includes a product:
      a^(2*n+1)*(2*n+1)!/((s^2+a^2)*product(s^2+(2*k+1)^2*a^2,k,1,n));
*/

factor(specint(%e^(-s*t)*(sin(a*t))^(2*n+1),t));

/*
specint(-%i*2^(-2*n-1)*(-1)^n*(%e^(2*%i*a*t)-1)^(2*n)*%e^(-s*t-2*%i*a*n*t+%i*a*t),t)+specint(%i*2^(-2*n-1)*(-1)^n*(%e^(2*%i*a*t)-1)^(2*n)*%e^(-s*t-2*%i*a*n*t-%i*a*t),t);
*/

'specint(-%i*2^(-2*n-1)*(-1)^n*(%e^(2*%i*a*t)-1)^(2*n)
            *%e^(-s*t-2*%i*a*n*t+%i*a*t),t)
 +'specint(%i*2^(-2*n-1)*(-1)^n*(%e^(2*%i*a*t)-1)^(2*n)
             *%e^(-s*t-2*%i*a*n*t-%i*a*t),t);

/* Problem 181: No. 5 OK New */

specint(%e^(-s*t)*t^n*sin(a*t),t);
(%i*gamma(n+1)*(s+%i*a)^(-n-1)-%i*gamma(n+1)*(s-%i*a)^(-n-1))/2;

/* Problem 182: No. 6 OK New
   Tabulated result: atan(a/s);
   This is equivalent to the result of Maxima after extension of the algorithm.
*/

specint(%e^(-s*t)*sin(a*t)/t,t);
%i*log((s-%i*a)/(s+%i*a))/2;

/* Problem 183: No. 7 OK New
   The result of Maxima is equivalent to the
   tabulated result: 1/4*log(1+4*a^2*s^(-2));
*/

radcan(specint(%e^(-s*t)/t*(sin(a*t))^2,t));
(log(s^2+4*a^2)-2*log(s))/4;

/* Problem 184: No. 8 OK New
   The result of Maxima can be shown to be equivalent to the
   tabulated result: a*atan(2*a/s)-1/4*s*log(1+4*a^2*p^(-2));
*/

expand(radcan(specint(%e^(-s*t)/t^2*(sin(a*t))^2,t)));
-s*log(s+2*%i*a)/4-%i*a*log(s+2*%i*a)/2-s*log(s-2*%i*a)/4+%i*a*log(s-2*%i*a)/2+s*log(s)/2; 

/* Problem 185: No. 9 OK New
   We correct a bug in f35p147.
*/

radcan(specint(%e^(-s*t)*sin(2*sqrt(a*t)),t));
sqrt(%pi)*sqrt(a)*%e^-(a/s)/s^(3/2);

/* Problem 186: No. 10 (OK noun form New)
   For this Problem the test f35p147test fail.
   The exponent v is negative. We have no algorithm for this case.
   Tabulated answer is:
   %pi*erf(sqrt(a/s));
*/

radcan(specint(%e^(-s*t)*sin(2*sqrt(a*t))/t,t));
specint(-%i*%e^(2*%i*sqrt(a)*sqrt(t)-s*t)/(2*t),t)+specint(%i*%e^(-s*t-2*%i*sqrt(a)*sqrt(t))/(2*t),t);

/* Problem 187: No. 11 OK */

radcan(specint(%e^(-s*t)*cos(a*t),t));
s/(s^2+a^2);

/* Problem 188: No. 12 OK */

radcan(specint(%e^(-s*t)*(cos(a*t))^2,t));
(s^2+2*a^2)/(s^3+4*a^2*s);

/* Problem 189: No. 13 (OK Result is not verified.)
   Maxima get a result, but we can't verify it. See Problem 33.
   Tabulated result:
   n!*s^(n+1)/(s^2+a^2)^(n+1)*sum((-1)^k*C[2*k+1,n+1]((a/s)^(2*k)),k,0,n);
*/

radcan(specint(%e^(-s*t)*t^n*cos(a*t),t));
((s+%i*a)^n*(gamma(n+1)*s+%i*a*gamma(n+1))+(s-%i*a)^n*(gamma(n+1)*s-%i*a*gamma(n+1)))/((s-%i*a)^n*(s+%i*a)^n*(2*s^2+2*a^2)); 

/* Problem 190: No. 14 OK New*/

specint(%e^(-s*t)*(1-cos(a*t))/t,t);
1/2*log(1+a^2*s^(-2));

/* Problem 191: No. 15 OK New
   The result of Maxima is equivalent to the tabulated result:
      1/2*log((s^2+b^2)/(s^2+a^2));
*/

radcan(specint(%e^(-s*t)/t*(cos(a*t)-cos(b*t)),t));
(log(s+%i*b)+log(s-%i*b)-log(s+%i*a)-log(s-%i*a))/2;

/* Problem 192: No. 16 OK New*/

radcan(specint(%e^(-s*t)*sqrt(t)*cos(2*sqrt(a*t)),t));
1/2*%pi^(1/2)*s^(-5/2)*(s-2*a)*%e^(-a/s);

/* Problem 193: No. 17 OK New
    After correction of a bug Maxima gets the correct answer.
*/

radcan(specint(%e^(-s*t)/sqrt(t)*cos(2*sqrt(a*t)),t));
sqrt(%pi/s)*%e^(-a/s);

/* Problem 194: No. 18 OK */

factor(radcan(specint(%e^(-s*t)*sin(a*t)*sin(b*t),t)));
2*a*b*s/((s^2+(b^2-2*a*b+a^2))*(s^2+(b^2+2*a*b+a^2)));

/* Problem 195: No. 19 OK */

factor(radcan(specint(%e^(-s*t)*cos(a*t)*sin(b*t),t)));
(b*(s^2+b^2-a^2))/((s^2+(b^2-2*a*b+a^2))*(s^2+(b^2+2*a*b+a^2)));

/* Problem 196: No. 20 OK */

factor(radcan(specint(%e^(-s*t)*cos(a*t)*cos(b*t),t)));
(s*(s^2+a^2+b^2))/((s^2+b^2-2*a*b+a^2)*(s^2+b^2+2*a*b+a^2));

/* Problem 197: No. 21 OK */

(assume(s-b>0), factor(radcan(specint(%e^(-s*t)*%e^(b*t)*sin(a*t),t))));
a/(s^2-2*b*s+b^2+a^2);

/* Problem 198: No. 22 OK */

factor(radcan(specint(%e^(-s*t)*%e^(b*t)*cos(a*t),t)));
(s-b)/(s^2-2*b*s+b^2+a^2);

/*******************************************************************************

   Expressions with Hyperbolic Functions

*******************************************************************************/

/* Problem 199: No. 01 OK */

(assume(s-a>0), radcan(specint(%e^(-s*t)*sinh(a*t),t)));
a/(s^2-a^2);

/* Problem 200: No. 02 OK */

(assume(s-2*a>0),radcan(specint(%e^(-s*t)*(sinh(a*t))^2,t)));
2*a^2/(s^3-4*a^2*s);

/* Problem 201: No. 03 OK New
   Correct after correction of the code.
*/

radcan(specint(%e^(-s*t)/t*sinh(a*t),t));
(log(s+a)-log(s-a))/2;

/* Problem 202: No. 04 OK */

factor(radcan(specint(%e^(-s*t)*t^(nu-1)*sinh(a*t),t)));
gamma(nu)*((s+a)^nu-(s-a)^nu)/(2*(s-a)^nu*(s+a)^nu);

/* Problem 203: No. 05 OK New
   Maxima gives the wrong result 0.
   Correct after bug fix.
*/

radcan(specint(%e^(-s*t)*sinh(2*sqrt(a*t)),t));
sqrt(%pi)*sqrt(a)*%e^(a/s)/s^(3/2);

/* Problem 204: No. 06 (OK Sign? New)
   Tabulated result:
     %pi^(1/2)*s^(-5/2)*(1/2*s+a)*%e^(a/s)*erf(sqrt(a/s))-a^(1/2)*s^(-2);
   After bug fix nearly the tabulated answer.
   The last term of the result has a different sign. What's wrong???
   All other examples are correct with the corrected code!
   No equivalent example by A&S. But sinh(2*sqrt(a*t)) and a lot of 
   other examples can be shown to be correct. I think EqWorld is wrong.
*/

factor(radcan(block([gamma_expand:true], specint(%e^(-s*t)*sqrt(t)*sinh(2*sqrt(a*t)),t))));
(sqrt(%pi)*erf(sqrt(a)/sqrt(s))*s*%e^(a/s)+2*sqrt(%pi)*a*erf(sqrt(a)/sqrt(s))*%e^(a/s)+2*sqrt(a)*sqrt(s))/(2*s^(5/2));

/* Problem 205: No. 07 OK New
   Correct after bug fix
*/

factor(radcan(specint(%e^(-s*t)/sqrt(t)*sinh(2*sqrt(a*t)),t)));
%pi^(1/2)*s^(-1/2)*%e^(a/s)*erf(sqrt(a/s));

/* Problem 206: No. 08 (OK extra factor New)
   The result looks perfect, but in the tabulated answer a factor of 4
   in the exponent is missing. What's wrong???
   Tabulated answer:
     1/2*%pi^(1/2)*s^(-1/2)*(%e^(a/s)-1);
   I think EqWorld is wrong.
*/

radcan(specint(%e^(-s*t)*(sinh(2*sqrt(a*t)))^2/sqrt(t),t));
sqrt(%pi)*(%e^(4*a/s)-1)/(2*sqrt(s)); /* Extra factor 4 ??? */

/* Problem 207: No. 09 OK */

factor(radcan(specint(%e^(-s*t)*cosh(a*t)^2,t)));
(s^2-2*a^2)/(s*(s-2*a)*(s+2*a));

/* Problem 208: No. 10 OK */

factor(radcan(specint(%e^(-s*t)*cosh(a*t)^2,t)));
(s^2-2*a^2)/(s*(s-2*a)*(s+2*a));

/* Problem 209: No. 11 OK */

factor(radcan(specint(%e^(-s*t)*t^(nu-1)*cosh(a*t),t)));
gamma(nu)*((s+a)^nu+(s-a)^nu)/(2*(s-a)^nu*(s+a)^nu);

/* Problem 210: No. 12 OK New*/

radcan(specint(%e^(-s*t)*cosh(2*sqrt(a*t)),t));
(sqrt(%pi)*sqrt(a)*erf(sqrt(a)/sqrt(s))*%e^(a/s)+sqrt(s))/s^(3/2);

/* Problem 211: No. 13 OK New
   Maxima gives the result:
     -(sqrt(%pi)*((erf(sqrt(a)/sqrt(s))-1)*s+2*a*erf(sqrt(a)/sqrt(s))-2*a)
         *%e^(a/s)
             +2*sqrt(a)*sqrt(s))/(2*s^(5/2))
   We have again the erf function in the result.
   The result is now correct.
*/

radcan(specint(%e^(-s*t)*sqrt(t)*cosh(2*sqrt(a*t)),t));
sqrt(%pi)*(s+2*a)*%e^(a/s)/(2*s^(5/2));

/* Problem 212: No. 14 OK New
   Maxima gives the result:
     -sqrt(%pi)*(erf(sqrt(a)/sqrt(s))-1)*%e^(a/s)/sqrt(s)
   Again the erf function.
   Now correct.
*/

radcan(specint(%e^(-s*t)/sqrt(t)*cosh(2*sqrt(a*t)),t));
sqrt(%pi)*%e^(a/s)/sqrt(s);

/* Problem 213: No. 15 (OK but additional factor ? New)
   Maxima gives the result:
     (sqrt(s+4*a)*(2*sqrt(%pi)*sqrt(s-4*a)+sqrt(%pi)*sqrt(s)) 
        + sqrt(%pi)*sqrt(s)*sqrt(s-4*a)) 
           /(4*sqrt(s)*sqrt(s-4*a)*sqrt(s+4*a))$
   The result doesn't contain the required exponential function.
   Now correct. But there is an extra factor 4 in the exponent.
   I think EqWorld is wrong.
*/

radcan(specint(%e^(-s*t)*cosh(2*sqrt(a*t))^2/sqrt(t),t));
1/2*%pi^(1/2)*s^(-1/2)*(%e^(4*a/s)+1);

/*******************************************************************************

   Expressions with Logarithmic Functions

*******************************************************************************/

/* Problem 214: No. 01 OK New*/

radcan(specint(%e^(-s*t)*log(t),t));
-(1/s)*(log(s)+%gamma);

/* Problem 215: No. 02 (Ok noun form) 
   Tabulated result: -(1/s)*%e^(s/a)*ei(-s/a);
*/

radcan(specint(%e^(-s*t)*log(1+a*t),t));
'specint(%e^-(s*t)*log(a*t+1),t);

/* Problem 216: No. 03 (OK noun form New)
   Tabulated result: 1/s*(log(a)-%e^(a*s)*ei(-a*s));
*/

radcan(specint(%e^(-s*t)*log(t+a),t));
specint(%e^(-s*t)*log(t+a),t);

/* Problem 217: No. 04 OK New
   Tabulated result is equivalent to Maxima result.
      n!/s^(n+1)*(sum(1/k,1,n)-log(s)-%gamma);
*/

radcan(specint(%e^(-s*t)*t^n*log(t),t));
-s^(-n-1)*(gamma(n+1)*log(s)-psi[0](n+1)*gamma(n+1));

/* Problem 218: No. 05 OK New*/

radcan(specint(%e^(-s*t)*log(t)/sqrt(t),t));
-(sqrt(%pi)*(log(s)+2*log(2)+%gamma)/sqrt(s));

/* Problem 219: No. 06 OK New*/

radcan(specint(%e^(-s*t)*t^(n-1/2)*log(t),t));
-((gamma((2*n+1)/2)*log(s)-psi[0]((2*n+1)/2)*gamma((2*n+1)/2))/s^((2*n+1)/2));

/* Problem 220: No. 07 OK New*/

radcan(specint(%e^(-s*t)*t^(nu-1)*log(t),t));
-((gamma(nu)*log(s)-psi[0](nu)*gamma(nu))/s^nu);

/* Problem 221: No. 08 (OK noun form New)
   1/s*((log(x)+%gamma)^2+1/6*%pi^2);
*/

radcan(specint(%e^(-s*t)*log(t)^2,t));
specint(%e^(-s*t)*log(t)^2,t);

/* Problem 222: No. 09 OK New*/

radcan(specint(%e^(-s*t)*%e^(-a*t)*log(t),t));
-((log(s+a)+%gamma)/(s+a));

/*******************************************************************************

   Expressions with Error Functions

*******************************************************************************/

/* Problem 223: No. 01 (OK noun form New)
   Tabulated result:
      1/s*%e^((1/(2*a))^2*s^2)*erfc((1/(2*a))*s);
   No result. Is the noun form correct. Why do we get the function abs in the
   answer.
*/

radcan(specint(%e^(-s*t)*erf(a*t),t));
specint(%e^(-s*t)*erf(a*t),t);

/* Problem 224: No. 02 OK */

radcan(specint(%e^(-s*t)*erf(sqrt(a*t)),t));
sqrt(a)/(s*sqrt(s+a));

/* Problem 225: No. 03 OK */

radcan(specint(%e^(-s*t)*%e^(a*t)*erf(sqrt(a*t)),t));
sqrt(a)/(sqrt(s)*(s-a));

/* Problem 226: No. 04 NEW Noun form
   Maxima gives:
      (sqrt(a)*sqrt(s)*sqrt(4-a*s)+4*asin(sqrt(a)*sqrt(s)/2))/(4*s)
   But there is no asin function in the expected answer.
   I can't verify the answer of Maxima. 
   We declare this to an Error until verification of the problem.
   
   This is a bug. The argument of the hypergeometric function for this example
   is 1/t. For an argument with a negavtive power the algorithm for the
   Laplace transform is not correct.
*/

specint(%e^(-s*t)*erf(sqrt(a)/sqrt(t)/2),t);
/*1/s*(1-%e^(-sqrt(a*s)));*/
'specint(%e^(-s*t)*erf(sqrt(a)/sqrt(t)/2),t);

/* Problem 227: No. 05 OK */

radcan(specint(%e^(-s*t)*erfc(sqrt(a*t)),t));
(sqrt(s+a)-sqrt(a))/(s*sqrt(s+a));

/* Problem 228: No. 06 OK */

radcan(specint(%e^(-s*t)*%e^(a*t)*erfc(sqrt(a*t)),t));
1/(s+sqrt(s*a));

/* Problem 229: No. 07 (OK noun form New)
   The same as Problem 226.
   For this case erfc is transformed to an expression with Whittaker M 
   functions. The Laplace transform fails and we get "2 'other-ca-later".
   Extension of the code to return a noun form.
   EqWorld: 1/s*%e^(-sqrt(a*s));
*/

radcan(specint(%e^(-s*t)*%e^(a*t)*erfc(sqrt(a/t)/2),t));
'specint(erfc(sqrt(a)/(2*sqrt(t)))*%e^((a-s)*t),t);

/*******************************************************************************

   Expressions with Bessel and Modified Bessel Functions

*******************************************************************************/

/* Problem 230: No. 01 OK */

radcan(specint(%e^(-s*t)*bessel_j(0,a*t),t));
1/sqrt(s^2+a^2);

/* Problem 231: No. 02 OK */

radcan(specint(%e^(-s*t)*bessel_j(nu,a*t),t));
a^nu/(sqrt(s^2+a^2)*(sqrt(s^2+a^2)+s)^nu);

/* Problem 232: No. 03 (OK)
   Thats the same result as Problem 233, because Maxima don't distinguish
   real and integer order of the Bessel function.
   But we have a problem with a factor 1/2, see Problem 86.
   I think EqWorld is wrong.
*/

radcan(specint(%e^(-s*t)*t^n*bessel_j(n,a*t),t));
a^n*gamma(2*n+1)/(2^n*gamma(n+1)*(s^2+a^2)^((2*n+1)/2));

/* Problem 233: No. 04 (OK)
   We can show that the Maxima result is equivalent to
       (1/2) * 2^nu/sqrt(%pi)*gamma(nu+1/2)*a^nu*(s^2+a^2)^(-nu-1/2)
   That differs by a factor of 1/2 from the tabulated result of EqWorld:
       2^nu*%pi^((-1)/2)*gamma(1/2+nu)*a^nu*(a^2+s^2)^(-1/2-nu);
   I think Eqworld is wrong. See also Problem: 241
*/

radcan(specint(%e^(-s*t)*t^nu*bessel_j(nu,a*t),t));
a^nu*gamma(2*nu+1)/(2^nu*gamma(nu+1)*(s^2+a^2)^((2*nu+1)/2));

/* Problem 234: No. 05 OK
   For this case we can verify the Maxima result. It is equivalent to
   the tabulated solution:
      2^nu*%pi^(-1/2)*gamma(nu+1/2)*a^nu*(s^2+a^2)^(-nu-1/2)
*/

radcan(specint(%e^(-s*t)*t^(nu+1)*bessel_j(nu,a*t),t));
a^nu*gamma(2*nu+2)*s/((s^2+a^2)^((2*nu+1)/2)*(2^nu*gamma(nu+1)*s^2+a^2*2^nu*gamma(nu+1)));

/* Problem 235: No. 06 OK */

radcan(specint(%e^(-s*t)*bessel_j(0,2*sqrt(a*t)),t));
1/s*%e^(-a/s);

/* Problem 236: No. 07 OK */

radcan(specint(%e^(-s*t)*sqrt(t)*bessel_j(1,2*sqrt(a*t)),t));
sqrt(a)/s^2*%e^(-a/s);

/* Problem 237: No. 08 OK */

radcan(specint(%e^(-s*t)*t^(nu/2)*bessel_j(nu,2*sqrt(a*t)),t));
a^(nu/2)*s^(-nu-1)*%e^(-a/s);

/* Problem 238: No. 09 (OK noun form New)
   Maxima gives the result:
      1/sqrt(s^2+a^2*b+a^2)
   But the answer of EqWorld contains an exponential function.
   What's wrong?
   We have a bug in the routine dionarghyp and following. After transformation 
   to a hypergeometric function we have an argument of the form (t^2+b*t).
   Maxima doesn't recognize the two terms of the argument correctly.
   After specialization of the pattern and correcting the return
   value of the routine execargmatch and execf19 we get a correct noun.
   1/sqrt(s^2+a^2)*%e^(b*s-b*sqrt(s^2+a^2));
*/

radcan(specint(%e^(-s*t)*bessel_j(0,a*sqrt(t^2+b*t)),t));
'specint(bessel_j(0,a*sqrt(t)*sqrt(t+b))*%e^(-s*t),t);

/* Problem 239: No. 10 OK */

radcan(specint(%e^(-s*t)*bessel_i(0,a*t),t));
1/(sqrt(s-a)*sqrt(s+a));

/* Problem 240: No. 11 OK New*/

radcan(specint(%e^(-s*t)*bessel_i(nu,a*t),t));
a^nu/((sqrt(s-a)*sqrt(s+a))*(sqrt(s-a)*sqrt(s+a)+s)^nu);

/* Problem 241: No. 12 OK New
   But the result differs by a factor 1/2. See problem: 233.
   What's wrong.
   Tabulated result: 2^nu*%pi^(-1/2)*gamma(nu+1/2)*a^nu*(s^2-a^2)^(-nu-1/2);
   The tabuluated result of EqWorld is wrong. The first factor should be
   2^(nu-1). We have verified the result with the help of A&S 29.3.60.
   I think EqWorld is wrong.
*/

radcan(specint(%e^(-s*t)*t^nu*bessel_i(nu,a*t),t));
a^nu*gamma(2*nu+1)/(2^nu*gamma(nu+1)*(s-a)^((2*nu+1)/2)*(s+a)^((2*nu+1)/2));

/* Problem 242: No. 13 OK New
   The result is equivalent to the tabulated solution:
      2^(nu+1)*%pi^(1/2)*gamma(nu+3/2)*a^nu*s*(s^2-a^2)^(-nu-3/2);
*/

radcan(specint(%e^(-s*t)*t^(nu+1)*bessel_i(nu,a*t),t));
a^nu*gamma(2*nu+2)*s/((s-a)^((2*nu+1)/2)*(s+a)^((2*nu+1)/2)*(2^nu*gamma(nu+1)*s^2-a^2*2^nu*gamma(nu+1)));

/* Problem 243: No. 14 OK */

radcan(specint(%e^(-s*t)*bessel_i(0,2*sqrt(a*t)),t));
1/s*%e^(a/s);

/* Problem 244: No. 15 OK */

block([besselexpand:true],expand(exponentialize(radcan(specint(%e^(-s*t)*bessel_i(1,2*sqrt(a*t))/sqrt(t),t)))));
%e^(a/s)/sqrt(a)-1/sqrt(a);

/* Problem 245: No. 16 OK New*/

radcan(specint(%e^(-s*t)*t^(nu/2)*bessel_i(nu,2*sqrt(a*t)),t));
a^(nu/2)*s^(-nu-1)*%e^(a/s);

/* Problem 246: No. 17 OK
   The tabulated result -2/%pi*asinh(s/a)/sqrt(s^2+a^2) is equivalent to
   the result of Maxima.
*/

specint(%e^(-s*t)*bessel_y(0,a*t),t);
 -log((sqrt(s^2+a^2)+s)/(sqrt(s^2+a^2)-s))/(%pi*sqrt(s^2+a^2));

/* Problem 247: No. 18 OK New (10/2009)
 * A special algorithm for bessel_k(0,a*t) has been added.
 */

specint(%e^(-s*t)*bessel_k(0,a*t),t);
acosh(s/a)/sqrt(s^2-a^2);

/*******************************************************************************
 *
 * Bug ID: 2858045 - Laplace transform of asin or atan gives wrong noun form
 * Check the correct noun for the asin and atan function.
 */

specint(%e^(-s*t)*asin(t),t);
'specint(%e^(-s*t)*asin(t),t);

specint(%e^(-s*t)*atan(t),t);
'specint(%e^(-s*t)*atan(t),t);

/* The results for an argument 1/sqrt(t) have to be checked.
 *
 * The following results are wrong. The algorithm to integrate the 
 * hypergeometric function only works for an argument t^n where n is positive
 * integer. We have asin(z) = z * F(1/2,1/2; 3/2; z^2), therefore the argument
 * of the hypergeometric function is 1/t.
 */

specint(%e^(-s*t)*asin(1/sqrt(t)),t);
/*sqrt(%pi)*%f[3,1]([1/2,1/2,-1/2],[3/2],-s)/sqrt(s);*/
'specint(%e^(-s*t)*asin(1/sqrt(t)),t);

specint(%e^(-s*t)*atan(1/sqrt(t)),t);
/*sqrt(%pi)*%f[3,1]([1/2,1,-1/2],[3/2],s)/sqrt(s);*/
'specint(%e^(-s*t)*atan(1/sqrt(t)),t);
/*******************************************************************************
 *
 * Bug ID: 2864588 - specint(exp(-s*t)*bessel_i(1/2,t)^2,t) not correct
 *
 * The Laplace transform of the square of the bessel_i(1/2,t) function is equal 
 * to the Laplace transform of the expanded form 2*sinh(t)^2/(%pi*t).
 */

specint(exp(-s*t)*bessel_i(1/2,t)^2,t),besselexpand:false;
 -log(1-4/s^2)/(2*%pi);

specint(exp(-s*t)*bessel_i(1/2,t)^2,t),besselexpand:true;
 -log(1-4/s^2)/(2*%pi);

/*******************************************************************************
 *
 * Bug ID: 2866802 - specint(exp(-s*t)*t^(5/2)*bessel_j(-1/2,sqrt(t))^2,t) wrong
 *
 * We add two tests to show that the square of bessel_j(v,t) works for
 * v=-1/2 (the originally bug) and v=1/2 as expected.
 */
 
res:factor(ratsimp(specint(exp(-s*t)*t*bessel_j(-1/2,t)^2,t))),
    besselexpand:false;
2*(s^2+2)/(%pi*s*(s^2+4));

expand(res-ratsimp(specint(exp(-s*t)*t*bessel_j(-1/2,t)^2,t))),
   besselexpand:true;
0;

res:factor(ratsimp(specint(exp(-s*t)*t*bessel_j(1/2,t)^2,t))),
    besselexpand:false;
4/(%pi*s*(s^2+4));

expand(res-ratsimp(specint(exp(-s*t)*t*bessel_j(1/2,t)^2,t))),
   besselexpand:true;
0;

/*******************************************************************************
 *
 * BUG ID: 2867499 -specint(exp(-s*t)*CONST*t^2*bessel_y(1,t),t) wrong
 *
 * Show that a constant term is not lost in the Laplace transform
 */
 
factor(ratsimp(specint(exp(-s*t)*CONST*t^2*bessel_y(1,t),t)));
(3*s*log((sqrt(s^2+1)+s)/(sqrt(s^2+1)-s))
        +2*s^2*sqrt(s^2+1)-4*sqrt(s^2+1))
        *CONST
        /(%pi*(s^2+1)^(5/2));

/*******************************************************************************
 *
 * Bug ID: 2867434 - specint(exp(-s*t)*t^2*%h[1,1](t),t) does not work
 *
 * Show that the Laplace transform of Hankel functions work for an integer order
 */

res1:factor(ratsimp(specint(exp(-s*t)*t^2*hankel_1(1,t),t)));
(3*%i*s*sqrt(s^2+1)*log((sqrt(s^2+1)+s)/(sqrt(s^2+1)-s))
        +3*%pi*s*sqrt(s^2+1)+2*%i*s^4-2*%i*s^2-4*%i)
        /(%pi*(s^2+1)^3);
        
res2:factor(ratsimp(specint(exp(-s*t)*t^2*hankel_2(1,t),t)));
(3*%i*s*sqrt(s^2+1)*log((sqrt(s^2+1)+s)/(sqrt(s^2+1)-s))
 -3*%pi*s*sqrt(s^2+1)+2*%i*s^4-2*%i*s^2-4*%i)
 /(-%pi*(s^2+1)^3)$


/* Proof that the results are equivalent to the Laplace transforms of
   bessel_j and bessel_y.
   */

ratsimp(specint(exp(-s*t)*t^2*bessel_j(1,t),t) - 1/2*(res1+res2));
0;
ratsimp(specint(exp(-s*t)*t^2*bessel_y(1,t),t) - 1/(2*%i)*(res1-res2));
0;

/*******************************************************************************
 *
 * We know the following Laplace transform of the Parabolic Cylinder D function:
 * (functions.wolfram.com)
 *
 *   t^(a-1)*D[v](sqrt(t))
 *      ->   2^(-a+v/2+1)*sqrt(%pi)*gamma(2*a)/gamma(a+(1-v)/2)
 *              *2F1([a,a+1/2],[a+(1-v)/2],1/2-2*t)
 *
 * Check this formula for some values.
 */
(assume(4*?psey-1>0, 4*s-1>0),done);
done;

(lt(a,v,z):=2^(-a+v/2+1)*sqrt(%pi)*gamma(2*a)/gamma(a+(1-v)/2)
               *hgfred([a,a+1/2],[a+(1-v)/2],1/2-2*z),done);
done;

res:factor(ratsimp(specint(exp(-s*t)*parabolic_cylinder_d(0,sqrt(t)),t)));
4/(4*s+1);

res-factor(ratsimp(lt(1,0,s)));
0;

res:factor(ratsimp(specint(exp(-s*t)*parabolic_cylinder_d(1,sqrt(t)),t)));
4*sqrt(%pi)/(4*s+1)^(3/2);

res-factor(ratsimp(lt(1,1,s)));
0;

res:factor(ratsimp(specint(exp(-s*t)*parabolic_cylinder_d(2,sqrt(t)),t)));
-4*(4*s-3)/(4*s+1)^2;

res-factor(ratsimp(lt(1,2,s)));
0;

res:factor(ratsimp(specint(exp(-s*t)*t*parabolic_cylinder_d(2,sqrt(t)),t)));
-16*(4*s-7)/(4*s+1)^3;

res-factor(ratsimp(lt(2,2,s)));
0;

res:factor(ratsimp(specint(exp(-s*t)*t^2*parabolic_cylinder_d(2,sqrt(t)),t)));
-128*(4*s-11)/(4*s+1)^4;

ratsimp(res-factor(ratsimp(lt(3,2,s))));
0;

res:factor(ratsimp(specint(exp(-s*t)*parabolic_cylinder_d(1/2,sqrt(t)),t)));
2^(3/2)*sqrt(%pi)*assoc_legendre_p(3/4,-1/4,sqrt(2)/sqrt(4*s+1))
        /((4*s-1)^(1/8)*(4*s+1)^(7/8));

ratsimp(res-factor(ratsimp(lt(1,1/2,s))));
0;

/*******************************************************************************
 *
 * BUG ID: 2867727 - specint: wrong result for Parabolic Cylinder D function
 *
 * The Laplace transform for the Parabolic Cylinder D function should only
 * work for an argument a*sqrt(t). Check this.
 *
 * But the Parabolic Cylinder D function has simple expansions for an
 * integer order and argument a*t:
 *    parabolic_cylinder_d(0,z):=exp(-z^2/4),
 *    parabolic_cylinder_d(1,z):=z*exp(-z^2/4)
 * We show the results for later improvement of the code.
 */

factor(ratsimp(specint(exp(-s*t)*exp(-t^2/4),t)));
-sqrt(%pi)*%e^s^2*(erf(s)-1);

factor(ratsimp(specint(exp(-s*t)*parabolic_cylinder_d(0,t),t)));
'specint(exp(-s*t)*parabolic_cylinder_d(0,t),t);

factor(ratsimp(specint(exp(-s*t)*t*exp(-t^2/4),t)));
2*(sqrt(%pi)*s*%e^s^2*erf(s)-sqrt(%pi)*s*%e^s^2+1);

factor(ratsimp(specint(exp(-s*t)*parabolic_cylinder_d(1,t),t)));
'specint(exp(-s*t)*parabolic_cylinder_d(1,t),t);

/*******************************************************************************
 *
 * Test Laplace transform of whittaker_m
 *
 *  Check it against two simple special cases of whittaker_m:
 * 
 *    whittaker_m(-1/2-u,u,z) = exp(z/2) * z^(u+1/2)
 *    whittaker_m(1/2 +u,u,z) = exp(-z/2)* z^(u+1/2)
 */

(assume(s>0,2*u+3>0,2*s-1>0),done);
done;

res1:factor(ratsimp(specint(exp(-s*t)*whittaker_m(-1/2-u,u,t),t)));
(2*s-1)^(-u-3/2)*2^(u+3/2)*gamma((2*u+3)/2);
 
res2:factor(ratsimp(specint(exp(-s*t)*exp(t/2)*t^(u+1/2),t)));
(2*s-1)^(-u-3/2)*2^(u+3/2)*gamma((2*u+3)/2);

ratsimp(res1-res2);
0;

res1:factor(ratsimp(specint(exp(-s*t)*whittaker_m(1/2+u,u,t),t)));
(2*s+1)^(-u-3/2)*2^(u+3/2)*gamma((2*u+3)/2);
 
res2:factor(ratsimp(specint(exp(-s*t)*exp(-t/2)*t^(u+1/2),t)));
(2*s+1)^(-u-3/2)*2^(u+3/2)*gamma((2*u+3)/2);

ratsimp(res1-res2);
0;

/* The general solution for an argument t, with 2*a+2*u+1>0 */

(assume(2*a+2*u+1>0),done);
done;

factor(ratsimp(specint(exp(-s*t)*t^(a-1)*whittaker_m(v,u,t),t)));
(2*s+1)^(-u-a-1/2)*2^(u+a+1/2)*gamma((2*u+2*a+1)/2)
                         *%f[2,1]([(2*v-2*u-1)/-2,(2*u+2*a+1)/2],[2*u+1],
                                  2/(2*s+1));

/* The general solution for an argument -t, with 2*a+2*u+1>0 */

factor(ratsimp(specint(exp(-s*t)*t^(a-1)*whittaker_m(v,u,-t),t)));
%i*(2*s-1)^(-u-a-1/2)*(-1)^u*2^(u+a+1/2)*gamma((2*u+2*a+1)/2)
         *%f[2,1]([(2*v-2*u-1)/-2,(2*u+2*a+1)/2],[2*u+1],-2/(2*s-1));

/******************************************************************************/

/* regression test for #3734 $hypergeometric_u vs %hypergeometric_u confusion */
specint(%e^(-t)/k*sqrt(t*(t+2*k)),t) - 2*sqrt(%pi)*hypergeometric_u(3/2,3,2*k)*k;
0$

/* specint(exp(-s*t)*t^z,t) did not properly support complex z expressions
 *
 * See mailing list thread "Laplace transform for complex exponent polynomial functions."
 * from 2021-04-21.
 */

specint (exp (-s*t) * t^(v*%i), t);
s^((-%i*v)-1)*gamma(%i*v+1);

(kill (u, z),
 declare (z, complex),
 assume (realpart (z) > -1),
 assume (u > -1),
 0);
0;

specint (exp (-s*t) * t^(u + v*%i), t);
s^((-%i*v)-u-1)*gamma(%i*v+u+1);

specint (exp (-s*t) * t^z, t);
s^((-z)-1)*gamma(z+1);

(remove (z, complex),
 forget (realpart (z) > -1),
 forget (u > -1),
 0);
0;

kill(all);
done;
 
