This is maxima.info, produced by makeinfo version 4.13 from
/home/vttoth/dev/maxima/doc/info/es//include-maxima.texi.

Este es el Manual de Maxima en versión Texinfo

Copyright 1994, 2001 William F. Schelter

START-INFO-DIR-ENTRY
* Maxima: (maxima).  Un sistema de cálculo simbólico
END-INFO-DIR-ENTRY


File: maxima.info,  Node: Funciones para la resolución numérica de ecuaciones diferenciales,  Prev: Introducción a la resolución numérica de ecuaciones diferenciales,  Up: Métodos numéricos

22.5 Funciones para la resolución numérica de ecuaciones diferenciales
======================================================================

 -- Función: plotdf (<dydx>, ...options...)
 -- Función: plotdf (<dvdu>, `['<u>,<v>`]', ...options...)
 -- Función: plotdf (`['<dxdt>,<dydt>`]', ...options...)
 -- Función: plotdf (`['<dudt>,<dvdt>`]', `['<u>,<v>`]', ...options...)
     Dibuja un campo de direcciones en dos dimensiones <x> y <y>.

     <dydx>, <dxdt> y <dydt> son expresiones que dependen de <x> y <y>.
     Además de esas dos variables, las dos expresiones pueden depender
     de un conjunto de parámetros, con valores numéricos que son dados
     por medio de la opción `parameters' (la sintaxis de esa opción se
     explica mas al frente), o con un rango de posibles valores
     definidos con la opción <sliders>.

     Varias otras opciones se pueden incluir dentro del comando, o
     seleccionadas en el menú.  Haciendo click en un punto del gráfico
     se puede hacer que sea dibujada la curva integral que pasa por ese
     punto; lo mismo puede ser hecho dando las coordenadas del punto
     con la opción `trajectory_at' dentro del comando plotdf. La
     dirección de integración se puede controlar con la opción
     `direction', que acepta valores de _forward_, _backward_ ou
     _both_. El número de pasos realizado en la integración numérica se
     controla con la opción `nsteps' y el incremento del tiempo en cada
     paso con la opción `tstep'. Se usa el método de Adams Moulton para
     hacer la integración numérica; también es posible cambiar para el
     método de Runge-Kutta de cuarto orden con ajuste de pasos.

     Menú de la ventana del gráfico:

     El menú de la ventana gráfica dispone de las siguientes opciones:
     _Zoom_, que permite cambiar el comportamiento del ratón, de manera
     que hará posible el hacer zoom en la región del gráfico haciendo
     clic con el botón izquierdo. Cada clic agranda la imagen
     manteniendo como centro de la misma el punto sobre el cual se ha
     hecho clic. Manteniendo pulsada la tecla <Shift> mientras se hace
     clic, retrocede al tamaño anterior. Para reanudar el cálculo de las
     trayectorias cuando se hace clic, seleccine la opción _Integrate_
     del menú.

     La opción _Config_ del menú se puede utilizar para cambiar la(s)
     EDO(S) y algunos otros ajustes. Después de hacer los cambios, se
     debe utilizar la opción _Replot_ para activar los nuevos ajustes.
     Si en el campo _Trajectory at_ del menú de diálogo de _Config_ se
     introducen un par de coordenadas y luego se pulsa la tecla
     <retorno>, se mostrará una nueva curva integral, además de las ya
     dibujadas.  Si se selecciona la opción _Replot_, sólo se mostrará
     la última curva integral seleccionada.

     Manteniendo pulsado el botón derecho del ratón mientras se mueve el
     cursor, se puede arrastrar el gráfico horizontal y verticalmente.
     Otros parámetros, como pueden ser el número de pasos, el valor
     inicial de <t>, las coordenadas del centro y el radio, pueden
     cambiarse en el submenú de la opción _Config_.

     Con la opción _Save_, se puede obtener una copia del gráfico en
     una impresora Postscript o guardarlo en un fichero Postscript. Para
     optar entre la impresión o guardar en fichero, se debe seleccionar
     _Print Options_ en la ventana de diálogo de _Config_. Una vez
     cubiertos los campos de la ventana de diálogo de _Save_, será
     necesario seleccionar la opción _Save_ del primer menú para crear
     el fichero o imprimir el gráfico.

     Opciones gráficas:

     La función `plotdf' admite varias opciones, cada una de las cuales
     es una lista de dos o más elementos. El primer elemento es el
     nombre de la opción, y el resto está formado por el valor o
     valores asignados a dicha opción.

     La función `plotdf' reconoce las siguientes opciones:

        * "tstep" establece la amplitud de los incrementos en la
          variable independiente <t>, utilizados para calcular la curva
          integral. Si se aporta sólo una expresión <dydx>, la variable
          <x> será directamente proporcional a <t>.  El valor por
          defecto es 0.1.

        * "nsteps" establece el número de pasos de longitud `tstep' que
          se utilizarán en la variable independiente para calcular la
          curva integral.  El valor por defecto es 100.

        * "direction" establece la dirección de la variable
          independiente que será seguida para calcular una curva
          integral.  Valores posibles son: `forward', para hacer que la
          variable independiente aumente `nsteps' veces, con
          incrementos `tstep'; `backward', para hacer que la variable
          independiente disminuya; `both', para extender la curva
          integral `nsteps' pasos hacia adelante y `nsteps' pasos hacia
          atrás.  Las palabras `right' y `left' se pueden utilizar como
          sinónimos de `forward' y `backward'.  El valor por defecto es
          `both'.

        * "tinitial" establece el valor inicial de la variable <t>
          utilizado para calcular curvas integrales. Puesto que las
          ecuaciones diferenciales son autónomas, esta opción sólo
          aparecerá en los gráficos de las curvas como funciones de <t>.
          El valor por defecto es 0.

        * "versus_t" se utiliza para crear una segunda ventana gráfica,
          con el gráfico de una curva integral, como dos funciones <x>,
          <y>, de variable independiente <t>. Si se le da a `versus_t'
          cualquier valor diferente de 0, se mostrará la segunda
          ventana gráfica, la cual incluye otro menú, similar al de la
          ventana principal.  El valor por defecto es 0.

        * "trajectory_at" establece las coordenadas <xinitial> y
          <yinitial> para el extremo inicial de la curva integral.  No
          tiene asignado valor por defecto.

        * "parameters" establece una lista de parámetros, junto con sus
          valores numéricos, que son utilizados en la definición de la
          ecuación diferencial. Los nombres de los parámetros y sus
          valores deben escribirse en formato de cadena de caracteres
          como una secuencia de pares `nombre=valor' separados por
          comas.

        * "sliders" establece una lista de parámetros que se cambiarán
          interactivamente utilizando barras de deslizamiento, así como
          los rangos de variación de dichos parámetros.  Los nombres de
          los parámetros y sus rangos deben escribirse en formato de
          cadena de caracteres como una secuencia de pares
          `nombre=min:max' separados por comas.

        * "xfun" establece una cadena de caracteres con funciones de
          <x> separadas por puntos y comas para ser representadas por
          encima del campo de direcciones. Estas funciones serán
          interpretadas por Tcl, no por Maxima.

        * "xradius" es la mitad de la longitud del rango de valores a
          representar en la dirección x.  El valor por defecto es 10.

        * "yradius" es la mitad de la longitud del rango de valores a
          representar en la dirección y.  El valor por defecto es 10.

        * "xcenter" es la coordenada x del punto situado en el centro
          del gráfico.  El valor por defecto es 0.

        * "ycenter" es la coordenada y del punto situado en el centro
          del gráfico.  El valor por defecto es 0.

        * "width" establece el ancho de la ventana gráfica en píxeles.
          El valor por defecto es 500.

        * "height" establece la altura de la ventana gráfica en píxeles.
          El valor por defecto es 500.


     Ejemplos:

     NOTA: Dependiendo de la interface que se use para Maxima, las
     funciones que usan `openmath', incluida `plotdf', pueden
     desencadenar un fallo si terminan en punto y coma, en vez del
     símbolo de dólar. Para evitar problemas, se usará el símbolo de
     dólar en todos ejemplos.

        * Para mostrar el campo de direcciones de la ecuación
          diferencial y' = exp(-x) + y y la solución que pasa por (2,
          -0.1):
               (%i1) load("plotdf")$

               (%i2) plotdf(exp(-x)+y,[trajectory_at,2,-0.1]);

        * Para mostrar el campo de direcciones de la ecuación diff(y,x)
          = x - y^2 y la solución de condición inicial y(-1) = 3, se
          puede utilizar la sentencia:
               (%i3) plotdf(x-y^2,[xfun,"sqrt(x);-sqrt(x)"],
                         [trajectory_at,-1,3], [direction,forward],
                         [yradius,5],[xcenter,6]);
          El gráfico también muestra la función y = sqrt(x).

        * El siguiente ejemplo muestra el campo de direcciones de un
          oscilador armónico, definido por las ecuaciones dx/dt = y y
          dy/dt = -k*x/m, y la curva integral que pasa por (x,y) =
          (6,0), con una barra de deslizamiento que permitirá cambiar
          el valor de m interactivamente (k permanece fijo a 2):
               (%i4) plotdf([y,-k*x/m],[parameters,"m=2,k=2"],
                           [sliders,"m=1:5"], [trajectory_at,6,0]);

        * Para representar el campo de direcciones de la ecuación de
          Duffing, m*x"+c*x'+k*x+b*x^3 = 0, se introduce la variable
          y=x' y se hace:
               (%i5) plotdf([y,-(k*x + c*y + b*x^3)/m],
                             [parameters,"k=-1,m=1.0,c=0,b=1"],
                             [sliders,"k=-2:2,m=-1:1"],[tstep,0.1]);

        * El campo de direcciones de un péndulo amortiguado, incluyendo
          la solución para condiciones iniciales dadas, con una barra
          de deslizamiento que se puede utilizar para cambiar el valor
          de la masa, m, y con el gráfico de las dos variables de
          estado como funciones del tiempo:

               (%i6) plotdf([y,-g*sin(x)/l - b*y/m/l],
                        [parameters,"g=9.8,l=0.5,m=0.3,b=0.05"],
                        [trajectory_at,1.05,-9],[tstep,0.01],
                        [xradius,6],[yradius,14],
                        [xcenter,-4],[direction,forward],[nsteps,300],
                        [sliders,"m=0.1:1"], [versus_t,1]);



 -- Función: ploteq (<exp>, ...options...)
     Dibuja curvas equipotenciales para <exp>, que debe ser una
     expresión dependiente de dos variables. Las curvas se obtienen
     integrando la ecuación diferencial que define las trayectorias
     ortogonales a las soluciones del sistema autónomo que se obtiene
     del gradiente de la expresión dada.  El dibujo también puede
     mostrar las curvas integrales de ese sistema de gradientes (opción
     `fieldlines').

     Este programa también necesita Xmaxima, incluso si se ejecuta
     Maxima desde una consola, pues el dibujo se creará por el código
     Tk de Xmaxima.  Por defecto, la región dibujada estará vacía hasta
     que el usuario haga clic en un punto, dé sus coordenadas a través
     del menú o mediante la opción `trajectory_at'.

     La mayor parte de opciones aceptadas por `plotdf' se pueden
     utilizar también con `ploteq' y el aspecto del interfaz es el
     mismo que el descrito para `plotdf'.

     Ejemplo:

          (%i1) V: 900/((x+1)^2+y^2)^(1/2)-900/((x-1)^2+y^2)^(1/2)$
          (%i2) ploteq(V,[x,-2,2],[y,-2,2],[fieldlines,"blue"])$

     Haciendo clic sobre un punto se dibujará la curva equipotencial
     que pasa por ese punto (en rojo) y la trayectoria ortogonal (en
     azul).


 -- Función: rk (<ODE>, <var>, <initial>, <dominio>)
 -- Función: rk ([<ODE1>,...,<ODEm>], [<v1>,...,<vm>],
          [<init1>,...,<initm>], <dominio>)
     La primera forma se usa para resolver numéricamente una ecuación
     diferencial ordinaria de primer orden (EDO), y la segunda forma
     resuelve numéricamente un sistema de <m> de esas ecuaciones,
     usando el método de Runge-Kutta de cuarto orden. <var> representa
     la variable dependiente.  EDO debe ser una expresión que dependa
     únicamente de las variables independiente y dependente, y define
     la derivada de la variable dependiente en función de la variable
     independiente.

     La variable independiente se representa con <dominio>, que debe ser
     una lista con cuatro elementos, como por ejemplo:
          [t, 0, 10, 0.1]
     el primer elemento de la lista identifica la variable
     independiente, el segundo y tercer elementos son los valores
     inicial y final para esa variable, y el último elemento da el
     valor de los incrementos que deberán ser usados dentro de ese
     intervalo.

     Si se van a resolver <m> ecuaciones, deberá haber <m> variables
     dependientes <v1>, <v2>, ..., <vm>. Los valores iniciales para
     esas variables serán <inic1>, <inic2>, ..., <inicm>. Continuará
     existiendo apenas una variable independiente definida por la lista
     <domain>, como en el caso anterior. <EDO1>, ..., <EDOm> son las
     expresiones que definen las derivadas de cada una de las variables
     dependientes en función de la variable independiente. Las únicas
     variables que pueden aparecer en cada una de esas expresiones son
     la variable independiente y cualquiera de las variables
     dependientes. Es importante que las derivadas <EDO1>, ..., <EDOm>
     sean colocadas en la lista en el mismo orden en que fueron
     agrupadas las variables dependientes; por ejemplo, el tercer
     elemento de la lista será interpretado como la derivada de la
     tercera variable dependiente.

     El programa intenta integrar las ecuaciones desde el valor inicial
     de la variable independiente, hasta el valor final, usando
     incrementos fijos. Si en algún paso una de las variables
     dependientes toma un valor absoluto muy grande, la integración
     será suspendida en ese punto.  El resultado será una lista con un
     número de elementos igual al número de iteraciones realizadas.
     Cada elemento en la lista de resultados es también una lista con
     <m>+1 elementos: el valor de la variable independiente, seguido de
     los valores de las variables dependientes correspondientes a ese
     punto.



File: maxima.info,  Node: Matrices y Álgebra Lineal,  Next: Afines,  Prev: Métodos numéricos,  Up: Top

23 Matrices y Álgebra Lineal
****************************

* Menu:

* Introducción a las matrices y el álgebra lineal::
* Funciones y variables para las matrices y el álgebra lineal::


File: maxima.info,  Node: Introducción a las matrices y el álgebra lineal,  Next: Funciones y variables para las matrices y el álgebra lineal,  Prev: Matrices y Álgebra Lineal,  Up: Matrices y Álgebra Lineal

23.1 Introducción a las matrices y el álgebra lineal
====================================================

* Menu:

* Operador punto::
* Vectores::
* Paquete eigen::


File: maxima.info,  Node: Operador punto,  Next: Vectores,  Prev: Introducción a las matrices y el álgebra lineal,  Up: Introducción a las matrices y el álgebra lineal

23.1.1 Operador punto
---------------------

El operador  `.' realiza la multiplicación matricial y el producto
escalar.  Cuando los operandos son dos matrices columna o matrices fila
`a' y `b', la expresión `a.b' es equivalente a `sum (a[i]*b[i], i, 1,
length(a))'.  Si `a' y `b' no son complejos, estamos en el caso del
producto escalar.  En caso de ser `a' y `b' vectores en el campo
complejo, el producto escalar se define como `conjugate(a).b'; la
función `innerproduct' del paquete `eigen' realiza el producto escalar
complejo.

Cuando los operandos son matrices de índole más general, el resultado
que se obtiene es el producto matricial de `a' por `b'.  El número de
filas de `b' debe ser igual al número de columnas de `a', y el
resultado tiene un número de filas igual al de `a' y un número de
columnas igual al de `b'.

Al objeto de distinguir `.' como operador aritmético del punto decimal
de la notación en coma flotante, puede ser necesario dejar espacios a
ambos lados.  Por ejemplo, `5.e3' es `5000.0' pero `5 . e3' es `5' por
`e3'.

Hay algunas variables globales que controlan la simplificación de
expresiones que contengan al operador `.', a saber, `dot',
`dot0nscsimp', `dot0simp', `dot1simp', `dotassoc', `dotconstrules',
`dotdistrib', `dotexptsimp', `dotident', y `dotscrules'.


File: maxima.info,  Node: Vectores,  Next: Paquete eigen,  Prev: Operador punto,  Up: Introducción a las matrices y el álgebra lineal

23.1.2 Vectores
---------------

El paquete `vect' define funciones para análisis vectorial. Para cargar
el paquete en memoria se debe hacer `load ("vect")'  y con `demo
("vect")' se presenta una demostración sobre las funciones del paquete.

El paquete de análisis vectorial puede combinar y simplificar
expresiones simbólicas que incluyan productos escalares y vectoriales,
junto con los operadores de gradiente, divergencia, rotacional y
laplaciano. La distribución de estos operadores sobre sumas o productos
se gobierna por ciertas variables, al igual que otras transformaciones,
incluida la expansión en componentes en cualquier sistema de
coordenadas especificado.  También hay funciones para obtener el
potencial escalar o vectorial de un campo.

El paquete `vect' contiene las siguientes funciones: `vectorsimp',
`scalefactors', `express', `potential' y `vectorpotential'.

Por defecto, el paquete `vect' no declara el operador `.' como
conmutativo.  Para transformarlo en conmutativo, se debe ejecutar
previamente la instrucción `declare(".", commutative)'.


File: maxima.info,  Node: Paquete eigen,  Prev: Vectores,  Up: Introducción a las matrices y el álgebra lineal

23.1.3 Paquete eigen
--------------------

El paquete `eigen' contiene funciones para el cálculo simbólico de
valores y vectores propios. Maxima carga el paquete automáticamente si
se hace una llamada a cualquiera de las dos funciones `eigenvalues' o
`eigenvectors'. El paquete se puede cargar de forma explícita mediante
`load ("eigen")'.

La instrucción `demo ("eigen")' hace una demostración de las funciones
de este paquete; `batch ("eigen")' realiza la misma demostración pero
sin pausas entre los sucesivos cálculos.

Las funciones del paquete `eigen' son `innerproduct', `unitvector',
`columnvector', `gramschmidt', `eigenvalues', `eigenvectors',
`uniteigenvectors' y `similaritytransform'.


File: maxima.info,  Node: Funciones y variables para las matrices y el álgebra lineal,  Prev: Introducción a las matrices y el álgebra lineal,  Up: Matrices y Álgebra Lineal

23.2 Funciones y variables para las matrices y el álgebra lineal
================================================================

 -- Función: addcol (<M>, <lista_1>, ..., <lista_n>)
     Añade la/s columna/s dada/s por la/s lista/s (o matrices) a la
     matriz <M>.


 -- Función: addrow (<M>, <lista_1>, ..., <lista_n>)
     Añade la/s fila/s dada/s por la/s lista/s (o matrices) a la matriz
     <M>.


 -- Función: adjoint (<M>)
     Devuelve el adjunto de la matriz <M>.  La matriz adjunta es la
     transpuesta de la matriz de cofactores de <M>.


 -- Función: augcoefmatrix ([<eqn_1>, ..., <eqn_m>], [<x_1>, ...,
          <x_n>])
     Devuelve la matriz aumentada de coeficientes del sistema de
     ecuaciones lineales <eqn_1>, ..., <eqn_m> de variables <x_1>, ...,
     <x_n>. Se trata de la matriz de coeficientes con una columna
     adicional para los términos constantes de cada ecuación, es decir,
     aquellos términos que no dependen de las variables <x_1>, ...,
     <x_n>.

          (%i1) m: [2*x - (a - 1)*y = 5*b, c + b*y + a*x = 0]$
          (%i2) augcoefmatrix (m, [x, y]);
                                 [ 2  1 - a  - 5 b ]
          (%o2)                  [                 ]
                                 [ a    b      c   ]


 -- Función: cauchy_matrix ([<x_1>,<x_2>, ..., <x_m>], [<y_1>,<y_2>,
          ..., <y_n>])
 -- Función: cauchy_matrix ([<x_1>,<x_2>, ..., <x_n>])
     Devuelve una matriz de Cauchy <n> by <m> de elementos <a[i,j]> =
     1/(<x_i>+<y_i>).  El segundo elemento de `cauchy_matrix' es
     opcional, y en caso de no estar presente, los elementos serán de
     la forma <a[i,j]> = 1/(<x_i>+<x_j>).

     Observación: en la literatura, la matriz de Cauchy se define a
     veces con sus elementos de la forma <a[i,j]> = 1/(<x_i>-<y_i>).

     Ejemplos:

          (%i1) cauchy_matrix([x1,x2],[y1,y2]);
                                [    1        1    ]
                                [ -------  ------- ]
                                [ y1 + x1  y2 + x1 ]
          (%o1)                 [                  ]
                                [    1        1    ]
                                [ -------  ------- ]
                                [ y1 + x2  y2 + x2 ]

          (%i2) cauchy_matrix([x1,x2]);
                                [   1         1    ]
                                [  ----    ------- ]
                                [  2 x1    x2 + x1 ]
          (%o2)                 [                  ]
                                [    1       1     ]
                                [ -------   ----   ]
                                [ x2 + x1   2 x2   ]

 -- Función: charpoly (<M>, <x>)
     Calcula el polinomio característico de la matriz <M> respecto de
     la variable <x>. Esto es, `determinant (<M> - diagmatrix (length
     (<M>), <x>))'.

          (%i1) a: matrix ([3, 1], [2, 4]);
                                      [ 3  1 ]
          (%o1)                       [      ]
                                      [ 2  4 ]
          (%i2) expand (charpoly (a, lambda));
                                     2
          (%o2)                lambda  - 7 lambda + 10
          (%i3) (programmode: true, solve (%));
          (%o3)               [lambda = 5, lambda = 2]
          (%i4) matrix ([x1], [x2]);
                                       [ x1 ]
          (%o4)                        [    ]
                                       [ x2 ]
          (%i5) ev (a . % - lambda*%, %th(2)[1]);
                                    [ x2 - 2 x1 ]
          (%o5)                     [           ]
                                    [ 2 x1 - x2 ]
          (%i6) %[1, 1] = 0;
          (%o6)                     x2 - 2 x1 = 0
          (%i7) x2^2 + x1^2 = 1;
                                      2     2
          (%o7)                     x2  + x1  = 1
          (%i8) solve ([%th(2), %], [x1, x2]);
                            1               2
          (%o8) [[x1 = - -------, x2 = - -------],
                         sqrt(5)         sqrt(5)

                                                       1             2
                                              [x1 = -------, x2 = -------]]
                                                    sqrt(5)       sqrt(5)


 -- Función: coefmatrix ([<eqn_1>, ..., <eqn_m>], [<x_1>, ..., <x_n>])
     Devuelve la matriz de coeficientes para las variables <x_1>, ...,
     <x_n> del sistema de ecuaciones lineales <eqn_1>, ..., <eqn_m>.

          (%i1) coefmatrix([2*x-(a-1)*y+5*b = 0, b*y+a*x = 3], [x,y]);
                                           [ 2  1 - a ]
          (%o1)                            [          ]
                                           [ a    b   ]


 -- Función: col (<M>, <i>)
     Devuelve la <i>-ésima columna de la matriz <M>.  El resultado es
     una matriz de una sola columna.


 -- Función: columnvector (<L>)
 -- Función: covect (<L>)
     Devuelve una matriz con una columna  y `length (<L>)' filas,
     conteniendo los elementos de la lista <L>.

     La llamada `covect' es un sinónimo de `columnvector'.

     Es necesario cargar la función haciendo `load ("eigen")'.

     Ejemplo:

          (%i1) load ("eigen")$
          Warning - you are redefining the Macsyma function eigenvalues
          Warning - you are redefining the Macsyma function eigenvectors
          (%i2) columnvector ([aa, bb, cc, dd]);
                                       [ aa ]
                                       [    ]
                                       [ bb ]
          (%o2)                        [    ]
                                       [ cc ]
                                       [    ]
                                       [ dd ]


 -- Función: copymatrix (<M>)
     Devuelve una copia de la matriz <M>. Esta es la única manera de
     obtener una réplica de <M> además de la de copiar elemento a
     elemento.

     Nótese que una asignación de una matriz a otra, como en `m2: m1',
     no hace una copia de `m1'. Asignaciones del tipo `m2 [i,j]: x' o
     `setelmx (x, i, j, m2' también modifica `m1 [i,j]'. Si se crea una
     copia con `copymatrix' y luego se hacen asignaciones se tendrá una
     copia separada y modificada.


 -- Función: determinant (<M>)
     Calcula el determinante de  <M> por un método similar al de
     eliminación de Gauss

     La forma del resultado depende del valor asignado a `ratmx'.

     Existe una rutina especial para calcular determinantes de matrices
     con elementos dispersas, la cual será invocada cuando las
     variables `ratmx' y `sparse' valgan ambas `true'.


 -- Variable opcional: detout
     Valor por defecto: `false'

     Cuando `detout' vale `true', el determinante de la matriz cuya
     inversa se calcula aparece como un factor fuera de la matriz.

     Para que esta variable surta efecto, `doallmxops' y `doscmxops'
     deberían tener el valor `false' (véanse sus descripciones).
     Alternativamente, esta variable puede ser suministrada a `ev'.

     Ejemplo:

          (%i1) m: matrix ([a, b], [c, d]);
                                      [ a  b ]
          (%o1)                       [      ]
                                      [ c  d ]
          (%i2) detout: true$
          (%i3) doallmxops: false$
          (%i4) doscmxops: false$
          (%i5) invert (m);
                                    [  d   - b ]
                                    [          ]
                                    [ - c   a  ]
          (%o5)                     ------------
                                     a d - b c


 -- Función: diagmatrix (<n>, <x>)
     Devuelve una matriz diagonal de orden <n> con los elementos de la
     diagonal todos ellos iguales a <x>. La llamada `diagmatrix (<n>,
     1)' devuelve una matriz identidad (igual que `ident (<n>)').

     La variable <n> debe ser un número entero, en caso contrario
     `diagmatrix' envía un mensaje de error.

     <x> puede ser cualquier tipo de expresión, incluso otra matriz.
     Si <x> es una matriz, no se copia; todos los elementos de la
     diagonal son iguales a <x>.


 -- Variable opcional: doallmxops
     Valor por defecto: `true'

     Cuando `doallmxops' vale `true', todas las operaciones
     relacionadas con matrices son llevadas a cabo. Cuando es `false',
     entonces las selecciones para `dot' controlan las operaciones a
     ejecutar.


 -- Variable opcional: domxexpt
     Valor por defecto: `true'

     Cuando `domxexpt' vale `true', un exponente matricial, como `exp
     (<M>)' donde <M> es una matriz, se interpreta como una matriz cuyo
     elemento `[i,j' es igual a `exp (m[i,j])'. En otro caso, `exp
     (<M>)' se evalúa como `exp (ev(<M>))'.

     La variable `domxexpt' afecta a todas las expresiones de la forma
     `<base>^<exponente>' donde <base> es una expresión escalar o
     constante y <exponente> es una lista o matriz.

     Ejemplo:

          (%i1) m: matrix ([1, %i], [a+b, %pi]);
                                   [   1    %i  ]
          (%o1)                    [            ]
                                   [ b + a  %pi ]
          (%i2) domxexpt: false$
          (%i3) (1 - c)^m;
                                       [   1    %i  ]
                                       [            ]
                                       [ b + a  %pi ]
          (%o3)                 (1 - c)
          (%i4) domxexpt: true$
          (%i5) (1 - c)^m;
                            [                      %i  ]
                            [    1 - c      (1 - c)    ]
          (%o5)             [                          ]
                            [        b + a         %pi ]
                            [ (1 - c)       (1 - c)    ]


 -- Variable opcional: domxmxops
     Valor por defecto: `true'

     Cuando `domxmxops' vale `true', se realizan todas las operaciones
     entre matrices o entre matrices y listas (pero no las operaciones
     entre matrices y escalares); si esta variable es `false' tales
     operaciones no se realizan.


 -- Variable opcional: domxnctimes
     Valor por defecto: `false'

     Cuando `domxnctimes' vale `true', se calculan los productos no
     conmutativos entre matrices.


 -- Variable opcional: dontfactor
     Valor por defecto: `[]'

     En `dontfactor' puede guardarse una lista de variables respecto de
     las cuales no se realizarán factorizaciones. Inicialmente, la lista
     está vacía.


 -- Variable opcional: doscmxops
     Valor por defecto: `false'

     Cuando `doscmxops' vale `true', se realizan las operaciones entre
     escalares y matrices.


 -- Variable opcional: doscmxplus
     Valor por defecto: `false'

     Cuando `doscmxplus' vale `true', las operaciones entre escalares y
     matrices dan como resultado una matriz.


 -- Variable opcional: dot0nscsimp
     Valor por defecto: `true'

     (Esta descripción no está clara en la versión inglesa original.)


 -- Variable opcional: dotassoc
     Valor por defecto: `true'

     Cuando `dotassoc' vale `true', una expresión como `(A.B).C' se
     transforma en `A.(B.C)'.


 -- Variable opcional: dotconstrules
     Valor por defecto: `true'

     Cuando `dotconstrules' vale `true', un producto no conmutativo de
     una constante con otro término se transforma en un producto
     conmutativo.


 -- Variable opcional: dotdistrib
     Valor por defecto: `false'

     Cuando `dotdistrib' vale `true', una expresión como `A.(B + C)' se
     transforma en `A.B + A.C'.


 -- Variable opcional: dotexptsimp
     Valor por defecto: `true'

     Cuando `dotexptsimp' vale `true', una expresión como `A.A' se
     transforma en `A^^2'.


 -- Variable opcional: dotident
     Valor por defecto: 1

     El valor de la variable `dotident' es el resultado devuelto por
     `X^^0'.


 -- Variable opcional: dotscrules
     Valor por defecto: `false'

     Cuando `dotscrules' vale `true', una expresión como `A.SC' o
     `SC.A' se transforma en `SC*A' y `A.(SC*B)' en `SC*(A.B)'.


 -- Función: echelon (<M>)
     Devuelve la forma escalonada de la matriz <M>, obtenida por
     eliminación gaussiana.  La forma escalonada se calcula a partir de
     <M> mediante operaciones elementales con sus filas, de tal manera
     que el primer elemento no nulo de cada fila en la matriz resultado
     es la unidad y que cada elemento de la columna por debajo del
     primer uno de cada fila sean todos ceros.

     La función `triangularize' también lleva a cabo la eliminación
     gaussiana, pero no normaliza el primer elemento no nulo de cada
     fila.

     Otras funciones, como `lu_factor' y `cholesky', también dan como
     resultados matrices triangularizadas.

          (%i1) M: matrix ([3, 7, aa, bb], [-1, 8, 5, 2], [9, 2, 11, 4]);
                                 [  3   7  aa  bb ]
                                 [                ]
          (%o1)                  [ - 1  8  5   2  ]
                                 [                ]
                                 [  9   2  11  4  ]
          (%i2) echelon (M);
                            [ 1  - 8  - 5      - 2     ]
                            [                          ]
                            [         28       11      ]
                            [ 0   1   --       --      ]
          (%o2)             [         37       37      ]
                            [                          ]
                            [              37 bb - 119 ]
                            [ 0   0    1   ----------- ]
                            [              37 aa - 313 ]


 -- Función: eigenvalues (<M>)
 -- Función: eivals (<M>)
     Devuelve una lista con dos sublistas. La primera sublista la
     forman los valores propios de la matriz <M> y la segunda sus
     multiplicidades correspondientes.

     El nombre `eivals' es un sinónimo de `eigenvalues'.

     La función `eigenvalues' llama a la función `solve' para calcular
     las raíces del polinomio característico de la matriz. En
     ocasiones, `solve' no podrá encontrar dichas raíces, en cuyo caso
     otras funciones de este paquete no trabajarán correctamente, a
     excepción de `innerproduct', `unitvector', `columnvector' y
     `gramschmidt'.

     En algunos casos los valores propios encontrados por `solve' serán
     expresiones complicadas, las cuales se podrán simplificar haciendo
     uso de otras funciones.

     El paquete `eigen.mac' se carga en memoria de forma automática
     cuando se invocan `eigenvalues' o `eigenvectors'. Si `eigen.mac' no
     está ya cargado, `load ("eigen")' lo carga. Tras la carga, todas
     las funciones y variables del paquete estarán activas.


 -- Función: eigenvectors (<M>)
 -- Función: eivects (<M>)
     Calcula los vectores propios de la matriz <M>.  El resultado
     devuelto es una lista con dos elementos; el primero está formado
     por dos listas, la primera con los valores propios de <M> y la
     segunda con sus respectivas multiplicidades, el segundo elemento
     es una lista de listas de vectores propios, una por cada valor
     propio, pudiendo haber uno o más vectores propios en cada lista.

     Tomando la matriz <M> como argumento, devuelve una lista de listas,
     la primera de las cuales es la salida de `eigenvalues' y las
     siguientes son los vectorios propios de la matriz asociados a los
     valores propios correspondientes. Los vectores propios calculados
     son los vectores propios por la derecha.

     El nombre `eivects' es un sinónimo de `eigenvectors'.

     El paquete `eigen.mac' se carga en memoria de forma automática
     cuando se invocan `eigenvalues' o `eigenvectors'. Si `eigen.mac' no
     está ya cargado, `load ("eigen")' lo carga. Tras la carga, todas
     las funciones y variables del paquete estarán activas.

     Las variables que afectan a esta función son:

     `nondiagonalizable' toma el valor `true' o `false' dependiendo de
     si la matriz no es diagonalizable o diagonalizable tras la
     ejecución de `eigenvectors'.

     `hermitianmatrix', si vale `true', entonces los vectores propios
     degenerados de la matriz hermítica son ortogonalizados mediante el
     algoritmo de Gram-Schmidt.

     `knowneigvals', si vale `true', entonces el paquete `eigen' da por
     sentado que los valores propios de la matriz son conocidos por el
     usuario y almacenados en la variable global `listeigvals'.
     `listeigvals' debería ser similar a la salida de `eigenvalues'.

     La función `algsys' se utiliza aquí para calcular los vectores
     propios. A veces, `algsys' no podrá calcular una solución. En
     algunos casos, será posible simplificar los valores propios
     calculándolos en primer lugar con `eigenvalues' y luego utilizando
     otras funciones para simplificarlos. Tras la simplificación,
     `eigenvectors' podrá ser llamada otra vez con la variable
     `knowneigvals' ajustada al valor `true'.

     Véase también `eigenvalues'.

     Ejemplos:

     Una matriz con un único vector propio por cada valor propio.

          (%i1) M1 : matrix ([11, -1], [1, 7]);
                                     [ 11  - 1 ]
          (%o1)                      [         ]
                                     [ 1    7  ]
          (%i2) [vals, vecs] : eigenvectors (M1);
          (%o2) [[[9 - sqrt(3), sqrt(3) + 9], [1, 1]],
                                  [[[1, sqrt(3) + 2]], [[1, 2 - sqrt(3)]]]]
          (%i3) for i thru length (vals[1]) do disp (val[i] = vals[1][i],
            mult[i] = vals[2][i], vec[i] = vecs[i]);
                                 val  = 9 - sqrt(3)
                                    1

                                      mult  = 1
                                          1

                              vec  = [[1, sqrt(3) + 2]]
                                 1

                                 val  = sqrt(3) + 9
                                    2

                                      mult  = 1
                                          2

                              vec  = [[1, 2 - sqrt(3)]]
                                 2

          (%o3)                         done

     Una matriz con dos vectores propios para uno de los valores
     propios.

          (%i1) M1 : matrix ([0, 1, 0, 0], [0, 0, 0, 0], [0, 0, 2, 0], [0, 0, 0, 2]);
                                   [ 0  1  0  0 ]
                                   [            ]
                                   [ 0  0  0  0 ]
          (%o1)                    [            ]
                                   [ 0  0  2  0 ]
                                   [            ]
                                   [ 0  0  0  2 ]
          (%i2) [vals, vecs] : eigenvectors (M1);
          (%o2) [[[0, 2], [2, 2]], [[[1, 0, 0, 0]],
                                             [[0, 0, 1, 0], [0, 0, 0, 1]]]]
          (%i3) for i thru length (vals[1]) do disp (val[i] = vals[1][i],
            mult[i] = vals[2][i], vec[i] = vecs[i]);
                                      val  = 0
                                         1

                                      mult  = 2
                                          1

                                vec  = [[1, 0, 0, 0]]
                                   1

                                      val  = 2
                                         2

                                      mult  = 2
                                          2

                         vec  = [[0, 0, 1, 0], [0, 0, 0, 1]]
                            2

          (%o3)                         done


 -- Función: ematrix (<m>, <n>, <x>, <i>, <j>)
     Devuelve una matriz de orden <m> por <n>, con todos sus elementos
     nulos, excepto el que ocupa la posición `[<i>, <j>]', que es igual
     a <x>.


 -- Función: entermatrix (<m>, <n>)
     Devuelve una matriz de orden <m> por <n>, cuyos elementos son
     leidos de forma interactiva.

     Si <n> es igual a <m>, Maxima pregunta por el tipo de matriz
     (diagonal, simétrica, antisimétrica o general) y luego por cada
     elemento. Cada respuesta introducida por el usuario debe terminar
     con un punto y coma `;' o con un signo de dólar `$'.

     Si <n> y <m> no son iguales, Maxima pregunta por el valor de cada
     elemento.

     Los elementos de la matriz pueden ser cualquier tipo de expresión,
     que en todo caso será evaluada.  `entermatrix' evalúa sus
     argumentos.

          (%i1) n: 3$
          (%i2) m: entermatrix (n, n)$

          Is the matrix  1. Diagonal  2. Symmetric  3. Antisymmetric
             4. General
          Answer 1, 2, 3 or 4 :
          1$
          Row 1 Column 1:
          (a+b)^n$
          Row 2 Column 2:
          (a+b)^(n+1)$
          Row 3 Column 3:
          (a+b)^(n+2)$

          Matrix entered.
          (%i3) m;
                          [        3                     ]
                          [ (b + a)      0         0     ]
                          [                              ]
          (%o3)           [                  4           ]
                          [    0      (b + a)      0     ]
                          [                              ]
                          [                            5 ]
                          [    0         0      (b + a)  ]


 -- Función: genmatrix (<a>, <i_2>, <j_2>, <i_1>, <j_1>)
 -- Función: genmatrix (<a>, <i_2>, <j_2>, <i_1>)
 -- Función: genmatrix (<a>, <i_2>, <j_2>)
     Devuelve una matriz generada a partir de <a>, siendo
     `<a>[<i_1>,<j_1>]' el elemento superior izquierdo y
     `<a>[<i_2>,<j_2>]' el inferior derecho de la matriz.  Aquí <a> se
     declara como una arreglo (creado por `array', pero no por
     `make_array'), o un array no declarado, o una función array, o una
     expresión lambda de dos argumentos.  (An array function is created
     like other functions with `:=' or `define', but arguments are
     enclosed in square brackets instead of parentheses.)

     Si se omite <j_1>, entonces se le asigna el valor <i_1>. Si tanto
     <j_1> como <i_1> se omiten, a las dos variables se le asigna el
     valor 1.

     Si un elemento `i,j' del arreglo no está definido, se le asignará
     el elemento simbólico `<a>[i,j]'.

          (%i1) h [i, j] := 1 / (i + j - 1);
                                              1
          (%o1)                  h     := ---------
                                  i, j    i + j - 1
          (%i2) genmatrix (h, 3, 3);
                                     [    1  1 ]
                                     [ 1  -  - ]
                                     [    2  3 ]
                                     [         ]
                                     [ 1  1  1 ]
          (%o2)                      [ -  -  - ]
                                     [ 2  3  4 ]
                                     [         ]
                                     [ 1  1  1 ]
                                     [ -  -  - ]
                                     [ 3  4  5 ]
          (%i3) array (a, fixnum, 2, 2);
          (%o3)                           a
          (%i4) a [1, 1] : %e;
          (%o4)                          %e
          (%i5) a [2, 2] : %pi;
          (%o5)                          %pi
          (%i6) genmatrix (a, 2, 2);
                                     [ %e   0  ]
          (%o6)                      [         ]
                                     [ 0   %pi ]
          (%i7) genmatrix (lambda ([i, j], j - i), 3, 3);
                                   [  0    1   2 ]
                                   [             ]
          (%o7)                    [ - 1   0   1 ]
                                   [             ]
                                   [ - 2  - 1  0 ]
          (%i8) genmatrix (B, 2, 2);
                                  [ B      B     ]
                                  [  1, 1   1, 2 ]
          (%o8)                   [              ]
                                  [ B      B     ]
                                  [  2, 1   2, 2 ]


 -- Función: gramschmidt (<x>)
 -- Función: gramschmidt (<x>, <F>)
     Ejecuta el algoritmo de ortogonalización de Gram-Schmidt sobre <x>,
     que puede ser una matriz o una lista de listas. La función
     `gramschmidt' no altera el valor de <x>.  El producto interno por
     defecto empleado en `gramschmidt' es `innerproduct', o <F>, si se
     ha hecho uso de esta opción.

     Si <x> es una matriz, el algoritmo se aplica a las filas de <x>. Si
     <x> es una lista de listas, el algoritmo se aplica a las sublistas,
     las cuales deben tener el mismo número de miembros. En cualquier
     caso, el valor devuelto es una lista de listas, cuyas sublistas
     son ortogonales.

     La función `factor' es invocada  en cada paso del algoritmo para
     simplificar resultados intermedios. Como consecuencia, el valor
     retornado puede contener enteros factorizados.

     El nombre `gschmit' es sinónimo de `gramschmidt'.

     Es necesario cargar la función haciendo `load ("eigen")'.

     Ejemplo:

     Algoritmo de Gram-Schmidt utilizando el producto interno por
     defecto.

          (%i1) load (eigen)$
          (%i2) x: matrix ([1, 2, 3], [9, 18, 30], [12, 48, 60]);
                                   [ 1   2   3  ]
                                   [            ]
          (%o2)                    [ 9   18  30 ]
                                   [            ]
                                   [ 12  48  60 ]
          (%i3) y: gramschmidt (x);
                                 2      2            4     3
                                3      3   3 5      2  3  2  3
          (%o3)  [[1, 2, 3], [- ---, - --, ---], [- ----, ----, 0]]
                                2 7    7   2 7       5     5
          (%i4) map (innerproduct, [y[1], y[2], y[3]], [y[2], y[3], y[1]]);
          (%o4)                       [0, 0, 0]

     Algoritmo de Gram-Schmidt utilizando un producto interno
     especificado por el usuario.

          (%i1) load (eigen)$
          (%i2) ip (f, g) := integrate (f * g, u, a, b);
          (%o2)          ip(f, g) := integrate(f g, u, a, b)
          (%i3) y : gramschmidt ([1, sin(u), cos(u)], ip), a= -%pi/2, b=%pi/2;
                                         %pi cos(u) - 2
          (%o3)              [1, sin(u), --------------]
                                              %pi
          (%i4) map (ip, [y[1], y[2], y[3]], [y[2], y[3], y[1]]), a= -%pi/2, b=%pi/2;
          (%o4)                       [0, 0, 0]


 -- Función: ident (<n>)
     Devuelve la matriz identidad de orden <n>.


 -- Función: innerproduct (<x>, <y>)
 -- Función: inprod (<x>, <y>)
     Devuelve el producto interior o escalar de <x> por <y>, que deben
     ser listas de igual longitud, o ambas matrices columa o fila de
     igual longitud. El valor devuelto es `conjugate (x) . y', donde
     `.' es el operador de multiplicación no conmutativa.

     Es necesario cargar la función haciendo `load ("eigen")'.

     El nombre `inprod' es sinónimo de `innerproduct'.


 -- Función: invert (<M>)
     Devuelve la inversa de la matriz <M>, calculada por el método del
     adjunto.

     La implementación actual no es eficiente para matrices de orden
     grande.

     Cuando `detout' vale `true', el determinante se deja  fuera de la
     inversa a modo de factor escalar.

     Los elementos de la matriz inversa no se expanden. Si <M> tiene
     elementos polinómicos, se puede mejorar el aspecto del resultado
     haciendo `expand (invert (m)), detout'.

     Véase la descripción de `^^' (exponente no conmutativo) para
     información sobre otro método para invertir matrices.


 -- Función: list_matrix_entries (<M>)
     Devuelve una lista con todos los elementos de la matriz <M>.

     Ejemplo:

          (%i1) list_matrix_entries(matrix([a,b],[c,d]));
          (%o1)                     [a, b, c, d]


 -- Variable opcional: lmxchar
     Valor por defecto: `['

     La variable `lmxchar' guarda el carácter a mostrar como
     delimitador izquierdo de la matriz.  Véase también `rmxchar'.

     Ejemplo:

          (%i1) lmxchar: "|"$
          (%i2) matrix ([a, b, c], [d, e, f], [g, h, i]);
                                     | a  b  c ]
                                     |         ]
          (%o2)                      | d  e  f ]
                                     |         ]
                                     | g  h  i ]


 -- Función: matrix (<fila_1>, ..., <fila_n>)
     Devuelve una matriz rectangular con las filas  <fila_1>, ...,
     <fila_n>. Cada fila es una lista de expresiones. Todas las filas
     deben tener el mismo número de miembros.

     Las operaciones `+' (suma), `-' (resta), `*' (multiplicación) y
     `/' (división), se llevan a cabo elemento a elemento cuando los
     operandos son dos matrices, un escalar y una matriz o una matriz
     con un escalar. La operación `^' (exponenciación, equivalente a
     `**') se lleva cabo también elemento a elemento si los operandos
     son un escalr y una matriz o uma matriz y un escalar, pero no si
     los operandos son dos matrices.

     El producto matricial se representa con el operador de
     multiplicación no conmutativa `.'. El correspondiente operador de
     exponenciación no conmutativa es `^^'. Dada la matriz `<A>',
     `<A>.<A> = <A>^^2' y `<A>^^-1' es la inversa de <A>, si existe.

     Algunas variables controlan la simplificación de expresiones que
     incluyan estas operaciones: `doallmxops', `domxexpt', `domxmxops',
     `doscmxops' y `doscmxplus'.

     Hay otras opciones adicionales relacionadas con matrices:
     `lmxchar', `rmxchar', `ratmx', `listarith', `detout',
     `scalarmatrix' y `sparse'.

     Hay también algunas funciones que admiten matrices como argumentos
     o que devuelven resultados matriciales: `eigenvalues',
     `eigenvectors', `determinant', `charpoly', `genmatrix', `addcol',
     `addrow', `copymatrix', `transpose', `echelon' y `rank'.

     Ejemplos:

        * Construcción de matrices a partir de listas.

          (%i1) x: matrix ([17, 3], [-8, 11]);
                                     [ 17   3  ]
          (%o1)                      [         ]
                                     [ - 8  11 ]
          (%i2) y: matrix ([%pi, %e], [a, b]);
                                     [ %pi  %e ]
          (%o2)                      [         ]
                                     [  a   b  ]

        * Suma elemento a elemento.

          (%i3) x + y;
                                [ %pi + 17  %e + 3 ]
          (%o3)                 [                  ]
                                [  a - 8    b + 11 ]

        * Resta elemento a elemento.

          (%i4) x - y;
                                [ 17 - %pi  3 - %e ]
          (%o4)                 [                  ]
                                [ - a - 8   11 - b ]

        * Multiplicación elemento a elemento.

          (%i5) x * y;
                                  [ 17 %pi  3 %e ]
          (%o5)                   [              ]
                                  [ - 8 a   11 b ]

        * División elemento a elemento.

          (%i6) x / y;
                                  [ 17       - 1 ]
                                  [ ---  3 %e    ]
                                  [ %pi          ]
          (%o6)                   [              ]
                                  [   8    11    ]
                                  [ - -    --    ]
                                  [   a    b     ]

        * Matriz elevada a un exponente escalar, operación elemento a
          elemento.

          (%i7) x ^ 3;
                                   [ 4913    27  ]
          (%o7)                    [             ]
                                   [ - 512  1331 ]

        * Base escalar y exponente matricial, operación elemento a
          elemento.

          (%i8) exp(y);
                                   [   %pi    %e ]
                                   [ %e     %e   ]
          (%o8)                    [             ]
                                   [    a     b  ]
                                   [  %e    %e   ]

        * Base y exponente matriciales. Esta operación no se realiza
          elemento a elemento.

          (%i9) x ^ y;
                                          [ %pi  %e ]
                                          [         ]
                                          [  a   b  ]
                               [ 17   3  ]
          (%o9)                [         ]
                               [ - 8  11 ]

        * Multiplicación matricial no conmutativa.

          (%i10) x . y;
                            [ 3 a + 17 %pi  3 b + 17 %e ]
          (%o10)            [                           ]
                            [ 11 a - 8 %pi  11 b - 8 %e ]
          (%i11) y . x;
                          [ 17 %pi - 8 %e  3 %pi + 11 %e ]
          (%o11)          [                              ]
                          [  17 a - 8 b     11 b + 3 a   ]

        * Exponenciación matricial no conmutativa. Una base escalar <b>
          elevada a un exponente matricial <M> se lleva a cabo elemento
          a elemento y por lo tanto `b^^m' equivale a `b^m'.

          (%i12) x ^^ 3;
                                  [  3833   1719 ]
          (%o12)                  [              ]
                                  [ - 4584  395  ]
          (%i13) %e ^^ y;
                                   [   %pi    %e ]
                                   [ %e     %e   ]
          (%o13)                   [             ]
                                   [    a     b  ]
                                   [  %e    %e   ]

        * Una matriz elevada al exponente -1 con el operador de
          exponenciación no conmutativa equivale a la matriz inversa,
          si existe.

          (%i14) x ^^ -1;
                                   [ 11      3  ]
                                   [ ---  - --- ]
                                   [ 211    211 ]
          (%o14)                   [            ]
                                   [  8    17   ]
                                   [ ---   ---  ]
                                   [ 211   211  ]
          (%i15) x . (x ^^ -1);
                                      [ 1  0 ]
          (%o15)                      [      ]
                                      [ 0  1 ]


 -- Función: matrixmap (<f>, <M>)
     Devuelve una matriz con el elemento `i,j' igual a `<f>(<M>[i,j])'.

     Véanse también `map', `fullmap', `fullmapl' y `apply'.


 -- Función: matrixp (<expr>)
     Devuelve `true' si <expr> es una matriz, en caso contrario `false'.


 -- Variable opcional: matrix_element_add
     Valor por defecto: `+'

     La variable `matrix_element_add' guarda el símbolo del operador a
     ejecutar en lugar de la suma en el producto matricial; a
     `matrix_element_add' se le puede asignar cualquier operador n-ario
     (esto es, una función que admite cualquier número de argumentos).
     El valor asignado puede ser el nombre de un operador encerrado
     entre apóstrofos, el nombre de una función o una expresión lambda.

     Véanse también `matrix_element_mult' y `matrix_element_transpose'.

     Ejemplo:

          (%i1) matrix_element_add: "*"$
          (%i2) matrix_element_mult: "^"$
          (%i3) aa: matrix ([a, b, c], [d, e, f]);
                                     [ a  b  c ]
          (%o3)                      [         ]
                                     [ d  e  f ]
          (%i4) bb: matrix ([u, v, w], [x, y, z]);
                                     [ u  v  w ]
          (%o4)                      [         ]
                                     [ x  y  z ]
          (%i5) aa . transpose (bb);
                               [  u  v  w   x  y  z ]
                               [ a  b  c   a  b  c  ]
          (%o5)                [                    ]
                               [  u  v  w   x  y  z ]
                               [ d  e  f   d  e  f  ]


 -- Variable opcional: matrix_element_mult
     Valor por defecto: `*'

     La variable `matrix_element_mult' guarda el símbolo del operador a
     ejecutar en lugar de la multiplicación en el producto matricial; a
     `matrix_element_mult' se le puede asignar cualquier operador
     binario. El valor asignado puede ser el nombre de un operador
     encerrado entre apóstrofos, el nombre de una función o una
     expresión lambda.

     El operador `.' puede ser una opción útil en determinados
     contextos.

     Véanse también `matrix_element_add' y `matrix_element_transpose'.

     Ejemplo:

          (%i1) matrix_element_add: lambda ([[x]], sqrt (apply ("+", x)))$
          (%i2) matrix_element_mult: lambda ([x, y], (x - y)^2)$
          (%i3) [a, b, c] . [x, y, z];
                                    2          2          2
          (%o3)         sqrt((c - z)  + (b - y)  + (a - x) )
          (%i4) aa: matrix ([a, b, c], [d, e, f]);
                                     [ a  b  c ]
          (%o4)                      [         ]
                                     [ d  e  f ]
          (%i5) bb: matrix ([u, v, w], [x, y, z]);
                                     [ u  v  w ]
          (%o5)                      [         ]
                                     [ x  y  z ]
          (%i6) aa . transpose (bb);
                         [             2          2          2  ]
                         [ sqrt((c - w)  + (b - v)  + (a - u) ) ]
          (%o6)  Col 1 = [                                      ]
                         [             2          2          2  ]
                         [ sqrt((f - w)  + (e - v)  + (d - u) ) ]

                                   [             2          2          2  ]
                                   [ sqrt((c - z)  + (b - y)  + (a - x) ) ]
                           Col 2 = [                                      ]
                                   [             2          2          2  ]
                                   [ sqrt((f - z)  + (e - y)  + (d - x) ) ]


 -- Variable opcional: matrix_element_transpose
     Valor por defecto: `false'

     La variable `matrix_element_transpose' es una operación que se
     aplica a cada elemento de una matriz a la que se le calcula la
     transpuesta. A `matrix_element_mult' se le puede asignar cualquier
     operador unitario. El valor asignado puede ser el nombre de un
     operador encerrador entre apóstrofos, el nombre de una función o
     una expresión lambda.

     Cuando `matrix_element_transpose' es igual a `transpose', la
     función `transpose' se aplica a cada elemento. Cuando
     `matrix_element_transpose' es igual  a `nonscalars', la función
     `transpose' se aplica a todos los elementos no escalares. Si
     alguno de los elementos es un átomo, la opción `nonscalars' se
     aplica `transpose' sólo si el átomo se declara no escalar,
     mientras que la opción `transpose' siempre aplica  `transpose'.

     La opción por defecto, `false', significa que no se aplica ninguna
     operación.

     Véanse también `matrix_element_add' y `matrix_element_mult'.

     Ejemplos:

          (%i1) declare (a, nonscalar)$
          (%i2) transpose ([a, b]);
                                  [ transpose(a) ]
          (%o2)                   [              ]
                                  [      b       ]
          (%i3) matrix_element_transpose: nonscalars$
          (%i4) transpose ([a, b]);
                                  [ transpose(a) ]
          (%o4)                   [              ]
                                  [      b       ]
          (%i5) matrix_element_transpose: transpose$
          (%i6) transpose ([a, b]);
                                  [ transpose(a) ]
          (%o6)                   [              ]
                                  [ transpose(b) ]
          (%i7) matrix_element_transpose:
                     lambda ([x], realpart(x) - %i*imagpart(x))$
          (%i8) m: matrix ([1 + 5*%i, 3 - 2*%i], [7*%i, 11]);
                               [ 5 %i + 1  3 - 2 %i ]
          (%o8)                [                    ]
                               [   7 %i       11    ]
          (%i9) transpose (m);
                                [ 1 - 5 %i  - 7 %i ]
          (%o9)                 [                  ]
                                [ 2 %i + 3    11   ]


 -- Función: mattrace (<M>)
     Devuelve la traza (esto es, la suma de los elementos de la
     diagonal principal) de la matriz cuadrada <M>.

     Para disponer de esta función es necesario cargar el paquete
     haciendo `load ("nchrpl")'.


 -- Función: minor (<M>, <i>, <j>)
     Devuelve el menor `(<i>, <j>)' de la matriz <M>.  Esto es, la
     propia matriz <M>, una vez extraídas la fila <i> y la columna <j>.


 -- Función: ncharpoly (<M>, <x>)
     Devuelve el polinomio característico de la matriz <M> respecto de
     la variable <x>. Es una alternativa a la función `charpoly' de
     Maxima.

     La función `ncharpoly' opera calculando trazas de las potencias de
     la matriz dada, que son iguales a las sumas de las potencias de
     las raíces del polinomio característico. A partir de estas
     cantidades se pueden calcular las funciones simétricas de las
     raíces, que no son otra cosa sino los coeficientes del polinomio
     característico. La función   `charpoly' opera calculando el
     determinante de  by `<x> * ident [n] - a'. La función `ncharpoly'
     es m'as eficiente en el caso de matrices grandes y densas.

     Para disponer de esta función es necesario cargar el paquete
     haciendo `load ("nchrpl")'.


 -- Función: newdet (<M>)
     Calcula el determinante de la matriz <M> por el algoritmo del
     árbol menor de Johnson-Gentleman. El resultado devuelto por
     `newdet' tiene formato CRE.

 -- Función: permanent (<M>)
     Calcula la permanente de la matriz <M> por el algoritmo del árbol
     menor de Johnson-Gentleman. La permanente es como un determinante
     pero sin cambios de signo.  El resultado devuelto por `permanent'
     tiene formato CRE.

     Véase también `newdet'.


 -- Función: rank (<M>)
     Calcula el rango de la matriz <M>.  Esto es, el orden del mayor
     subdeterminante no singular de <M>.

     La función <rango> puede retornar una respuesta errónea si no
     detecta que un elemento de la matriz equivalente a cero lo es.


 -- Variable opcional: ratmx
     Valor por defecto: `false'

     Si `ratmx' vale `false', el determinante y la suma, resta y
     producto matriciales se calculan cuando las matrices se expresan
     en términos de sus elementos, pero no se calcula la inversión
     matricial en su representación general.

     Si `ratmx' vale `true', las cuatro operaciones citadas más arriba
     se calculan en el formato CRE y el resultado de la matriz inversa
     también se da en formato CRE. Esto puede hacer que se expandan los
     elementos de la matriz, dependiendo del valor de `ratfac', lo que
     quizás no sea siempre deseable.


 -- Función: row (<M>, <i>)
     Devuelve la <i>-ésima fila de la matriz <M>. El valor que devuelve
     tiene formato de matriz.


 -- Variable opcional: rmxchar
     Valor por defecto: `]'

     La variable `rmxchar' es el carácter que se dibuja al lado derecho
     de una matriz.

     Véase también `lmxchar'.


 -- Variable opcional: scalarmatrixp
     Valor por defecto: `true'

     Si `scalarmatrixp' vale `true', entonces siempre que una matriz 1
     x 1 se produce como resultado del cálculo del producto no
     conmutativo de matrices se cambia al formato escalar.

     Si `scalarmatrixp' vale `all', entonces todas las matrices 1 x 1
     se simplifican a escalares.

     Si `scalarmatrixp' vale `false', las matrices 1 x 1 no se
     convierten en escalares.


 -- Función: setelmx (<x>, <i>, <j>, <M>)
     Asigna el valor <x> al (<i>, <j>)-ésimo elemento de la matriz <M>
     y devuelve la matriz actualizada.

     La llamada `<M> [<i>, <j>]: <x>' hace lo mismo, pero devuelve  <x>
     en lugar de <M>.


 -- Función: similaritytransform (<M>)
 -- Función: simtran (<M>)
     La función `similaritytransform' calcula la transformada de
     similitud de la matriz `M'. Devuelve una lista que es la salida de
     la instrucción `uniteigenvectors'. Además, si la variable
     `nondiagonalizable' vale `false' entonces se calculan dos matrices
     globales `leftmatrix' y `rightmatrix'. Estas matrices tienen la
     propiedad de que `leftmatrix . <M> . rightmatrix' es una matriz
     diagonal con los valores propios de <M> en su diagonal.  Si
     `nondiagonalizable' vale `true' entonces no se calculan estas
     matrices.

     Si la variable `hermitianmatrix' vale `true' entonces `leftmatrix'
     es el conjugado complejo de la transpuesta de `rightmatrix'.  En
     otro caso `leftmatrix' es la inversa de `rightmatrix'.

     Las columnas de la matriz `rightmatrix' son los vectores propios
     de <M>.  Las otras variables (véanse `eigenvalues' y
     `eigenvectors') tienen el mismo efecto, puesto que
     `similaritytransform' llama a las otras funciones del paquete para
     poder formar `rightmatrix'.

     Estas funciones se cargan con `load ("eigen")'.

     El nombre `simtran' es sinónimo de `similaritytransform'.


 -- Variable opcional: sparse
     Valor por defecto: `false'

     Si `sparse' vale `true' y si `ratmx' vale `true', entonces
     `determinant' utilizará rutinas especiales para calcular
     determinantes dispersos.


 -- Función: submatrix (<i_1>, ..., <i_m>, <M>, <j_1>, ..., <j_n>)
 -- Función: submatrix (<i_1>, ..., <i_m>, <M>)
 -- Función: submatrix (<M>, <j_1>, ..., <j_n>)
     Devuelve una nueva matriz formada a partir de la matriz <M> pero
     cuyas filas <i_1>, ..., <i_m> y columnas  <j_1>, ..., <j_n> han
     sido eliminadas.


 -- Función: transpose (<M>)
     Calcula la transpuesta de <M>.

     Si <M> es una matriz, el valor devuelto es otra matriz <N> tal que
     `N[i,j] = M[j,i]'.

     Si <M> es una lista, el valor devuelto es una matriz <N> de
     `length (m)' filas y 1 columna, tal que `N[i,1] = M[i]'.

     En caso de no ser <M> ni matriz ni lista, se devuelve la expresión
     nominal `'transpose (<M>)'.

 -- Función: triangularize (<M>)
     Devuelve la forma triangular superior de la matriz `M', obtenida
     por eliminación gaussiana.  El resultado es el mismo que el
     devuelto por `echelon', con la salvedad de que el primer elemento
     no nulo de cada fila no se normaliza a 1.

     Las funciones `lu_factor' y `cholesky' también triangularizan
     matrices.

          (%i1) M: matrix ([3, 7, aa, bb], [-1, 8, 5, 2], [9, 2, 11, 4]);
                                 [  3   7  aa  bb ]
                                 [                ]
          (%o1)                  [ - 1  8  5   2  ]
                                 [                ]
                                 [  9   2  11  4  ]
          (%i2) triangularize (M);
                       [ - 1   8         5            2      ]
                       [                                     ]
          (%o2)        [  0   - 74     - 56         - 22     ]
                       [                                     ]
                       [  0    0    626 - 74 aa  238 - 74 bb ]


 -- Función: uniteigenvectors (<M>)
 -- Función: ueivects (<M>)
     Calcula los vectores propios unitarios de la matriz <M>. El valor
     que devuelve es una lista de listas, la primera de las cuales es
     la salida de la función `eigenvalues' y el resto de sublistas son
     los vectores propios unitarios de la matriz correspondiente a esos
     valores propios, respectivamente.

     Las variables citadas en la descripción de la función
     `eigenvectors' tienen los mismos efectos en `uniteigenvectors'.

     Si `knowneigvects' vale `true', el paquete `eigen' da por supuesto
     que el usuario conoce los vectores propios de la matriz y que
     están guardados en la variable global `listeigvects', en tal caso
     el contenido de  `listeigvects' debe ser una lista de estructura
     similar a la que devuelve la función `eigenvectors'.

     Si `knowneigvects' vale `true' y la lista de vectores propios está
     en la variable `listeigvects', el valor de la variable
     `nondiagonalizable' puede que no sea el correcto. Si tal es el
     caso, debe asignarsele el valor correcto.  Para utilizar esta
     fucnión es necesario cargarla haciendo `load ("eigen")'.

     El nombre `ueivects' es sinónimo de `uniteigenvectors'.


 -- Función: unitvector (<x>)
 -- Función: uvect (<x>)
     Devuelve <x>/norm(<x>), esto es, el vector unitario de igual
     dirección y sentido que <x>.

     `load ("eigen")' loads this function.

     Para utilizar esta fucnión es necesario cargarla haciendo `load
     ("eigen")'.

     El nombre `uvect' es sinónimo de `unitvector'.


 -- Función: vectorpotential (<givencurl>)
     Devuelve el vector potencial de un vector rotacional en el sistema
     de coordenadas actual.  `potentialzeroloc' tiene un rol similar al
     de `potential', pero el orden del miembro izquierdo de las
     ecuaciones debe ser una permutación cíclica de las coordenadas.


 -- Función: vectorsimp (<expr>)
     Realiza simplificaciones y expansiones de acuerdo con los valores
     de las siguientes variables globales:

     `expandall', `expanddot', `expanddotplus', `expandcross',
     `expandcrossplus', `expandcrosscross', `expandgrad',
     `expandgradplus', `expandgradprod', `expanddiv', `expanddivplus',
     `expanddivprod', `expandcurl', `expandcurlplus', `expandcurlcurl',
     `expandlaplacian', `expandlaplacianplus' y `expandlaplacianprod'.

     Todas estas variables tienen por defecto el valor `false'. El
     sufijo `plus' se refiere al uso de la suma o la distributividad.
     El sufijo `prod' se refiere a la expansión de operadores que
     realizan cualquier tipo de producto.

    `expandcrosscross'
          Simplifica p ~ (q ~ r) en (p . r)*q - (p . q)*r.

    `expandcurlcurl'
          Simplifica curl curl p en grad div p + div grad p.

    `expandlaplaciantodivgrad'
          Simplifica laplacian p en div grad p.

    `expandcross'
          Activa `expandcrossplus' y `expandcrosscross'.

    `expandplus'
          Activa `expanddotplus', `expandcrossplus', `expandgradplus',
          `expanddivplus', `expandcurlplus' y `expandlaplacianplus'.

    `expandprod'
          Activa `expandgradprod', `expanddivprod' y
          `expandlaplacianprod'.

     Estas variables están declaradas como `evflag'.


 -- Función: zeromatrix (<m>, <n>)
     Devuelve una matriz rectangular <m> por <n> con todos sus
     elementos iguales a cero.


 -- Símbolo especial: [
 -- Símbolo especial: [
     Los símbolos `[' y `]' marcan el comienzo y final,
     respectivamente, de una lista.

     Los símbolos `[' y `]' también se utilizan para indicar los
     subíndices de los elementos de una lista, arreglo o función
     arreglo.

     Ejemplos:

          (%i1) x: [a, b, c];
          (%o1)                       [a, b, c]
          (%i2) x[3];
          (%o2)                           c
          (%i3) array (y, fixnum, 3);
          (%o3)                           y
          (%i4) y[2]: %pi;
          (%o4)                          %pi
          (%i5) y[2];
          (%o5)                          %pi
          (%i6) z['foo]: 'bar;
          (%o6)                          bar
          (%i7) z['foo];
          (%o7)                          bar
          (%i8) g[k] := 1/(k^2+1);
                                            1
          (%o8)                     g  := ------
                                     k     2
                                          k  + 1
          (%i9) g[10];
                                          1
          (%o9)                          ---
                                         101



File: maxima.info,  Node: Afines,  Next: itensor,  Prev: Matrices y Álgebra Lineal,  Up: Top

24 Afines
*********

* Menu:

* Funciones y variables para Afines::


File: maxima.info,  Node: Funciones y variables para Afines,  Prev: Afines,  Up: Afines

24.1 Funciones y variables para Afines
======================================

 -- Función: fast_linsolve ([<expr_1>, ..., <expr_m>], [<x_1>, ...,
          <x_n>])
     Resuelve las ecuaciones lineales simultáneas <expr_1>, ...,
     <expr_m> para las variables <x_1>, ..., <x_n>.  Cada <expr_i>
     puede ser una ecuación o una expresión general; en caso de
     tratarse de una expresión general, será tratada como una ecuación
     de la forma `<expr_i> = 0'.

     El valor que devuelve es una lista de ecuaciones de la forma
     `[<x_1> = <a_1>, ..., <x_n> = <a_n>]' donde todas las <a_1>, ...,
     <a_n> están exentas de <x_1>, ..., <x_n>.

     La función `fast_linsolve' es más rápida que `linsolve' para
     sistemas de ecuaciones con coeficientes dispersos.

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Función: grobner_basis ([<expr_1>, ..., <expr_m>])
     Devuelve una base de Groebner para las ecuaciones <expr_1>, ...,
     <expr_m>.  La función `polysimp' puede ser entonces utilizada para
     simplificar otras funciones relativas a las ecuaciones.

          grobner_basis ([3*x^2+1, y*x])$

          polysimp (y^2*x + x^3*9 + 2) ==> -3*x + 2

     `polysimp(f)' alcanza 0 si y sólo si <f> está en el ideal generado
     por <expr_1>, ..., <expr_m>, es decir, si y sólo si <f> es una
     combinación  polinómica de los elementos de <expr_1>, ...,
     <expr_m>.

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Función: set_up_dot_simplifications (<eqns>, <check_through_degree>)
 -- Función: set_up_dot_simplifications (<eqns>)
     Las <eqns> son ecuaciones polinómicas de variables no conmutativas.
     El valor de `current_variables' es la lista de variables
     utilizadas para el cálculo de los grados. Las ecuaciones deben ser
     homogéneas, al objeto de completar el procedimiento.

     El grado es el devuelto por `nc_degree'. Éste a su vez depende de
     los pesos de las variables individuales.

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Función: declare_weights (<x_1>, <w_1>, ..., <x_n>, <w_n>)
     Asigna los pesos <w_1>, ..., <w_n> a <x_1>, ..., <x_n>,
     respectivamente.  Estos pesos son los utilizados en el cálculo de
     `nc_degree'.

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Función: nc_degree (<p>)
     Devuelve el grado de un polinomio no conmutativo <p>. Véase
     `declare_weights'.

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Función: dotsimp (<f>)
     Devuelve 0 si y sólo si  <f> está en el ideal generado por las
     ecuaciones, esto es, si y sólo si <f> es una combinación lineal de
     los elementos de las ecuaciones.

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Función: fast_central_elements ([<x_1>, ..., <x_n>], <n>)
     Si se ha ejecutado `set_up_dot_simplifications' con antelación,
     obtiene los polinomios centrales de grado <n> de variables <x_1>,
     ..., <x_n>.

     Por ejemplo:
          set_up_dot_simplifications ([y.x + x.y], 3);
          fast_central_elements ([x, y], 2);
          [y.y, x.x];

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Función: check_overlaps (<n>, <add_to_simps>)
     Revisa la superposición hasta el grado <n>, asegurándose de que el
     usuario tiene suficientes reglas de simplificación en cada grado
     para que `dotsimp' trabaje correctamente. Este proceso puede
     acelerarse si se conoce de antemano cuál es la dimensión del
     espacio de monomios.  Si éste es de dimensión global finita,
     entonces debería usarse `hilbert'. Si no se conoce la dimensiones
     de los monomios, no se debería especificar una `rank_function'.
     Un tercer argumento opcional es `reset'.

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Función: mono ([<x_1>, ..., <x_n>], <n>)
     Devuelve la lista de monomios independientes.  Antes de utilizar
     esta función ejecútese `load(affine)'.

 -- Función: monomial_dimensions (<n>)
     Calcula el desarrollo de Hilbert de grado <n> para el algebra
     actual.

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Función: extract_linear_equations ([<p_1>, ..., <p_n>], [<m_1>,
          ..., <m_n>])
     Hace una lista de los coeficientes de los polinomios no
     conmutativos <p_1>, ..., <p_n> de los monomios no conmutativos
     <m_1>, ..., <m_n>. Los coeficientes deben escalares. Hágase uso de
     `list_nc_monomials' para construir la lista de monomios.

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Función: list_nc_monomials ([<p_1>, ..., <p_n>])
 -- Función: list_nc_monomials (<p>)
     Devuelve  una lista de los monomios no conmutativos que aparecen
     en el polinomio  <p> o una lista de polinomios en <p_1>, ...,
     <p_n>.

     Antes de utilizar esta función ejecútese `load(affine)'.

 -- Variable: all_dotsimp_denoms
     Valor por defecto: `false'

     Cuando `all_dotsimp_denoms' es una lista, los denominadores
     encontrados por `dotsimp' son añadidos a la lista. La variable
     `all_dotsimp_denoms' puede inicializarse como una lista vacía `[]'
     antes de llamar a `dotsimp'.

     Por defecto, `dotsimp' no recolecta los denominadores.



File: maxima.info,  Node: itensor,  Next: ctensor,  Prev: Afines,  Up: Top

25 itensor
**********

* Menu:

* Introducción a itensor::
* Funciones y variables para itensor::


File: maxima.info,  Node: Introducción a itensor,  Next: Funciones y variables para itensor,  Prev: itensor,  Up: itensor

25.1 Introducción a itensor
===========================

Maxima implementa dos tipos diferentes de manipulación simbólica de
tensores: la manipulación de componentes (paquete `ctensor') y la
manipulación indexada (paquete `itensor').

Véase más abajo la nota sobre 'notación tensorial'.

La manipulación de componentes significa que los objetos geométricos
tensoriales se representan como arreglos (arrays) o matrices.
Operaciones tensoriales como la contracción o la diferenciación
covariante se llevan a cabo sumando índices mudos con la sentencia
`do'. Esto es, se realizan operaciones directamente con las componentes
del tensor almacenadas en un arreglo o matriz.

La manipulación indexada de tensores se lleva a cabo mediante la
representación de los tensores como funciones de sus índices
covariantes, contravariantes y de derivadas. Operaciones tensoriales
como la contracción o la diferenciación covariante se realizan
manipulando directamente los índices, en lugar de sus componentes
asociadas.

Estas dos técnicas para el tratamiento de los procesos diferenciales,
algebraicos y analíticos en el contexto de la geometría riemanniana
tienen varias ventajas y desventajas que surgen según la naturaleza y
dificultad del problema que está abordando el usuario. Sin embargo, se
deben tener presentes las siguientes características de estas dos
técnicas:

La representación de los tensores y sus operaciones en términos de sus
componentes facilita el uso de paquete `ctensor'. La especificación de
la métrica y el cálculo de los tensores inducidos e invariantes es
inmediato. Aunque toda la potencia de simplificación de Maxima se
encuentra siempre a mano, una métrica compleja con dependencias
funcionales y de coordenadas intrincada, puede conducir a expresiones
de gran tamaño en las que la estructura interna quede oculta. Además,
muchos cálculos requieren de expresiones intermedias que pueden
provocar la detención súbita de los programas antes de que se termine
el cálculo. Con la experiencia, el usuario podrá evitar muchas de estas
dificultades.

Devido a la forma en que los tensores y sus operaciones se representan
en términos de operaciones simbólicas con sus índices, expresiones que
serían intratables en su representación por componentes pueden en
ocasiones simplificarse notablemente utilizando las rutinas especiales
para objetos simétricos del paquete `itensor'. De esta manera, la
estructura de expresiones grandes puede hacerse más transparente. Por
otro lado, debido a la forma especial de la representación indexada de
tensores en `itensor', en algunos casos el usuario encontrará
dificultades con la especificación de la métrica o la definición de
funciones.

El paquete `itensor' puede derivar respecto de una variable indexada,
lo que permite utilizar el paquete cuando se haga uso del formalismo de
lagrangiano y hamiltoniano. Puesto que es posible derivar un campo
lagrangiano respecto de una variable de campo indexada, se puede hacer
uso de Maxima para derivar las ecuaciones de Euler-Lagrange
correspondientes en forma indexada. Estas ecuaciones pueden traducirse
a componentes tensoriales (`ctensor') con la función `ic_convert', lo
que permite resolver las ecuaciones de campo en cualquier sistema de
coordenadas, o obtener las ecuaciones de movimiento en forma
hamiltoniana. Véanse dos ejemplos en `einhil.dem' y `bradic.dem'; el
primero utiliza la acción de Einstein-Hilbert para derivar el campo
tensorial de Einstein en el caso homogéneo e isotrópico (ecuaciones de
Friedmann), así como en el caso esferosimétrico estático (solución de
Schwarzschild); el segundo demuestra cómo calcular las ecuaciones de
Friedmann a partir de la acción de la teoría de la gravedad de
Brans-Dicke, y también muestra cómo derivar el hamiltoniano asociado
con la teoría del campo escalar.

25.1.1 Notación tensorial
-------------------------

Hasta ahora, el paquete `itensor' de Maxima utilizaba una notación que
algunas veces llevaba a una ordenación incorrecta de los índices. Por
ejemplo:

     (%i2) imetric(g);
     (%o2)                                done
     (%i3) ishow(g([],[j,k])*g([],[i,l])*a([i,j],[]))$
                                      i l  j k
     (%t3)                           g    g    a
                                                i j
     (%i4) ishow(contract(%))$
                                           k l
     (%t4)                                a

Este resultado no es correcto a menos que `a' sea un tensor simétrico.
La razón por la que esto ocurre es que aunque `itensor' mantenga
correctamente el orden dentro del conjunto de índices covariantes y
contravariantes, una vez un índice sea aumentado o disminuido, su
posición relativa al otro conjunto de índices se pierde.

Para evitar este problema, se ha desarrollado una notación totalmente
compatible con la anterior.En esta notación, los índices
contravariantes se insertan en las posiciones correctas en la lista de
índices covariantes, pero precedidos del signo negativo.

En esta notación, el ejemplo anterior da el resultado correcto:

     (%i5) ishow(g([-j,-k],[])*g([-i,-l],[])*a([i,j],[]))$
                                      i l       j k
     (%t5)                           g    a    g
                                           i j
     (%i6) ishow(contract(%))$
                                           l k
     (%t6)                                a

El único código que hace uso de esta notación es la función `lc2kdt'.
Devido a que este código es nuevo, puede contener errores.

25.1.2 Manipulación indexada de tensores
----------------------------------------

El paquete `itensor' se carga haciendo `load(itensor)'. Para acceder a
las demos se hará `demo(tensor)'.

En el paquete `itensor' un tensor se representa como un objeto
indexado, esto es, como una función de tres grupos de índices: los
covariantes, los contravariantes y los de derivadas. Los índices
covariantes se especifican mediante una lista que será el primer
argumento del objeto indexado, siendo los índices contravariantes otra
lista que será el segundo argumento del mismo objeto indexado. Si al
objeto indexado le falta cualquiera de estos grupos de índices,
entonces se le asignará al argumento correspondiente la lista vacía
`[]'.  Así, `g([a,b],[c])' representa un objeto indexado llamado `g',
el cual tiene dos índices covariantes `(a,b)', un índice contravariante
(`c') y no tiene índices de derivadas.

Los índices de derivadas, si están presentes, se añaden como argumentos
adicionales a la función simbólica que representa al tensor. Se pueden
especificar explícitamente por el usuario o pueden crearse durante el
proceso de diferenciación respecto de alguna coordenada. Puesto que la
diferenciación ordinaria es conmutativa, los índices de derivadas se
ordenan alfanuméricamente, a menos que la variable `iframe_flag' valga
`true', indicando que se está utilizando una métrica del sistema de
referencia. Esta ordenación canónica hace posible que Maxima reconozca,
por ejemplo, que `t([a],[b],i,j)' es lo mismo que `t([a],[b],j,i)'. La
diferenciación de un objeto indexado con respecto de alguna coordenada
cuyo índice no aparece como argumento de dicho objeto indexado, dará
como resultado cero. Esto se debe a que Maxima no sabe si el tensor
representado por el objeto indexado depende implícitamente de la
coordenada correspondiente. Modificando la función `diff' de Maxima en
`itensor', se da por hecho que todos los objetos indexados dependen de
cualquier variable de diferenciación, a menos que se indique lo
contrario. Esto hace posible que la convención sobre la sumación se
extienda a los índices de derivadas. El paquete `itensor' trata a los
índices de derivadas como covariantes.

Las siguientes funciones forman parte del paquete `itensor' para la
manipulación indexada de vectores. En lo que respecta a las rutinas de
simplificación, no se considera en general que los objetos indexados
tengan propiedades simétricas. Esto puede cambiarse reasignando a la
variable `allsym[false]' el valor `true', con lo cual los objetos
indexados se considerarán simétricos tanto respecto de sus índices
covariantes como contravariantes.

En general, el paquete `itensor' trata a los tensores como objetos
opacos. Las ecuaciones tensoriales se manipulan en base a reglas
algebraicas, como la simetría y la contracción. Además, en el paquete
`itensor' hay funciones para la diferenciación covariante, la curvatura
y la torsión. Los cálculos se pueden realizar respecto de una métrica
del sistema de referencia móvil, dependiendo de las asignaciones dadas
a la variable `iframe_flag'.

La siguiente sesión de ejemplo demuestra cómo cargar el paquete
`itensor', especificar el nombre de la métrica y realizar algunos
cálculos sencillos.

     (%i1) load(itensor);
     (%o1)      /share/tensor/itensor.lisp
     (%i2) imetric(g);
     (%o2)                                done
     (%i3) components(g([i,j],[]),p([i,j],[])*e([],[]))$
     (%i4) ishow(g([k,l],[]))$
     (%t4)                               e p
                                            k l
     (%i5) ishow(diff(v([i],[]),t))$
     (%t5)                                  0
     (%i6) depends(v,t);
     (%o6)                               [v(t)]
     (%i7) ishow(diff(v([i],[]),t))$
                                         d
     (%t7)                               -- (v )
                                         dt   i
     (%i8) ishow(idiff(v([i],[]),j))$
     (%t8)                                v
                                           i,j
     (%i9) ishow(extdiff(v([i],[]),j))$
     (%t9)                             v    - v
                                        j,i    i,j
                                       -----------
                                            2
     (%i10) ishow(liediff(v,w([i],[])))$
                                    %3          %3
     (%t10)                        v   w     + v   w
                                        i,%3    ,i  %3
     (%i11) ishow(covdiff(v([i],[]),j))$
                                                   %4
     (%t11)                        v    - v   ichr2
                                    i,j    %4      i j
     (%i12) ishow(ev(%,ichr2))$
                     %4 %5
     (%t12) v    - (g      v   (e p       + e   p     - e p       - e    p
             i,j            %4     j %5,i    ,i  j %5      i j,%5    ,%5  i j

                                              + e p       + e   p    ))/2
                                                   i %5,j    ,j  i %5
     (%i13) iframe_flag:true;
     (%o13)                               true
     (%i14) ishow(covdiff(v([i],[]),j))$
                                                  %6
     (%t14)                        v    - v   icc2
                                    i,j    %6     i j
     (%i15) ishow(ev(%,icc2))$
                                                  %6
     (%t15)                        v    - v   ifc2
                                    i,j    %6     i j
     (%i16) ishow(radcan(ev(%,ifc2,ifc1)))$
                  %6 %7                    %6 %7
     (%t16) - (ifg      v   ifb       + ifg      v   ifb       - 2 v
                         %6    j %7 i             %6    i j %7      i,j

                                                  %6 %7
                                             - ifg      v   ifb      )/2
                                                         %6    %7 i j
     (%i17) ishow(canform(s([i,j],[])-s([j,i])))$
     (%t17)                            s    - s
                                        i j    j i
     (%i18) decsym(s,2,0,[sym(all)],[]);
     (%o18)                               done
     (%i19) ishow(canform(s([i,j],[])-s([j,i])))$
     (%t19)                                 0
     (%i20) ishow(canform(a([i,j],[])+a([j,i])))$
     (%t20)                            a    + a
                                        j i    i j
     (%i21) decsym(a,2,0,[anti(all)],[]);
     (%o21)                               done
     (%i22) ishow(canform(a([i,j],[])+a([j,i])))$
     (%t22)                                 0


File: maxima.info,  Node: Funciones y variables para itensor,  Prev: Introducción a itensor,  Up: itensor

25.2 Funciones y variables para itensor
=======================================

25.2.1 Trabajando con objetos indexados
---------------------------------------

 -- Función: dispcon (<tensor_1>, <tensor_2>, ...)
 -- Función: dispcon (all)
     Muestra las propiedades contractivas de sus argumentos tal como
     fueron asignadas por `defcon'. La llamada `dispcon (all)' muestra
     todas propiedades contractivas que fueron definidas.

 -- Función: entertensor (<nombre>)
     Permite crear un objeto indexado llamado <nombre>, con cualquier
     número de índices tensoriales y de derivadas. Se admiten desde un
     único índice hasta una lista de índices. Véase el ejemplo en la
     descripción de `covdiff'.


 -- Función: changename (<anterior>, <nuevo>, <expr>)
     Cambia el nombre de todos los objetos indexados llamados
     <anterior> a <new> en <expr>. El argumento <anterior> puede ser un
     símbolo o una lista de la forma `[<nombre>, <m>, <n>]', en cuyo
     caso sólo los objetos indexados de llamados <nombre> con <m>
     índices covariantes y <n> contravariantes se renombrarán como
     <nuevo>.


 -- Función: listoftens
     Hace un listado de todos los tensores y sus índices en una
     expresión tensorial. Por ejemplo,


          (%i6) ishow(a([i,j],[k])*b([u],[],v)+c([x,y],[])*d([],[])*e)$
                                                   k
          (%t6)                        d e c    + a    b
                                            x y    i j  u,v
          (%i7) ishow(listoftens(%))$
                                         k
          (%t7)                        [a   , b   , c   , d]
                                         i j   u,v   x y


 -- Función: ishow (<expr>)
     Muestra <expr> con todos los objetos indexados que contiene, junto
     con los correspondientes índices covariantes (como subíndices) y
     contravariantes (como superíndices). Los índices de derivadas se
     muestran como subíndices, separados de los covariantes por una
     coma; véanse los múltiples ejemplos de este documento.


 -- Función: indices (<expr>)
     Devuelve una lista con dos elementos. El primer elemento es una
     lista con los índices libres, aquellos que aparecen una sola vez.
     El segundo elemento es una lista con los índices mudos en <expr>,
     aquellos que aparecen exactamente dos veces. Por ejemplo,


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) ishow(a([i,j],[k,l],m,n)*b([k,o],[j,m,p],q,r))$
                                          k l      j m p
          (%t2)                          a        b
                                          i j,m n  k o,q r
          (%i3) indices(%);
          (%o3)                 [[l, p, i, n, o, q, r], [k, j, m]]

     Un producto tensorial que contenga el mismo índice más de dos
     veces es sintácticamente incorrecto. La función `indices' intenta
     tratar estas expresiones de una forma razonable; sin embargo,
     cuando se la obliga a manipular una expresión incorrecta puede
     tener un comportamiento imprevisto.


 -- Función: rename (<expr>)
 -- Función: rename (<expr>, <count>)
     Devuelve una expresión equivalente a <expr> pero con los índices
     mudos de cada término elegidos del conjunto  `[%1, %2,...]' si el
     segundo argumento opcional se omite. En otro caso, los índices
     mudos son indexados empezando con el valor <count>. Cada índice
     mudo en un producto será diferente. En el caso de las sumas, la
     función `rename' operará sobre cada término de la suma
     reinicializando el contador con cada término. De esta manera
     `rename' puede servir como simplificador tensorial. Además, los
     índices se ordenarán alfanuméricamente, si la variable `allsym'
     vale `true', respecto de los índices covariantes y contravariantes
     dependiendo del valor de `flipflag'. Si  `flipflag' vale `false',
     entonces los índices se renombrarán de acuerdo con el orden de los
     índices contravariantes. Si `flipflag' vale `true', entonces los
     índices se renombrarán de acuerdo con el orden de los índices
     covariantes. Suele acontecer que el efecto combinado de los dos
     cambios de nombre reduzcan la expresión más de lo que que pueda
     reducir cualquiera de ellas por separado.


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) allsym:true;
          (%o2)                                true
          (%i3) g([],[%4,%5])*g([],[%6,%7])*ichr2([%1,%4],[%3])*
          ichr2([%2,%3],[u])*ichr2([%5,%6],[%1])*ichr2([%7,r],[%2])-
          g([],[%4,%5])*g([],[%6,%7])*ichr2([%1,%2],[u])*
          ichr2([%3,%5],[%1])*ichr2([%4,%6],[%3])*ichr2([%7,r],[%2]),noeval$
          (%i4) expr:ishow(%)$

                 %4 %5  %6 %7      %3         u          %1         %2
          (%t4) g      g      ichr2      ichr2      ichr2      ichr2
                                   %1 %4      %2 %3      %5 %6      %7 r

                  %4 %5  %6 %7      u          %1         %3         %2
               - g      g      ichr2      ichr2      ichr2      ichr2
                                    %1 %2      %3 %5      %4 %6      %7 r
          (%i5) flipflag:true;
          (%o5)                                true
          (%i6) ishow(rename(expr))$
                 %2 %5  %6 %7      %4         u          %1         %3
          (%t6) g      g      ichr2      ichr2      ichr2      ichr2
                                   %1 %2      %3 %4      %5 %6      %7 r

                  %4 %5  %6 %7      u          %1         %3         %2
               - g      g      ichr2      ichr2      ichr2      ichr2
                                    %1 %2      %3 %4      %5 %6      %7 r
          (%i7) flipflag:false;
          (%o7)                                false
          (%i8) rename(%th(2));
          (%o8)                                  0
          (%i9) ishow(rename(expr))$
                 %1 %2  %3 %4      %5         %6         %7        u
          (%t9) g      g      ichr2      ichr2      ichr2     ichr2
                                   %1 %6      %2 %3      %4 r      %5 %7

                  %1 %2  %3 %4      %6         %5         %7        u
               - g      g      ichr2      ichr2      ichr2     ichr2
                                    %1 %3      %2 %6      %4 r      %5 %7


 -- Función: show (<expr>)
     Muestra `expr' con sus objetos indexados que tengan índices
     covariantes como subíndices y los contravariantes como
     superíndices.  Los índices derivados se muestran como subíndices,
     separados por una coma de los covariantes.

 -- Variable opcional: flipflag
     Valor por defecto: `false'

     Si vale `false' los índices se renombrarán de acuerdo con el orden
     de los índices covariantes, si `true' se renombrarán de acuerdo
     con el orden de los índices covariantes.

     Si `flipflag' vale `false', entonces `rename' construye una lista
     con los índices contravariantes según van apareciendo de izquierda
     a derecha; si vale `true', entonces va formando la lista con los
     covariantes. Al primer índice mudo se le da el nombre `%1', al
     siguiente `%2', etc. Finalmente se hace la ordenación. Véase el
     ejemplo en la descripción de la función `rename'.


 -- Función: defcon (<tensor_1>)
 -- Función: defcon (<tensor_1>, <tensor_2>, <tensor_3>)
     Le asigna a gives <tensor_1> la propiedad de que la contracción de
     un producto de <tensor_1> por <tensor_2> da como resultado un
     <tensor_3> con los índices apropiados. Si sólo se aporta un
     argumento, <tensor_1>, entonces la contracción del producto de
     <tensor_1> por cualquier otro objeto indexado que tenga los
     índices apropiados, por ejemplo `my_tensor', dará como resultado
     un objeto indexado con ese nombre, `my_tensor', y con un nuevo
     conjunto de índices que reflejen las contracciones realizadas. Por
     ejemplo, si `imetric:g', entonces `defcon(g)' implementará el
     aumento o disminución de los índices a través de la contracción
     con el tensor métrico. Se puede dar más de un `defcon' para el
     mismo objeto indexado, aplicándose el último. La variable
     `contractions' es una lista con aquellos objetos indexados a los
     que se le han dado propiedades de contracción con  `defcon'.


 -- Función: remcon (<tensor_1>, ..., <tensor_n>)
 -- Función: remcon (all)
     Borra todas las propiedades de contracción de <tensor_1>, ...,
     <tensor_n>). La llamada `remcon(all)' borra todas las propiedades
     de contracción de todos los objetos indexados.


 -- Función: contract (<expr>)
     Lleva a cabo las contracciones tensoriales en <expr>, la cual
     puede ser cualquier combinación de sumas y productos. Esta función
     utiliza la información dada a la función `defcon'. Para obtener
     mejores resultados, `expr' debería estar completamente expandida.
     La función `ratexpand' es la forma más rápida de expandir
     productos y potencias de sumas si no hay variables en los
     denominadores de los términos.


 -- Función: indexed_tensor (<tensor>)
     Debe ejecutarse antes de asignarle componentes a un <tensor> para
     el que ya existe un valor, como `ichr1', `ichr2' o `icurvature'.
     Véase el ejemplo de la descripción de `icurvature'.


 -- Función: components (<tensor>, <expr>)
     Permite asignar un valor indexado a la expresión <expr> dando los
     valores de las componentes de <tensor>. El tensor debe ser de la
     forma `t([...],[...])', donde cualquiera de las listas puede estar
     vacía. La expresión  <expr> puede ser cualquier objeto indexado
     que tenga otros objetos con los mismos índices libres que
     <tensor>. Cuando se utiliza para asignar valores al tensor métrico
     en el que las componentes contengan índices mudos, se debe tener
     cuidado en no generar índices mudos múltiples. Se pueden borrar
     estas asignaciones con la función  `remcomps'.

     Es importante tener en cuenta que `components' controla la
     valencia del tensor, no el orden de los índices. Así, asignando
     componentes de la forma `x([i,-j],[])', `x([-j,i],[])' o
     `x([i],[j])' todos ellos producen el mismo resultado, la
     asignación de componentes a un tensor de nombre `x' con valencia
     `(1,1)'.

     Las componentes se pueden asignar a una expresión indexada de
     cuatro maneras, dos de las cuales implican el uso de la
     instrucción `components':

     1) Como una expresión indexada. Por ejemplo:


          (%i2) components(g([],[i,j]),e([],[i])*p([],[j]))$
          (%i3) ishow(g([],[i,j]))$
                                                i  j
          (%t3)                                e  p

     2) Como una matriz:

          (%i5) lg:-ident(4)$lg[1,1]:1$lg;
                                      [ 1   0    0    0  ]
                                      [                  ]
                                      [ 0  - 1   0    0  ]
          (%o5)                       [                  ]
                                      [ 0   0   - 1   0  ]
                                      [                  ]
                                      [ 0   0    0   - 1 ]

          (%i6) components(g([i,j],[]),lg);
          (%o6)                                done
          (%i7) ishow(g([i,j],[]))$
          (%t7)                                g
                                                i j
          (%i8) g([1,1],[]);
          (%o8)                                  1
          (%i9) g([4,4],[]);
          (%o9)                                 - 1

     3) Como una función. Se puede utilizar una función de Maxima para
     especificar las componentes de un tensor en base a sus índices.
     Por ejemplo, el código siguiente asigna  `kdelta' a `h' si `h'
     tiene el mismo número de índices covariantes y contravariantes y
     no tiene índices de derivadas, asignándole `g' en otro caso:


          (%i4) h(l1,l2,[l3]):=if length(l1)=length(l2) and length(l3)=0
            then kdelta(l1,l2) else apply(g,append([l1,l2], l3))$
          (%i5) ishow(h([i],[j]))$
                                                    j
          (%t5)                               kdelta
                                                    i
          (%i6) ishow(h([i,j],[k],l))$
                                               k
          (%t6)                               g
                                               i j,l

     4) Utilizando los patrones de Maxima, en particular las funciones
     `defrule' y `applyb1':


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) matchdeclare(l1,listp);
          (%o2)                                done
          (%i3) defrule(r1,m(l1,[]),(i1:idummy(),
                g([l1[1],l1[2]],[])*q([i1],[])*e([],[i1])))$

          (%i4) defrule(r2,m([],l1),(i1:idummy(),
                w([],[l1[1],l1[2]])*e([i1],[])*q([],[i1])))$

          (%i5) ishow(m([i,n],[])*m([],[i,m]))$
                                              i m
          (%t5)                              m    m
                                                   i n
          (%i6) ishow(rename(applyb1(%,r1,r2)))$
                                     %1  %2  %3 m
          (%t6)                     e   q   w     q   e   g
                                                   %1  %2  %3 n


 -- Función: remcomps (<tensor>)
     Borra todos los valores de <tensor> que han sido asignados con la
     función `components'.


 -- Función: showcomps (<tensor>)
     Muestra las componentes de un tensor definidas con la instrucción
     `components'. Por ejemplo:


          (%i1) load(ctensor);
          (%o1)       /share/tensor/ctensor.mac
          (%i2) load(itensor);
          (%o2)      /share/tensor/itensor.lisp
          (%i3) lg:matrix([sqrt(r/(r-2*m)),0,0,0],[0,r,0,0],
                          [0,0,sin(theta)*r,0],[0,0,0,sqrt((r-2*m)/r)]);
                         [         r                                     ]
                         [ sqrt(-------)  0       0              0       ]
                         [      r - 2 m                                  ]
                         [                                               ]
                         [       0        r       0              0       ]
          (%o3)          [                                               ]
                         [       0        0  r sin(theta)        0       ]
                         [                                               ]
                         [                                      r - 2 m  ]
                         [       0        0       0        sqrt(-------) ]
                         [                                         r     ]
          (%i4) components(g([i,j],[]),lg);
          (%o4)                                done
          (%i5) showcomps(g([i,j],[]));
                            [         r                                     ]
                            [ sqrt(-------)  0       0              0       ]
                            [      r - 2 m                                  ]
                            [                                               ]
                            [       0        r       0              0       ]
          (%t5)      g    = [                                               ]
                      i j   [       0        0  r sin(theta)        0       ]
                            [                                               ]
                            [                                      r - 2 m  ]
                            [       0        0       0        sqrt(-------) ]
                            [                                         r     ]
          (%o5)                                false

     La función `showcomps' también puede mostrar las componentes de
     tensores de rango mayor de 2.


 -- Función: idummy ()
     Incrementa `icounter' y devuelve un índice de la forma `%n' siendo
     `n' un entero positivo.  Esto garantiza que índices mudos que sean
     necesarios para formar expresiones no entren en conflico con
     índices que ya están en uso. Véase el ejemplo de la descripción de
     `indices'.


 -- Variable opcional: idummyx
     Valor por defecto: `%'

     Es el prefijo de los índices mudos. Véase `indices'.


 -- Variable opcional: icounter
     Valor por defecto: `1'

     Determina el sufijo numérico a ser utilizado en la generación del
     siguiente índice mudo. El prefijo se determina con la opción
     `idummy' (por defecto: %).

 -- Función: kdelta (<L1>, <L2>)
     Es la función delta generalizada de Kronecker definida en el
     paquete `itensor' siendo <L1> la lista de índices covariantes y
     <L2> la lista de índices contravariantes. La función
     `kdelta([i],[j])' devuelve el valor de la delta ordinaria de
     Kronecker. La instrucción `ev(<expr>,kdelta)' provoca la
     evaluación de una expresión que contenga `kdelta([],[])'.

     En un abuso de la notación, `itensor' también permite a `kdelta'
     tener 2 índices covariantes y ninguno contravariante, o 2
     contravariantes y ninguno covariante. Esto es una funcionalidad
     del paquete, loque no implica que  `kdelta([i,j],[])' sea un
     objeto tensorial de pleno derecho.


 -- Función: kdels (<L1>, <L2>)
     Función delta de Kronecker simetrizada, utilizada en algunos
     cálculos. Por ejemplo:


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) kdelta([1,2],[2,1]);
          (%o2)                                 - 1
          (%i3) kdels([1,2],[2,1]);
          (%o3)                                  1
          (%i4) ishow(kdelta([a,b],[c,d]))$
                                       c       d         d       c
          (%t4)                  kdelta  kdelta  - kdelta  kdelta
                                       a       b         a       b
          (%i4) ishow(kdels([a,b],[c,d]))$
                                       c       d         d       c
          (%t4)                  kdelta  kdelta  + kdelta  kdelta
                                       a       b         a       b


 -- Función: levi_civita (<L>)
     Es el tensor de permutación de Levi-Civita, el cual devuelve 1  si
     la lista <L> con una permutación par de enteros, -1 si es en una
     permutación impar y 0 si algunos de los índices de <L> están
     repetidos.


 -- Función: lc2kdt (<expr>)
     Simplifica expresiones que contengan el símbolo de Levi-Civita,
     convirtiéndolas en expresiones con la delta de Kronecker siempre
     que sea posible. La diferencia principal entre esta función y la
     simple evaluación del símbolo de Levi-Civita consiste en que de
     esta última forma se obtienen expresiones de Kronecker con índices
     numéricos, lo que impide simplificaciones ulteriores. La función
     `lc2kdt' evita este problema, dando resultados con son más fáciles
     de simplificar con `rename' o `contract'.


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) expr:ishow('levi_civita([],[i,j])
                           *'levi_civita([k,l],[])*a([j],[k]))$
                                            i j  k
          (%t2)                  levi_civita    a  levi_civita
                                                 j            k l
          (%i3) ishow(ev(expr,levi_civita))$
                                            i j  k       1 2
          (%t3)                       kdelta    a  kdelta
                                            1 2  j       k l
          (%i4) ishow(ev(%,kdelta))$
                       i       j         j       i   k
          (%t4) (kdelta  kdelta  - kdelta  kdelta ) a
                       1       2         1       2   j

                                         1       2         2       1
                                  (kdelta  kdelta  - kdelta  kdelta )
                                         k       l         k       l
          (%i5) ishow(lc2kdt(expr))$
                               k       i       j    k       j       i
          (%t5)               a  kdelta  kdelta  - a  kdelta  kdelta
                               j       k       l    j       k       l
          (%i6) ishow(contract(expand(%)))$
                                           i           i
          (%t6)                           a  - a kdelta
                                           l           l

     La función `lc2kdt' en ocasiones hace uso del tensor métrico. Si
     el tensor métrico no fue previamente definido con `imetric', se
     obtiene un mensaje de error.


          (%i7) expr:ishow('levi_civita([],[i,j])
                           *'levi_civita([],[k,l])*a([j,k],[]))$
                                           i j            k l
          (%t7)                 levi_civita    levi_civita    a
                                                               j k
          (%i8) ishow(lc2kdt(expr))$
          Maxima encountered a Lisp error:

           Error in $IMETRIC [or a callee]:
           $IMETRIC [or a callee] requires less than two arguments.

          Automatically continuing.
          To reenable the Lisp debugger set *debugger-hook* to nil.
          (%i9) imetric(g);
          (%o9)                                done
          (%i10) ishow(lc2kdt(expr))$
                   %3 i       k   %4 j       l     %3 i       l   %4 j
          (%t10) (g     kdelta   g     kdelta   - g     kdelta   g
                              %3             %4               %3
                        k
                  kdelta  ) a
                        %4   j k
          (%i11) ishow(contract(expand(%)))$
                                            l i    l i  j
          (%t11)                           a    - g    a
                                                        j


 -- Función: lc_l
     Regla de simplificación utilizada en expresiones que contienen el
     símbolo de `levi_civita' sin evaluar. Junto con  `lc_u', puede
     utilizarse para simplificar muchas expresiones de forma más
     eficiente que la evaluación de `levi_civita'. Por ejemplo:


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2)  el1:ishow('levi_civita([i,j,k],[])*a([],[i])*a([],[j]))$
                                       i  j
          (%t2)                       a  a  levi_civita
                                                       i j k
          (%i3) el2:ishow('levi_civita([],[i,j,k])*a([i])*a([j]))$
                                                 i j k
          (%t3)                       levi_civita      a  a
                                                        i  j
          (%i4) canform(contract(expand(applyb1(el1,lc_l,lc_u))));
          (%t4)                                  0
          (%i5) canform(contract(expand(applyb1(el2,lc_l,lc_u))));
          (%t5)                                  0


 -- Función: lc_u
     Regla de simplificación utilizada en expresiones que contienen el
     símbolo de `levi_civita' sin evaluar. Junto con  `lc_l', puede
     utilizarse para simplificar muchas expresiones de forma más
     eficiente que la evaluación de `levi_civita'. Véase `lc_l'.


 -- Función: canten (<expr>)
     Simplifica <expr> renombrando (véase `rename') y permutando
     índices mudos. La función `rename' se restringe a sumas de
     productos de tensores en los cuales no hay derivadas, por lo que
     está limitada y sólo debería utilizarse si `canform' no es capaz
     de de llevar a cabo la simplificación requerida.

     La función `canten' devuelve un resultado matemáticamente correcto
     sólo si su argumento es una expresión completamente simétrica
     respecto de sus índices. Por esta razón, `canten' devuelve un
     error si `allsym' no vale `true'.


 -- Función: concan (<expr>)
     Similar a `canten' pero también realiza la contracción de los
     índices.


25.2.2 Simetrías de tensores
----------------------------

 -- Variable opcional: allsym
     Valor por defecto: `false'

     Si vale `true' entonces todos los objetos indexados se consideran
     simétricos respecto de todos sus índices covariantes y
     contravariantes. Si vale `false' entonces no se tienen en cuenta
     ningún tipo de simetría para estos índices. Los índices de
     derivadas se consideran siempre simétricos, a menos que la
     variable `iframe_flag' valga `true'.


 -- Función: decsym (<tensor>, <m>, <n>, [<cov_1>, <cov_2>, ...],
          [<contr_1>, <contr_2>, ...])
     Declara propiedades de simetría para el <tensor> de <m> índices
     covariantes y <n> contravariantes. Los <cov_i> y <contr_i> son
     seudofunciones que expresan relaciones de simetría entre los
     índices covariantes y contravariantes, respectivamente. Éstos son
     de la forma `symoper(<index_1>, <index_2>,...)' donde `symoper' es
     uno de `sym', `anti' o `cyc' y los <index_i> son enteros que
     indican la posición del índice en el <tensor>.  Esto declarará a
     <tensor> simétrico, antisimétrico o cíclico respecto de <index_i>.
     La llamada `symoper(all)' indica que todos los índices cumplen la
     condición de simetría. Por ejemplo, dado un objeto `b' con 5
     índices covariantes,
     `decsym(b,5,3,[sym(1,2),anti(3,4)],[cyc(all)])' declara `b'
     simétrico en el primer y segundo índices covariantes,
     antisimétrico en su tercer y cuarto índices también covariantes y
     cíclico en todos sus índices contravariantes. Cualquiera de las
     listas de declaración de simetrías puede ser nula. La función que
     realiza las simplificaciones es `canform', como se ilustra en el
     siguiente ejemplo,


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) expr:contract(expand(a([i1,j1,k1],[])
                      *kdels([i,j,k],[i1,j1,k1])))$
          (%i3) ishow(expr)$
          (%t3)         a      + a      + a      + a      + a      + a
                         k j i    k i j    j k i    j i k    i k j    i j k
          (%i4) decsym(a,3,0,[sym(all)],[]);
          (%o4)                                done
          (%i5) ishow(canform(expr))$
          (%t5)                              6 a
                                                i j k
          (%i6) remsym(a,3,0);
          (%o6)                                done
          (%i7) decsym(a,3,0,[anti(all)],[]);
          (%o7)                                done
          (%i8) ishow(canform(expr))$
          (%t8)                                  0
          (%i9) remsym(a,3,0);
          (%o9)                                done
          (%i10) decsym(a,3,0,[cyc(all)],[]);
          (%o10)                               done
          (%i11) ishow(canform(expr))$
          (%t11)                        3 a      + 3 a
                                           i k j      i j k
          (%i12) dispsym(a,3,0);
          (%o12)                     [[cyc, [[1, 2, 3]], []]]


 -- Función: remsym (<tensor>, <m>, <n>)
     Borra todas las propiedades de simetría del <tensor> que tiene <m>
     índices covariantes y <n> contravariantes.

 -- Función: canform (<expr>)
 -- Función: canform (<expr>, <rename>)
     Simplifica <expr> renombrando índices mudos y reordenando todos
     los índices según las condiciones de simetría que se le hayan
     impuesto. Si `allsym' vale `true' entonces todos los índices se
     consideran simétricos, en otro caso se utilizará la información
     sobre simetrías suministrada por `decsym'. Los índices mudos se
     renombran de la misma manera que en la función `rename'. Cuando
     `canform' se aplica a una expresión grande el cálculo puede llevar
     mucho tiempo. Este tiempo se puede acortar llamando primero  a
     `rename'.  Véase también el ejemplo de la descripción de `decsym'.
     La función `canform' puede que no reduzca completamente una
     expresión a su forma más sencilla, pero en todo caso devolverá un
     resultado matemáticamente correcto.

     Si al parámetro opcional <rename> se le asigna el valor `false',
     no se renombrarán los índices mudos.

25.2.3 Cálculo tensorial indexado
---------------------------------

 -- Función: diff (<expr>, <v_1>, [<n_1>, [<v_2>, <n_2>] ...])
     Se trata de la función de Maxima para la diferenciación, ampliada
     para las necesidades del paquete `itensor'. Calcula la derivada de
     <expr> respecto de <v_1> <n_1> veces, respecto de <v_2> <n_2>
     veces, etc. Para el paquete de tensores,la función ha sido
     modificada de manera que <v_i> puedan ser enteros desde 1 hasta el
     valor que tome la variable `dim'. Esto permite que la derivación
     se pueda realizar con respecto del <v_i>-ésimo miembro de la lista
     `vect_coords'. Si `vect_coords' guarda una variable atómica,
     entonces esa variable será la que se utilice en la derivación. Con
     esto se hace posible la utilización de una lista con nombres de
     coordenadas subindicadas, como `x[1]', `x[2]', ...

     El paquete sobre tensores amplía las capacidades de `diff' con el
     fin de poder calcular derivadas respecto de variables indexadas.
     En particular, es posible derivar expresiones que contengan
     combinaciones del tensor métrico y sus derivadas respecto del
     tensor métrico y su primera y segunda derivadas.  Estos métodos
     son particularmente útiles cuando se consideran los formalismos
     lagrangianos de la teoría gravitatoria, permitiendo obtener el
     tensor de Einstein y las ecuaciones de campo a partir del principio
     de acción.

 -- Función: idiff (<expr>, <v_1>, [<n_1>, [<v_2>, <n_2>] ...])
     Diferenciación inicial. Al contrario que `diff', que deriva
     respecto de una variable independiente, `idiff' puede usarse para
     derivar respecto de una coordenada.  La función `idiff' también
     puede derivar el determinante del tensor métrico. Así, si
     `imetric' toma el valor `G' entonces `idiff(determinant(g),k)'
     devolverá `2*determinant(g)*ichr2([%i,k],[%i])' donde la índice
     mudo `%i' se escoge de forma apropiada.

 -- Función: liediff (<v>, <ten>)
     Calcula la derivada de Lie de la expresión tensorial <ten>
     respecto de campo vectorial <v>. La expresión <ten> debe ser
     cualquier tensor indexado; <v> debe ser el nombre (sin índices) de
     un campo vectorial. Por ejemplo:


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) ishow(liediff(v,a([i,j],[])*b([],[k],l)))$
                 k    %2            %2          %2
          (%t2) b   (v   a       + v   a     + v   a    )
                 ,l       i j,%2    ,j  i %2    ,i  %2 j

                                    %1  k        %1  k      %1  k
                                + (v   b      - b   v    + v   b   ) a
                                        ,%1 l    ,l  ,%1    ,l  ,%1   i j


 -- Función: rediff (<ten>)
     Calcula todas las instrucciones `idiff' que aparezcan en la
     expresión tensorial <ten>.


 -- Función: undiff (<expr>)
     Devuelve una expresión equivalente a <expr> pero con todas las
     derivadas de los objetos indexados reemplazadas por la forma
     nominal de la función `idiff'.

 -- Función: evundiff (<expr>)
     Equivale a `undiff' seguido de  `ev' y `rediff'.

     La razón de esta operación es evaluar de forma sencilla
     expresiones que no pueden ser directamente evaluadas en su forma
     derivada. Por ejemplo, lo siguiente provoca un error:

          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) icurvature([i,j,k],[l],m);
          Maxima encountered a Lisp error:

           Error in $ICURVATURE [or a callee]:
           $ICURVATURE [or a callee] requires less than three arguments.

          Automatically continuing.
          To reenable the Lisp debugger set *debugger-hook* to nil.

     Sin embargo, si `icurvature' se da en forma nominal, puede ser
     evaluada utilizando `evundiff':

          (%i3) ishow('icurvature([i,j,k],[l],m))$
                                                   l
          (%t3)                          icurvature
                                                   i j k,m
          (%i4) ishow(evundiff(%))$
                       l              l         %1           l           %1
          (%t4) - ichr2        - ichr2     ichr2      - ichr2       ichr2
                       i k,j m        %1 j      i k,m        %1 j,m      i k

                       l              l         %1           l           %1
                + ichr2        + ichr2     ichr2      + ichr2       ichr2
                       i j,k m        %1 k      i j,m        %1 k,m      i j

     Nota: en versiones antiguas de Maxima, las formas derivadas de los
     símbolos de Christoffel no se podían evaluar. Este fallo ha sido
     subsanado, de manera que `evundiff' ya no se necesita en
     expresiones como esta:

          (%i5) imetric(g);
          (%o5)                                done
          (%i6) ishow(ichr2([i,j],[k],l))$
                 k %3
                g     (g         - g         + g        )
                        j %3,i l    i j,%3 l    i %3,j l
          (%t6) -----------------------------------------
                                    2

                                   k %3
                                  g     (g       - g       + g      )
                                   ,l     j %3,i    i j,%3    i %3,j
                                + -----------------------------------
                                                   2


 -- Función: flush (<expr>, <tensor_1>, <tensor_2>, ...)
     Iguala a cero en la expresión <expr> todas las apariciones de
     <tensor_i> que no tengan índices de derivadas.


 -- Función: flushd (<expr>, <tensor_1>, <tensor_2>, ...)
     Iguala a cero en la expresión <expr> todas las apariciones de
     <tensor_i> que tengan índices de derivadas


 -- Función: flushnd (<expr>, <tensor>, <n>)
     Iguala a cero en <expr> todas las apariciones del objeto
     diferenciado  <tensor> que tenga <n> o más índices de derivadas,
     como demuestra el siguiente ejemplo:


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) ishow(a([i],[J,r],k,r)+a([i],[j,r,s],k,r,s))$
                                          J r      j r s
          (%t2)                          a      + a
                                          i,k r    i,k r s
          (%i3) ishow(flushnd(%,a,3))$
                                               J r
          (%t3)                               a
                                               i,k r

 -- Función: coord (<tensor_1>, <tensor_2>, ...)
     Le da a <tensor_i> la propiedad de diferenciación coordenada, que
     la derivada del vector contravariante cuyo nombre es uno de los
     <tensor_i> es igual a la delta de Kronecker.  Por ejemplo, si se
     ha hecho `coord(x)' entonces  `idiff(x([],[i]),j)' da
     `kdelta([i],[j])'. La llamada `coord' devuelve una lista de todos
     los objetos indexados con esta propiedad.


 -- Función: remcoord (<tensor_1>, <tensor_2>, ...)
 -- Función: remcoord (all)
     Borra todas las propiedades de diferenciación coordenada de
     `tensor_i' que hayan sido establecidas por la función `coord'. La
     llamada `remcoord(all)' borra esta propiedad de todos los objetos
     indexados.


 -- Función: makebox (<expr>)
     Muestra <expr> de la misma manera que lo hace `show'; sin embargo,
     cualquier tensor de d'Alembert que aparezca en  <expr> estará
     indicado por `[]'.  Por ejemplo, `[]p([m],[n])' representa
     `g([],[i,j])*p([m],[n],i,j)'.


 -- Función: conmetderiv (<expr>, <tensor>)
     Simplifica expresiones que contengan derivadas ordinarias tanto de
     las formas covariantes como contravariantes del tensor métrico.
     Por ejemplo,  `conmetderiv' puede relacionar la derivada del
     tensor métrico contravariante con los símbolos de Christoffel,
     como se ve en el ejemplo:


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) ishow(g([],[a,b],c))$
                                                a b
          (%t2)                                g
                                                ,c
          (%i3) ishow(conmetderiv(%,g))$
                                   %1 b      a       %1 a      b
          (%t3)                 - g     ichr2     - g     ichr2
                                             %1 c              %1 c

 -- Función: simpmetderiv (<expr>)
 -- Función: simpmetderiv (<expr>[, <stop>])
     Simplifica expresiones que contienen productos de las derivadas
     del tensor métrico. La función `simpmetderiv' reconoce dos
     identidades:


             ab        ab           ab                 a
            g   g   + g   g     = (g   g  )   = (kdelta )   = 0
             ,d  bc        bc,d         bc ,d          c ,d

     de donde


             ab          ab
            g   g   = - g   g
             ,d  bc          bc,d

     y


            ab          ab
           g   g     = g   g
            ,j  ab,i    ,i  ab,j

     que se deduce de las simetrías de los símbolos de Christoffel.

     La función `simpmetderiv' tiene un argumento opcional, el cual
     detiene la función después de la primera sustitución exitosa en un
     expresión producto. La función `simpmetderiv' también hace uso de
     la variable global <flipflag> que determina cómo aplicar una
     ordenación "canónica" a los índices de los productos.

     Todo esto se puede utilizar para conseguir buenas simplificaciones
     que serían difíciles o imposibles de conseguir, lo que se
     demuestra en el siguiente ejemplo, que utiliza explícitamente las
     simplificaciones parciales de `simpmetderiv':


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) imetric(g);
          (%o2)                                done
          (%i3) ishow(g([],[a,b])*g([],[b,c])*g([a,b],[],d)*g([b,c],[],e))$
                                       a b  b c
          (%t3)                       g    g    g      g
                                                 a b,d  b c,e
          (%i4) ishow(canform(%))$

          errexp1 has improper indices
           -- an error.  Quitting.  To debug this try debugmode(true);
          (%i5) ishow(simpmetderiv(%))$
                                       a b  b c
          (%t5)                       g    g    g      g
                                                 a b,d  b c,e
          (%i6) flipflag:not flipflag;
          (%o6)                                true
          (%i7) ishow(simpmetderiv(%th(2)))$
                                         a b  b c
          (%t7)                         g    g    g    g
                                         ,d   ,e   a b  b c
          (%i8) flipflag:not flipflag;
          (%o8)                                false
          (%i9) ishow(simpmetderiv(%th(2),stop))$
                                         a b  b c
          (%t9)                       - g    g    g      g
                                              ,e   a b,d  b c
          (%i10) ishow(contract(%))$
                                              b c
          (%t10)                           - g    g
                                              ,e   c b,d

     Véase también `weyl.dem' para un ejemplo que utiliza
     `simpmetderiv' y `conmetderiv' para simplificar contracciones del
     tensor de Weyl.


 -- Función: flush1deriv (<expr>, <tensor>)
     Iguala a cero en `expr' todas las apariciones de `tensor' que
     tengan exactamente un índice derivado.


25.2.4 Tensores en espacios curvos
----------------------------------

 -- Función: imetric (<g>)
 -- Variable de sistema: imetric
     Especifica la métrica haciendo la asignación de la variable
     `imetric:<g>', además las propiedades de contracción de la métrica
     <g> se fijan ejecutando las instrucciones `defcon(<g>),
     defcon(<g>,<g>,kdelta)'. La variable `imetric', a la que no se le
     asigna ningún valor por defecto, tiene el valor de la métrica que
     se le haya asignado con la instrucción `imetric(<g>)'.


 -- Función: idim (<n>)
     Establece las dimensiones de la métrica. También inicializa las
     propiedades de antisimetría de los símbolos de Levi-Civita para la
     dimensión dada.


 -- Función: ichr1 ([<i>, <j>, <k>])
     Devuelve el símbolo de Christoffel de primera especie dado por la
     definición
                 (g      + g      - g     )/2 .
                   ik,j     jk,i     ij,k

     Para evaluar los símbolos de Christoffel de una métrica
     determinada, a la variable  `imetric' hay que asignarle un nombre
     como en el ejemplo de la descripción de `chr2'.


 -- Función: ichr2 ([<i>, <j>], [<k>])
     Devuelve el símbolo de Christoffel de segunda especie dado por la
     definición
                                 ks
             ichr2([i,j],[k]) = g    (g      + g      - g     )/2
                                       is,j     js,i     ij,s

 -- Función: icurvature ([<i>, <j>, <k>], [<h>])
     Devuelve el tensor de curvatura de Riemann en términos de los
     símbolos de Christoffel de segunda especie (`ichr2').  Se utiliza
     la siguiente notación:
                         h             h            h         %1         h
               icurvature     = - ichr2      - ichr2     ichr2    + ichr2
                         i j k         i k,j        %1 j      i k        i j,k
                                         h          %1
                                  + ichr2      ichr2
                                         %1 k       i j

 -- Función: covdiff (<expr>, <v_1>, <v_2>, ...)
     Devuelve la derivada covariante de <expr> respecto de las
     variables  <v_i> en términos de los símbolos de Christoffel de
     segunda especie (`ichr2'). Para evaluarlos debe hacerse
     `ev(<expr>,ichr2)'.


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) entertensor()$
          Enter tensor name: a;
          Enter a list of the covariant indices: [i,j];
          Enter a list of the contravariant indices: [k];
          Enter a list of the derivative indices: [];
                                                k
          (%t2)                                a
                                                i j
          (%i3) ishow(covdiff(%,s))$
                       k         %1     k         %1     k
          (%t3)     - a     ichr2    - a     ichr2    + a
                       i %1      j s    %1 j      i s    i j,s

                       k     %1
                + ichr2     a
                       %1 s  i j
          (%i4) imetric:g;
          (%o4)                                  g
          (%i5) ishow(ev(%th(2),ichr2))$
                   %1 %4  k
                  g      a     (g       - g       + g      )
                          i %1   s %4,j    j s,%4    j %4,s
          (%t5) - ------------------------------------------
                                      2
              %1 %3  k
             g      a     (g       - g       + g      )
                     %1 j   s %3,i    i s,%3    i %3,s
           - ------------------------------------------
                                 2
              k %2  %1
             g     a    (g        - g        + g       )
                    i j   s %2,%1    %1 s,%2    %1 %2,s     k
           + ------------------------------------------- + a
                                  2                         i j,s


 -- Función: lorentz_gauge (<expr>)
     Impone la condición de Lorentz sustituyendo por 0 todos los
     objetos indexados de <expr> que tengan un índice derivado idéntico
     a un índice contravariante.


 -- Función: igeodesic_coords (<expr>, <nombre>)
     Elimina los símbolos no diferenciados de Christoffel y las
     primeras derivadas del tensor métrico de <expr>. El argumento
     <nombre> de la función `igeodesic_coords' se refiere a la métrica
     <nombre> si aparece en <expr>, mientras que los coeficientes de
     conexión deben tener los nombres  `ichr1' y/o `ichr2'. El
     siguiente ejemplo hace la verificación de la identidad cíclica
     satisfecha por el tensor de curvatura de Riemann haciendo uso de
     la función `igeodesic_coords'.


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) ishow(icurvature([r,s,t],[u]))$
                       u            u         %1         u
          (%t2) - ichr2      - ichr2     ichr2    + ichr2
                       r t,s        %1 s      r t        r s,t

                                                        u         %1
                                                 + ichr2     ichr2
                                                        %1 t      r s
          (%i3) ishow(igeodesic_coords(%,ichr2))$
                                           u            u
          (%t3)                       ichr2      - ichr2
                                           r s,t        r t,s
          (%i4) ishow(igeodesic_coords(icurvature([r,s,t],[u]),ichr2)+
                      igeodesic_coords(icurvature([s,t,r],[u]),ichr2)+
                      igeodesic_coords(icurvature([t,r,s],[u]),ichr2))$
                       u            u            u            u
          (%t4) - ichr2      + ichr2      + ichr2      - ichr2
                       t s,r        t r,s        s t,r        s r,t

                                                       u            u
                                                - ichr2      + ichr2
                                                       r t,s        r s,t
          (%i5) canform(%);
          (%o5)                                  0


25.2.5 Sistemas de referencia móviles
-------------------------------------

Maxima puede hacer cálculos utilizando sistemas de referencia móviles,
los cuales pueden ser ortonormales o cualesquiera otros.

Para utilizar sistemas de referencia, primero se debe asignar a la
variable `iframe_flag' el valor `true'. Con esto se hace que los
símbolos de Christoffel, `ichr1' y `ichr2', sean reemplazados por los
coeficientes `icc1' y `icc2' en los cálculos, cambiando así el
comportamiento de `covdiff' y `icurvature'.

El sistema de referencia se define con dos tensores: el campo del
sistema de referencia inverso (`ifri', la base dual tetrad) y la
métrica del sistema de referencia `ifg'. La métrica del sistema de
referencia es la matriz identidad en los sistemas de referencia
ortonormales, o la métrica de Lorentz en sistemas de referencia
ortonormales en el espacio-tiempo de Minkowski.  El campo del sistema
de referencia inverso define la base del sistema de referencia con
vectores unitarios. Las propiedades contractivas se definen para el
campo y la métrica del sistema de referencia.

Si `iframe_flag' vale `true', muchas expresiones de `itensor' utilizan
la métrica `ifg' en lugar de la métrica definida por `imetric' para
incrementar y reducir índices.

IMPORTANTE: Asignando a la variable `iframe_flag' el valor `true' NO
deshace las propiedades contractivas de una métrica establecidas con
una llamada a `defcon' o a `imetric'. Si se utiliza el campo del
sistema de referencia, es mejor definir la métrica asignando su nombre
a la variable  `imetric' y NO hacer una llamada a la función `imetric'.

Maxima utiliza estos dos tensores para definir los coeficientes del
sistema de referencia: `ifc1' y and `ifc2', los cuales forman parte de
los coeficientes de conexión `icc1' y `icc2', tal como demuestra el
siguiente ejemplo:


     (%i1) load(itensor);
     (%o1)      /share/tensor/itensor.lisp
     (%i2) iframe_flag:true;
     (%o2)                                true
     (%i3) ishow(covdiff(v([],[i]),j))$
                                    i        i     %1
     (%t3)                         v   + icc2     v
                                    ,j       %1 j
     (%i4) ishow(ev(%,icc2))$
                                    %1     i       i
     (%t4)                         v   ifc2     + v
                                           %1 j    ,j
     (%i5) ishow(ev(%,ifc2))$
                               %1    i %2                i
     (%t5)                    v   ifg     ifc1        + v
                                              %1 j %2    ,j
     (%i6) ishow(ev(%,ifc1))$
                 %1    i %2
                v   ifg     (ifb        - ifb        + ifb       )
                                j %2 %1      %2 %1 j      %1 j %2     i
     (%t6)      -------------------------------------------------- + v
                                        2                             ,j
     (%i7) ishow(ifb([a,b,c]))$
                                                        %3    %4
     (%t7)               (ifri        - ifri       ) ifr   ifr
                              a %3,%4       a %4,%3     b     c

Se utiliza un método alternativo  para calcular el sistema de
referencia `ifb' si la variable `iframe_bracket_form' vale `false':


     (%i8) block([iframe_bracket_form:false],ishow(ifb([a,b,c])))$
                                     %6    %5        %5      %6
     (%t8)              ifri     (ifr   ifr     - ifr     ifr  )
                            a %5     b     c,%6      b,%6    c

 -- Variable: ifb
     Es el sistema de referencia soporte. La contribución de la métrica
     del campo a los coeficientes de conexión se expresa utilizando:


                    - ifb      + ifb      + ifb
                         c a b      b c a      a b c
          ifc1    = --------------------------------
              abc                  2

     El sistema de referencia soporte se define en términos del campo y
     la métrica del sistema de referencia. Se utilizan dos métodos
     alternativos dependiendo del valor de `frame_bracket_form'. Si
     vale `true' (que es el valor por defecto) o si `itorsion_flag'
     vale `true':


                    d      e                                      f
          ifb =  ifr    ifr   (ifri      - ifri      - ifri    itr   )
             abc    b      c       a d,e       a e,d       a f    d e

     En otro caso:


                       e      d        d      e
          ifb    = (ifr    ifr    - ifr    ifr   ) ifri
             abc       b      c,e      b,e    c        a d


 -- Variable: icc1
     Coeficientes de conexión de primera especie. Se definen en
     `itensor' como


          icc1    = ichr1    - ikt1    - inmc1
              abc        abc       abc        abc

     En esta expresión, si `iframe_flag' vale `true', el símbolo de
     Christoffel `ichr1' se reemplaza por el coeficiente de conexión
     del sistema de referencia `ifc1'. Si `itorsion_flag' vale `false',
     `ikt1' será omitido. También se omite si se utiliza una base, ya
     que la torsión ya está calculada como parte del sistema de
     referencia.


 -- Variable: icc2
     Coeficientes de conexión de segunda especie. Se definen en
     `itensor' como


              c         c        c         c
          icc2   = ichr2   - ikt2   - inmc2
              ab        ab       ab        ab

     En esta expresión, si la variable `iframe_flag' vale `true', el
     símbolo de Christoffel `ichr2' se reemplaza por el coeficiente de
     conexión del sistema de referencia `ifc2'. Si `itorsion_flag' vale
     `false', `ikt2' se omite. También se omite si se utiliza una base
     de referncia. Por último, si  `inonmet_flag' vale `false', se
     omite `inmc2'.


 -- Variable: ifc1
     Coeficiente del sistema de referencia de primera especie, también
     conocido como coeficientes de rotación de Ricci. Este tensor
     represnta la contribución de la métrica del sistema de referencia
     al coeficiente de conexión de primera especie, definido como


                    - ifb      + ifb      + ifb
                         c a b      b c a      a b c
          ifc1    = --------------------------------
              abc                   2


 -- Variable: ifc2
     Coeficiente del sistema de referencia de segunda especie. Este
     tensor representa la contribución de la métrica del sistema de
     referencia al coeficiente de conexión de segunda especie, definido
     como


              c       cd
          ifc2   = ifg   ifc1
              ab             abd


 -- Variable: ifr
     El campo del sistema de referencia. Se contrae con el campo
     inverso `ifri' para formar la métrica del sistema de referencia,
     `ifg'.


 -- Variable: ifri
     Campo inverso del sistema de referencia. Especifica la base del
     sistema de referencia (vectores de la base dual).


 -- Variable: ifg
     La métrica del sistema de referencia. Su valor por defecto es
     `kdelta', pero puede cambiarse utilizando `components'.


 -- Variable: ifgi
     La métrica inversa del sistema de referencia. Se contrae con la
     métrica `ifg' para dar `kdelta'.


 -- Variable opcional: iframe_bracket_form
     Valor por defecto: `true'

     Especifica cómo se calcula `ifb'.


25.2.6 Torsión y no metricidad
------------------------------

Maxima trabaja con conceptos como la torsión y la no metricidad. Cuando
la variable `itorsion_flag' vale `true', la contribución de la torsión
se añade a los coeficientes de conexión. También se añaden las
componentes de no metricidad cuando `inonmet_flag' vale  `true'.

 -- Variable: inm
     Vector de no metricidad. La no metricidad conforme se define a
     partir de la derivada covariante del tensor métrico. La derivada
     covariante del tensor métrico, que normalmente es nula, se
     calcula, cuando `inonmet_flag' vale `true', como

          g     =- g  inm
           ij;k     ij   k


 -- Variable: inmc1
     Permutación covariante de las componentes del vector de no
     metricidad. Se define como


                     g   inm  - inm  g   - g   inm
                      ab    c      a  bc    ac    b
          inmc1    = ------------------------------
               abc                 2

     (Sustitúyase `g' por `ifg' si se utiliza una métrica para el
     sistema de referencia.)


 -- Variable: inmc2
     Permutación contravariante de las componentes del vector de no
     metricidad. Se utiliza en los coeficientes de conexión si
     `inonmet_flag' vale `true'. Se define como


                                c         c         cd
                    -inm  kdelta  - kdelta  inm  + g   inm  g
               c        a       b         a    b          d  ab
          inmc2   = -------------------------------------------
               ab                        2

     (Sustitúyase `g' por `ifg' si se utiliza una métrica para el
     sistema de referencia.)


 -- Variable: ikt1
     Permutación covariante del tensor de permutación, también conocido
     como contorsión. Se define como


                            d           d       d
                    -g   itr  - g    itr   - itr   g
                      ad    cb    bd    ca      ab  cd
          ikt1    = ----------------------------------
              abc                   2

     (Sustitúyase `g' por `ifg' si se utiliza una métrica para el
     sistema de referencia.)


 -- Variable: ikt2
     Permutación contravariante del tensor de permutación, también
     conocido como contorsión. Se define como


              c     cd
          ikt2   = g   ikt1
              ab           abd

     (Sustitúyase `g' por `ifg' si se utiliza una métrica para el
     sistema de referencia.)


 -- Variable: itr
     Tensor de torsión. Para una métrica con torsión, la diferenciación
     covariante iterada de una función escalar no conmuta, tal como
     demuestra el siguiente ejemplo:


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) imetric:g;
          (%o2)                                  g
          (%i3) covdiff(covdiff(f([],[]),i),j)
                   -covdiff(covdiff(f([],[]),j),i)$
          (%i4) ishow(%)$
                                             %4              %2
          (%t4)                    f    ichr2    - f    ichr2
                                    ,%4      j i    ,%2      i j
          (%i5) canform(%);
          (%o5)                                  0
          (%i6) itorsion_flag:true;
          (%o6)                                true
          (%i7) covdiff(covdiff(f([],[]),i),j)
                  -covdiff(covdiff(f([],[]),j),i)$
          (%i8) ishow(%)$
                                     %8             %6
          (%t8)             f    icc2    - f    icc2    - f     + f
                             ,%8     j i    ,%6     i j    ,j i    ,i j
          (%i9) ishow(canform(%))$
                                             %1             %1
          (%t9)                     f    icc2    - f    icc2
                                     ,%1     j i    ,%1     i j
          (%i10) ishow(canform(ev(%,icc2)))$
                                             %1             %1
          (%t10)                    f    ikt2    - f    ikt2
                                     ,%1     i j    ,%1     j i
          (%i11) ishow(canform(ev(%,ikt2)))$
                                %2 %1                    %2 %1
          (%t11)          f    g      ikt1       - f    g      ikt1
                           ,%2            i j %1    ,%2            j i %1
          (%i12) ishow(factor(canform(rename(expand(ev(%,ikt1))))))$
                                     %3 %2            %1       %1
                               f    g      g      (itr    - itr   )
                                ,%3         %2 %1     j i      i j
          (%t12)               ------------------------------------
                                                2
          (%i13) decsym(itr,2,1,[anti(all)],[]);
          (%o13)                               done
          (%i14) defcon(g,g,kdelta);
          (%o14)                               done
          (%i15) subst(g,nounify(g),%th(3))$
          (%i16) ishow(canform(contract(%)))$
                                                     %1
          (%t16)                           - f    itr
                                              ,%1    i j


25.2.7 Álgebra exterior
-----------------------

Con el paquete `itensor' se pueden realizar operaciones en campos
tensoriales covariantes antisimétricos. Un campo tensorial totalmente
antisimétrrico de rango (0,L) se corresponde con una L-forma
diferencial. Sobre estos objetos se define una operación que se llama
producto exterior.

Desafortunadamente no hay consenso entre los autores a la hora de
definir el producto exterior. Algunos autores prefieren una definición
que se corresponde con la noción de antisimetrización, con lo que el
producto externo de dos campos vectoriales se definiría como

                 a a  - a a
                  i j    j i
      a  /\ a  = -----------
       i     j        2

De forma más general, el producto de una p-forma por una q-forma se
definiría como

                            1     k1..kp l1..lq
     A       /\ B       = ------ D              A       B
      i1..ip     j1..jq   (p+q)!  i1..ip j1..jq  k1..kp  l1..lq

donde `D' es la delta de Kronecker.

Otros autores, sin embargo, prefieren una definición "geométrica" que
se corresponde con la noción del elemento de volumen,

     a  /\ a  = a a  - a a
      i     j    i j    j i

y, en el caso general,

                            1    k1..kp l1..lq
     A       /\ B       = ----- D              A       B
      i1..ip     j1..jq   p! q!  i1..ip j1..jq  k1..kp  l1..lq

Puesto que `itensor' un paquete de álgebra tensorial, la primera de
estas dos definiciones parece la más natural. Sin embargo, muchas
aplicaciones hacen uso de la segunda definición. Para resolver el
dilema, se define una variable que controla el comportamiento del
producto exteriort: si `igeowedge_flag' vale `false' (el valor por
defecto), se utiliza la primera definición, si vale `true', la segunda.

 -- Operador: ~
     El operador del producto exterior se representa por el símbolo
     `~'. Este es un operador binario. Sus argumentos deben ser
     expresiones que tengan escalares, tensores covariantes de rango
     uno o tensores covariantes de rango `l' que hayan sido declarados
     antisimétricos en todos los índices covariantes.

     El comportamiento del operador del producto exterior se controla
     con la variable `igeowedge_flag', como en el ejemplo siguiente:

          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) ishow(a([i])~b([j]))$
                                           a  b  - b  a
                                            i  j    i  j
          (%t2)                            -------------
                                                 2
          (%i3) decsym(a,2,0,[anti(all)],[]);
          (%o3)                                done
          (%i4) ishow(a([i,j])~b([k]))$
                                    a    b  + b  a    - a    b
                                     i j  k    i  j k    i k  j
          (%t4)                     ---------------------------
                                                 3
          (%i5) igeowedge_flag:true;
          (%o5)                                true
          (%i6) ishow(a([i])~b([j]))$
          (%t6)                            a  b  - b  a
                                            i  j    i  j
          (%i7) ishow(a([i,j])~b([k]))$
          (%t7)                     a    b  + b  a    - a    b
                                     i j  k    i  j k    i k  j


 -- Operador: |
     La barra vertical `|' representa la operación "contracción con un
     vector". Cuando un tensor covariante totalmente antisimétrico se
     contrae con un vector contravariante, el resultado no depende del
     índice utilizado para la contracción. Así, es posible definir la
     operación de contracción de forma que no se haga referencia al
     índice.

     En el paquete `itensor' la contracción con un vector se realiza
     siempre respecto del primer índice de la ordenación literal.
     Ejemplo:

          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) decsym(a,2,0,[anti(all)],[]);
          (%o2)                                done
          (%i3) ishow(a([i,j],[])|v)$
                                              %1
          (%t3)                              v   a
                                                  %1 j
          (%i4) ishow(a([j,i],[])|v)$
                                               %1
          (%t4)                             - v   a
                                                   %1 j

     Nótese que es primordial que los tensores utilizados junto con el
     operador `|' se declaren totalmente antisimétricos en sus  índices
     covariantes. De no ser así, se pueden obtener resultados
     incorrectos.


 -- Función: extdiff (<expr>, <i>)
     Calcula la derivada exterior de <expr> con respecto del índice
     <i>. La derivada exterior se define formalmente como el producto
     exterior del operador de la derivada parcial y una forma
     diferencial. Por lo tanto, esta operación también se ve afectada
     por el valor que tome la variable `igeowedge_flag'. Ejemplo:

          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) ishow(extdiff(v([i]),j))$
                                            v    - v
                                             j,i    i,j
          (%t2)                             -----------
                                                 2
          (%i3) decsym(a,2,0,[anti(all)],[]);
          (%o3)                                done
          (%i4) ishow(extdiff(a([i,j]),k))$
                                     a      - a      + a
                                      j k,i    i k,j    i j,k
          (%t4)                      ------------------------
                                                3
          (%i5) igeowedge_flag:true;
          (%o5)                                true
          (%i6) ishow(extdiff(v([i]),j))$
          (%t6)                             v    - v
                                             j,i    i,j
          (%i7) ishow(extdiff(a([i,j]),k))$
          (%t7)                    - (a      - a      + a     )
                                       k j,i    k i,j    j i,k


 -- Función: hodge (<expr>)
     Calcula el dual de Hodge  <expr>. Por ejemplo:


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) imetric(g);
          (%o2)                            done
          (%i3) idim(4);
          (%o3)                            done
          (%i4) icounter:100;
          (%o4)                             100
          (%i5) decsym(A,3,0,[anti(all)],[])$

          (%i6) ishow(A([i,j,k],[]))$
          (%t6)                           A
                                           i j k
          (%i7) ishow(canform(hodge(%)))$
                                    %1 %2 %3 %4
                         levi_civita            g        A
                                                 %1 %102  %2 %3 %4
          (%t7)          -----------------------------------------
                                             6
          (%i8) ishow(canform(hodge(%)))$
                           %1 %2 %3 %8            %4 %5 %6 %7
          (%t8) levi_civita            levi_civita            g
                                                               %1 %106
                                       g        g        g      A         /6
                                        %2 %107  %3 %108  %4 %8  %5 %6 %7
          (%i9) lc2kdt(%)$

          (%i10) %,kdelta$

          (%i11) ishow(canform(contract(expand(%))))$
          (%t11)                     - A
                                        %106 %107 %108


 -- Variable opcional: igeowedge_flag
     Valor por defecto: `false'

     Controla el comportamiento del producto exterior y de la derivada
     exterior. Cuando vale `false', la noción de formas diferenciales
     se corresponde con el de campo tensorial covariante totalmente
     antisimétrico. Cuando vale `true', las formas diferenciales se
     corresponden con la idea de elemento de volumen.


25.2.8 Exportando expresiones en TeX
------------------------------------

El paquete `itensor' dispone de soporte limitado para exportar
expresiones con tensores a TeX. Puesto que las expresiones de `itensor'
son llamadas a funciones, puede que la instrucción habitual en Maxima,
`tex', no devuleva los resultados esperados. Se puede utlizar el
comando `tentex', que tratará de traducir expresiones tensoriales a
objetos de TeX correctamente indexados.

 -- Función: tentex (<expr>)
     Para utilizar la función `tentex', primero se debe cargar
     `tentex', tal como muestra el siguiente ejemplo:


          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) load(tentex);
          (%o2)       /share/tensor/tentex.lisp
          (%i3) idummyx:m;
          (%o3)                                  m
          (%i4) ishow(icurvature([j,k,l],[i]))$
                      m1       i           m1       i           i
          (%t4)  ichr2    ichr2     - ichr2    ichr2     - ichr2
                      j k      m1 l        j l      m1 k        j l,k

                                                                i
                                                         + ichr2
                                                                j k,l
          (%i5) tentex(%)$
          $$\Gamma_{j\,k}^{m_1}\,\Gamma_{l\,m_1}^{i}-\Gamma_{j\,l}^{m_1}\,
           \Gamma_{k\,m_1}^{i}-\Gamma_{j\,l,k}^{i}+\Gamma_{j\,k,l}^{i}$$

     Nótese la asignación de la variable `idummyx' para evitar la
     aparición del símbolo del porcentaje en la expresión en TeX, que
     puede dar errores de compilación.

     Téngase en cuenta que esta versión de la función `tentex' es
     experimental.


25.2.9 Interactuando con ctensor
--------------------------------

El paquete `itensor' genera código Maxima que luego puede ser ejecutado
en el contexto del paquete `ctensor'. La función que se encarga de esta
tarea es `ic_convert'.

 -- Function: ic_convert (<eqn>)
     Convierte la ecuación <eqn> del entorno `itensor' a una sentencia
     de asignación de `ctensor'. Sumas implícitas sobre índices mudos
     se hacen explícitas mientras que objetos indexados se transforman
     en arreglos (los subíndices de los arreglos se ordenan poniendo
     primero los covariantes seguidos de los contravariantes. La
     derivada de un objeto indexado se reemplazará por por la forma
     nominal de `diff' tomada con respecto a `ct_coords' con el
     subíndice correspondiente al índice derivado. Los símbolos de
     Christoffel `ichr1'  `ichr2' se traducen a `lcs' y `mcs',
     respectivamente. Además, se añaden bucles `do' para la sumación de
     todos los índices libres, de manera que la sentencia traducida
     pueda ser evaluada haciendo simplemente `ev'. Los siguientes
     ejemplos muestran las funcionalidades de esta función.

          (%i1) load(itensor);
          (%o1)      /share/tensor/itensor.lisp
          (%i2) eqn:ishow(t([i,j],[k])=f([],[])*g([l,m],[])*a([],[m],j)
                *b([i],[l,k]))$
                                       k        m   l k
          (%t2)                       t    = f a   b    g
                                       i j      ,j  i    l m
          (%i3) ic_convert(eqn);
          (%o3) for i thru dim do (for j thru dim do (
                 for k thru dim do
                  t        : f sum(sum(diff(a , ct_coords ) b
                   i, j, k                   m           j   i, l, k

           g    , l, 1, dim), m, 1, dim)))
            l, m
          (%i4) imetric(g);
          (%o4)                                done
          (%i5) metricconvert:true;
          (%o5)                                true
          (%i6) ic_convert(eqn);
          (%o6) for i thru dim do (for j thru dim do (
                 for k thru dim do
                  t        : f sum(sum(diff(a , ct_coords ) b
                   i, j, k                   m           j   i, l, k

           lg    , l, 1, dim), m, 1, dim)))
             l, m


25.2.10 Palabras reservadas
---------------------------

Las siguientes palabras son utilizadas por el paquete `itensor'
internamente, por lo que no deberían ser modificadas por el usuario:

       Palabra    Comentarios
       ------------------------------------------
       indices2() Versión interna de indices()
       conti      Lista los índices contravariantes
       covi       Lista los índices covariantes
       deri       Lista los índices de derivadas
       name       Devuelve el nombre de un objeto indexado
       concan
       irpmon
       lc0
       _lc2kdt0
       _lcprod
       _extlc


File: maxima.info,  Node: ctensor,  Next: atensor,  Prev: itensor,  Up: Top

26 ctensor
**********

* Menu:

* Introducción a ctensor::
* Funciones y variables para ctensor::


File: maxima.info,  Node: Introducción a ctensor,  Next: Funciones y variables para ctensor,  Prev: ctensor,  Up: ctensor

26.1 Introducción a ctensor
===========================

El paquete `ctensor' dispone de herramientas para manipular componentes
de tensores. Para poder hacer uso de `ctensor' es necesario cargarlo
previamente en memoria ejecutando  `load(ctensor)'. Para comenzar una
sesión interactiva con `ctensor', ejecutar la función `csetup()'.
Primero se le pregunta al usuario la dimensión de la variedad. Si la
dimensión es 2, 3 o 4, entonces la lista de coordenadas será por
defecto  `[x,y]', `[x,y,z]' o `[x,y,z,t]', respectivamente. Estos
nombres pueden cambiarse asignando una nueva lista de coordenadas a la
variable `ct_coords' (que se describe más abajo), siendo el usuario
advertido sobre este particular.  Se debe tener cuidado en evitar que
los nombres de las coordenadas entren en conflicto con los nombres de
otros objetos en Maxima.

A continuación, el usuario introduce la métrica, bien directamente, o
desde un fichero especificando su posición ordinal.  La métrica se
almacena en la matriz `lg'. Por último, la métrica inversa se obtiene y
almacena en la matriz `ug'. También se dispone de la opción de efectuar
todos los cálculos en serie de potencias.

Se desarrolla a continuación un ejemplo para la métrica estática,
esférica y simétrica, en coordenadas estándar, que se aplicará
posteriormente al problema de derivar las ecuaciones de vacío de
Einstein (de las que se obtiene la solución de Schwarzschild). Muchas
de las funciones de `ctensor' se mostrarán  en los ejemplos para la
métrica estándar.

     (%i1) load(ctensor);
     (%o1)      /share/tensor/ctensor.mac
     (%i2) csetup();
     Enter the dimension of the coordinate system:
     4;
     Do you wish to change the coordinate names?
     n;
     Do you want to
     1. Enter a new metric?

     2. Enter a metric from a file?

     3. Approximate a metric with a Taylor series?
     1;

     Is the matrix  1. Diagonal  2. Symmetric  3. Antisymmetric  4. General
     Answer 1, 2, 3 or 4
     1;
     Row 1 Column 1:
     a;
     Row 2 Column 2:
     x^2;
     Row 3 Column 3:
     x^2*sin(y)^2;
     Row 4 Column 4:
     -d;

     Matrix entered.
     Enter functional dependencies with the DEPENDS function or 'N' if none
     depends([a,d],x);
     Do you wish to see the metric?
     y;
                               [ a  0       0        0  ]
                               [                        ]
                               [     2                  ]
                               [ 0  x       0        0  ]
                               [                        ]
                               [         2    2         ]
                               [ 0  0   x  sin (y)   0  ]
                               [                        ]
                               [ 0  0       0       - d ]
     (%o2)                                done
     (%i3) christof(mcs);
                                                 a
                                                  x
     (%t3)                          mcs        = ---
                                       1, 1, 1   2 a

                                                  1
     (%t4)                           mcs        = -
                                        1, 2, 2   x

                                                  1
     (%t5)                           mcs        = -
                                        1, 3, 3   x

                                                 d
                                                  x
     (%t6)                          mcs        = ---
                                       1, 4, 4   2 d

                                                   x
     (%t7)                          mcs        = - -
                                       2, 2, 1     a

                                                cos(y)
     (%t8)                         mcs        = ------
                                      2, 3, 3   sin(y)

                                                    2
                                               x sin (y)
     (%t9)                      mcs        = - ---------
                                   3, 3, 1         a

     (%t10)                   mcs        = - cos(y) sin(y)
                                 3, 3, 2

                                                 d
                                                  x
     (%t11)                         mcs        = ---
                                       4, 4, 1   2 a
     (%o11)                               done


File: maxima.info,  Node: Funciones y variables para ctensor,  Prev: Introducción a ctensor,  Up: ctensor

26.2 Funciones y variables para ctensor
=======================================

26.2.1 Inicialización y preparación
-----------------------------------

 -- Función: csetup ()
     Es la función del paquete `ctensor' que inicializa el paquete y
     permite al usuario introducir una métrica de forma interactiva.
     Véase `ctensor' para más detalles.

 -- Función: cmetric (<dis>)
 -- Función: cmetric ()
     Es la función del paquete `ctensor' que calcula la métrica inversa
     y prepara el paquete para cálculos ulteriores.

     Si `cframe_flag' vale `false', la función calcula la métrica
     inversa `ug' a partir de la matriz `lg' definida por el usuario.
     Se calcula también la métrica determinante y se almacena en la
     variable `gdet'. Además, el paquete determina si la métrica es
     diagonal y ajusta el valor de `diagmetric' de la forma apropiada.
     Si el argumento opcional <dis> está presente y no es igual a
     `false', el usuario podrá ver la métrica inversa.

     Si `cframe_flag' vale `true', la función espera que los valores de
     `fri' (la matriz del sistema de referencia inverso) y `lfg' (la
     matriz del sistema de referencia) estén definidos. A partir de
     ellos, se calculan la matriz del sistema de referencia `fr' y su
     métrica `ufg'.


 -- Función: ct_coordsys (<sistema_coordenadas>, <extra_arg>)
 -- Función: ct_coordsys (<sistema_coordenadas>)
     Prepara un sistema de coordenadas predefinido y una métrica. El
     argumento <sistema_coordenadas> puede ser cualquiera de los
     siguientes símbolos:


            Símbolo              Dim Coordenadas       Descripción/comentarios
            --------------------------------------------------------------------------------
            cartesian2d           2  [x,y]             Sistema de coordenadas cartesianas en 2D
            polar                 2  [r,phi]           Sistema de coordenadas polares
            elliptic              2  [u,v]             Sistema de coordenadas elípticas
            confocalelliptic      2  [u,v]             Coordenadas elípticas confocales
            bipolar               2  [u,v]             Sistema de coordenas bipolares
            parabolic             2  [u,v]             Sistema de coordenadas parabólicas
            cartesian3d           3  [x,y,z]           Sistema de coordenadas cartesianas en 3D
            polarcylindrical      3  [r,theta,z]       Polares en 2D con cilíndrica z
            ellipticcylindrical   3  [u,v,z]           Elípticas en 2D con cilíndrica z
            confocalellipsoidal   3  [u,v,w]           Elipsoidales confocales
            bipolarcylindrical    3  [u,v,z]           Bipolares en 2D con cilíndrica z
            paraboliccylindrical  3  [u,v,z]           Parabólicas en 2D con cilíndrica z
            paraboloidal          3  [u,v,phi]         Coordenadas paraboloidales
            conical               3  [u,v,w]           Coordenadas cónicas
            toroidal              3  [u,v,phi]         Coordenadas toroidales
            spherical             3  [r,theta,phi]     Sistema de coordenadas esféricas
            oblatespheroidal      3  [u,v,phi]         Coordenadas esferoidales obleadas
            oblatespheroidalsqrt  3  [u,v,phi]
            prolatespheroidal     3  [u,v,phi]         Coordenadas esferoidales prolatas
            prolatespheroidalsqrt 3  [u,v,phi]
            ellipsoidal           3  [r,theta,phi]     Coordenadas elipsoidales
            cartesian4d           4  [x,y,z,t]         Sistema de coordenadas cartesianas en 4D
            spherical4d           4  [r,theta,eta,phi] Sistema de coordenadas esféricas en 4D
            exteriorschwarzschild 4  [t,r,theta,phi]   Métrica de Schwarzschild
            interiorschwarzschild 4  [t,z,u,v]         Métrica interior de Schwarzschild
            kerr_newman           4  [t,r,theta,phi]   Métrica simétrica con carga axial

     El argumento `sistema_coordenadas' puede ser también una lista de
     funciones de transformación, seguida de una lista que contenga los
     nombres de las coordenadas. Por ejemplo, se puede especificar una
     métrica esférica como se indica a continuación:


          (%i1) load(ctensor);
          (%o1)       /share/tensor/ctensor.mac
          (%i2) ct_coordsys([r*cos(theta)*cos(phi),r*cos(theta)*sin(phi),
                r*sin(theta),[r,theta,phi]]);
          (%o2)                                done
          (%i3) lg:trigsimp(lg);
                                     [ 1  0         0        ]
                                     [                       ]
                                     [     2                 ]
          (%o3)                      [ 0  r         0        ]
                                     [                       ]
                                     [         2    2        ]
                                     [ 0  0   r  cos (theta) ]
          (%i4) ct_coords;
          (%o4)                           [r, theta, phi]
          (%i5) dim;
          (%o5)                                  3

     Las funciones de transformación se pueden utilizar también si
     `cframe_flag' vale `true':


          (%i1) load(ctensor);
          (%o1)       /share/tensor/ctensor.mac
          (%i2) cframe_flag:true;
          (%o2)                                true
          (%i3) ct_coordsys([r*cos(theta)*cos(phi),r*cos(theta)*sin(phi),
                r*sin(theta),[r,theta,phi]]);
          (%o3)                                done
          (%i4) fri;
                [ cos(phi) cos(theta)  - cos(phi) r sin(theta)  - sin(phi) r cos(theta) ]
                [                                                                       ]
          (%o4) [ sin(phi) cos(theta)  - sin(phi) r sin(theta)   cos(phi) r cos(theta)  ]
                [                                                                       ]
                [     sin(theta)            r cos(theta)                   0            ]
          (%i5) cmetric();
          (%o5)                                false
          (%i6) lg:trigsimp(lg);
                                     [ 1  0         0        ]
                                     [                       ]
                                     [     2                 ]
          (%o6)                      [ 0  r         0        ]
                                     [                       ]
                                     [         2    2        ]
                                     [ 0  0   r  cos (theta) ]

     El argumento opcional <extra_arg> puede ser cualquiera de los
     siguientes:

     `cylindrical' indica a `ct_coordsys' que añada una coordenada
     cilíndrica más.

     `minkowski' indica a  `ct_coordsys' que añada una coordenada más
     con signatura métrica negativa.

     `all' indica a  `ct_coordsys' que llame a  `cmetric' y a
     `christof(false)' tras activar la métrica.

     Si la variable global `verbose' vale `true', `ct_coordsys' muestra
     los valores de `dim', `ct_coords', junto con `lg' o `lfg' y `fri',
     dependiendo del valor de `cframe_flag'.


 -- Función: init_ctensor ()
     Inicializa el paquete `ctensor'.

     La función `init_ctensor' reinicializa el paquete `ctensor'. Borra
     todos los arreglos ("arrays") y matrices utilizados por `ctensor'
     y reinicializa todas las variables, asignando a `dim' el valor 4 y
     la métrica del sistema de referencia a la de Lorentz.


26.2.2 Los tensores del espacio curvo
-------------------------------------

El propósito principal del paquete `ctensor' es calcular los tensores
del espacio (-tiempo) curvo, en especial los tensores utilizados en
relatividad general.

Cuando se utiliza una métrica, `ctensor' puede calcular los siguientes
tensores:


      lg  -- ug
        \      \
         lcs -- mcs -- ric -- uric
                   \      \       \
                    \      tracer - ein -- lein
                     \
                      riem -- lriem -- weyl
                          \
                           uriem

El paquete `ctensor' también puede trabajar con sistemas de referencia
móviles. Si `cframe_flag' vale `true', se pueden calcular los
siguientes tensores:


      lfg -- ufg
          \
      fri -- fr -- lcs -- mcs -- lriem -- ric -- uric
           \                       |  \      \       \
            lg -- ug               |   weyl   tracer - ein -- lein
                                   |\
                                   | riem
                                   |
                                   \uriem

 -- Función: christof (<dis>)
     Es una función del paquete `ctensor'. Calcula los símbolos de
     Christoffel de ambos tipos. El argumento <dis> determina qué
     resultados se mostrarán de forma inmediata. Los símbolos de
     Christoffel de primer y segundo tipo se almacenan en los arreglos
     `lcs[i,j,k]' y `mcs[i,j,k]', respectivamente, y se definen
     simétricos en sus dos primeros índices. Si el argumento de
     `christof' es `lcs' o `mcs' entonces serán mostrados únicamente
     los valores no nulos de `lcs[i,j,k]' o `mcs[i,j,k]',
     respectivamente. Si el argumento es `all' entonces se mostrarán
     los valores no nulos de `lcs[i,j,k]' y `mcs[i,j,k]'.  Si el
     argumento vale `false' entonces no se mostrarán los elementos. El
     arreglo `mcs[i,j,k]' está definido de tal modo que el último
     índice es contravariante.

 -- Función: ricci (<dis>)
     Es una función del paquete `ctensor'. La función `ricci' calcula
     las componentes covariantes (simétricas) `ric[i,j]' del tensor de
     Ricci. Si el argumento <dis> vale `true', entonces se muestran las
     componentes no nulas.

 -- Función: uricci (<dis>)
     Esta función calcula en primer lugar las componentes covariantes
     `ric[i,j]' del tensor de Ricci. Después se calcula el tensor de
     Ricci utilizando la métrica contravariante. Si el valor del
     argumento <dis> vale `true', entonces se mostrarán directamente
     las componentes `uric[i,j]' (el índice <i> es covariante y el <j>
     contravariante). En otro caso,  `ricci(false)' simplemente
     calculará las entradas del arreglo `uric[i,j]' sin mostrar los
     resultados.


 -- Función: scurvature ()
     Devuelve la curvatura escalar (obtenida por contracción del tensor
     de Ricci) de la variedad de Riemannian con la métrica dada.


 -- Función: einstein (<dis>)
     Es una función del paquete `ctensor'. La función  `einstein'
     calcula el tensor de Einstein después de que los símbolos de
     Christoffel y el tensor de Ricci hayan sido calculados (con las
     funciones `christof' y `ricci').  Si el argumento <dis> vale
     `true', entonces se mostrarán los valores no nulos del tensor de
     Einstein `ein[i,j]', donde `j' es el índice contravariante. La
     variable `rateinstein' causará la simplificación racional de estas
     componentes. Si `ratfac' vale `true' entonces las componentes
     también se factorizarán.


 -- Función: leinstein (<dis>)
     Es el tensor covariante de Einstein. La función `leinstein'
     almacena los valores del tensor covariante de Einstein en el
     arreglo `lein'. El tensor covariante de Einstein se calcula a
     partir del tensor de Einstein `ein' multiplicándolo por el tensor
     métrico. Si el argumento  <dis> vale `true', entonces se mostrarán
     los valores no nulos del tensor covariante de Einstein.


 -- Función: riemann (<dis>)
     Es una función del paquete `ctensor'. La función `riemann' calcula
     el tensor de curvatura de Riemann a partir de la métrica dada y de
     los símbolos de Christoffel correspondientes. Se utiliza el
     siguiente convenio sobre los índices:

                          l      _l       _l       _l   _m    _l   _m
           R[i,j,k,l] =  R    = |      - |      + |    |   - |    |
                          ijk     ij,k     ik,j     mk   ij    mj   ik

     Esta notación es consistente con la notación utilizada por el
     paquete `itensor' y su función `icurvature'. Si el argumento
     opcional <dis> vale `true', se muestran las componentes no nulas
     únicas de `riem[i,j,k,l]'. Como en el caso del tensor de Einstein,
     ciertas variables permiten controlar al usuario la simplificación
     de las componentes del tensor de Riemann. Si  `ratriemann' vale
     `true', entonces se hará la simplificación racional. Si `ratfac'
     vale `true', entonces se factorizarán todas las componentes.

     Si la variable `cframe_flag' vale `false', el tensor de Riemann se
     calcula directamente a partir de los símbolos de Christoffel. Si
     `cframe_flag' vale `true', el tensor covariante de Riemann se
     calcula a partir de los coeficientes del campo.


 -- Función: lriemann (<dis>)
     Es el tensor covariante de Riemann (`lriem[]').

     Calcula el tensor covariante de Riemann como un arreglo `lriem'.
     Si el argumento <dis> vale `true', sólo se muestran los valores no
     nulos.

     Si la variable `cframe_flag' vale `true', el tensor covariante de
     Riemann se calcula directamente de los coeficientes del campo. En
     otro caso, el tensor de Riemann (3,1) se calcula en primer lugar.

     Para más información sobre la ordenación de los índices, véase
     `riemann'.


 -- Función: uriemann (<dis>)
     Calcula las componentes contravariantes del tensor de curvatura de
     Riemann como un arreglo `uriem[i,j,k,l]'.  Éstos se muestran si
     <dis> vale `true'.


 -- Función: rinvariant ()
     Calcula la invariante de Kretchmann (`kinvariant') obtenida por
     contracción de los tensores.

          lriem[i,j,k,l]*uriem[i,j,k,l].

     Este objeto no se simplifica automáticamente al ser en ocasiones
     muy grande.


 -- Función: weyl (<dis>)
     Calcula el tensor conforme de Weyl. Si el argumento <dis> vale
     `true', se le mostrarán al usuario las componentes no nulas
     `weyl[i,j,k,l]'. En otro caso, estas componentes serán únicamente
     calculadas y almacenadas. Si la variable `ratweyl' vale `true',
     entonces las componentes se simplifican racionalmente; si `ratfac'
     vale `true' los resultados también se simplificarán.


26.2.3 Desarrollo de Taylor
---------------------------

El paquete `ctensor' puede truncar resultados e interpretarlos como
aproximaciones de Taylor. Este comportamiento se controla con
lavariable `ctayswitch'; cuando vale `true', `ctensor' utiliza
internamente la función `ctaylor' cuando simplifica resultados.

La función `ctaylor' es llamada desde las siguientes funciones del
paquete `ctensor':


         Función      Comentarios
         ---------------------------------
         christof()   Sólo para mcs
         ricci()
         uricci()
         einstein()
         riemann()
         weyl()
         checkdiv()

 -- Función: ctaylor ()
     La función `ctaylor' trunca su argumento convirtiéndolo en un
     desarrollo de Taylor por medio de la función `taylor' e invocando
     después a `ratdisrep'. Esto tiene el efecto de eliminar términos
     de orden alto en la variable de expansión `ctayvar'. El orden de
     los términos que deben ser eliminados se define `ctaypov'; el
     punto alrededor del cual se desarrolla la serie se especifica en
     `ctaypt'.

     Como ejemplo, considérese una sencilla métrica que es una
     perturbación de la de Minkowski. Sin añadir restricciones, incluso
     una métrica diagonal produce expansiones del tensor de Einstein
     que pueden llegar a ser muy complejas:


          (%i1) load(ctensor);
          (%o1)       /share/tensor/ctensor.mac
          (%i2) ratfac:true;
          (%o2)                                true
          (%i3) derivabbrev:true;
          (%o3)                                true
          (%i4) ct_coords:[t,r,theta,phi];
          (%o4)                         [t, r, theta, phi]
          (%i5) lg:matrix([-1,0,0,0],[0,1,0,0],[0,0,r^2,0],[0,0,0,r^2*sin(theta)^2]);
                                  [ - 1  0  0         0        ]
                                  [                            ]
                                  [  0   1  0         0        ]
                                  [                            ]
          (%o5)                   [          2                 ]
                                  [  0   0  r         0        ]
                                  [                            ]
                                  [              2    2        ]
                                  [  0   0  0   r  sin (theta) ]
          (%i6) h:matrix([h11,0,0,0],[0,h22,0,0],[0,0,h33,0],[0,0,0,h44]);
                                      [ h11   0    0    0  ]
                                      [                    ]
                                      [  0   h22   0    0  ]
          (%o6)                       [                    ]
                                      [  0    0   h33   0  ]
                                      [                    ]
                                      [  0    0    0   h44 ]
          (%i7) depends(l,r);
          (%o7)                               [l(r)]
          (%i8) lg:lg+l*h;
                   [ h11 l - 1      0          0                 0            ]
                   [                                                          ]
                   [     0      h22 l + 1      0                 0            ]
                   [                                                          ]
          (%o8)    [                        2                                 ]
                   [     0          0      r  + h33 l            0            ]
                   [                                                          ]
                   [                                    2    2                ]
                   [     0          0          0       r  sin (theta) + h44 l ]
          (%i9) cmetric(false);
          (%o9)                                done
          (%i10) einstein(false);
          (%o10)                               done
          (%i11) ntermst(ein);
          [[1, 1], 62]
          [[1, 2], 0]
          [[1, 3], 0]
          [[1, 4], 0]
          [[2, 1], 0]
          [[2, 2], 24]
          [[2, 3], 0]
          [[2, 4], 0]
          [[3, 1], 0]
          [[3, 2], 0]
          [[3, 3], 46]
          [[3, 4], 0]
          [[4, 1], 0]
          [[4, 2], 0]
          [[4, 3], 0]
          [[4, 4], 46]
          (%o12)                               done

     Sin embargo, si se recalcula este ejemplo como una aproximación
     lineal en la variable `l', se obtienen expresiones más sencillas:


          (%i14) ctayswitch:true;
          (%o14)                               true
          (%i15) ctayvar:l;
          (%o15)                                 l
          (%i16) ctaypov:1;
          (%o16)                                 1
          (%i17) ctaypt:0;
          (%o17)                                 0
          (%i18) christof(false);
          (%o18)                               done
          (%i19) ricci(false);
          (%o19)                               done
          (%i20) einstein(false);
          (%o20)                               done
          (%i21) ntermst(ein);
          [[1, 1], 6]
          [[1, 2], 0]
          [[1, 3], 0]
          [[1, 4], 0]
          [[2, 1], 0]
          [[2, 2], 13]
          [[2, 3], 2]
          [[2, 4], 0]
          [[3, 1], 0]
          [[3, 2], 2]
          [[3, 3], 9]
          [[3, 4], 0]
          [[4, 1], 0]
          [[4, 2], 0]
          [[4, 3], 0]
          [[4, 4], 9]
          (%o21)                               done
          (%i22) ratsimp(ein[1,1]);
                                   2      2  4               2     2
          (%o22) - (((h11 h22 - h11 ) (l )  r  - 2 h33 l    r ) sin (theta)
                                        r               r r

                                          2               2      4    2
                            - 2 h44 l    r  - h33 h44 (l ) )/(4 r  sin (theta))
                                     r r                r

     Esta capacidad del paquete `ctensor' puede ser muy útil; por
     ejemplo, cuando se trabaja en zonas del campo gravitatorio
     alejadas del origen de éste.


26.2.4 Campos del sistema de referencia
---------------------------------------

Cuando la variable `cframe_flag' vale `true', el paquete `ctensor'
realiza sus cálculos utilizando un sistema de referencia móvil.

 -- Función: frame_bracket (<fr>, <fri>, <diagframe>)
     Es el sistema de referencia soporte (`fb[]').

     Calcula el soporte del sistema de referencia de acuerdo con la
     siguiente definición:

             c          c         c        d     e
          ifb   = ( ifri    - ifri    ) ifr   ifr
             ab         d,e       e,d      a     b


26.2.5 Clasificación algebraica
-------------------------------

Una nueva funcionalidad (Noviembre de 2004) de `ctensor' es su
capacidad de obtener la clasificación de Petrov de una métrica
espaciotemporal de dimensión 4. Para una demostración de esto véase el
fichero `share/tensor/petrov.dem'.

 -- Función: nptetrad ()
     Calcula la cuaterna nula de Newman-Penrose (`np'). Véase `petrov'
     para un ejemplo.

     La cuaterna nula se construye bajo la suposición de que se está
     utilizando una métrica tetradimensional ortonormal con signatura
     métrica (-,+,+,+). Los componentes de la cuaterna nula se
     relacionan con la inversa de la matriz del sistema de referencia
     de la siguiente manera:


          np  = (fri  + fri ) / sqrt(2)
            1       1      2

          np  = (fri  - fri ) / sqrt(2)
            2       1      2

          np  = (fri  + %i fri ) / sqrt(2)
            3       3         4

          np  = (fri  - %i fri ) / sqrt(2)
            4       3         4


 -- Función: psi (<dis>)
     Calcula los cinco coeficientes de Newman-Penrose
     `psi[0]'...`psi[4]'.  Si `dis' vale `true', se muestran estos
     coeficientes.  Véase `petrov' para un ejemplo.

     Estos coeficientes se calculan a partir del tensor de Weyl.


 -- Función: petrov ()
     Calcula la clasificación de  Petrov de la métrica caracterizada
     por `psi[0]'...`psi[4]'.

     Por ejemplo, lo que sigue demuestra cómo obtener la clasificación
     de Petrov para la métrica de Kerr:

          (%i1) load(ctensor);
          (%o1)       /share/tensor/ctensor.mac
          (%i2) (cframe_flag:true,gcd:spmod,ctrgsimp:true,ratfac:true);
          (%o2)                                true
          (%i3) ct_coordsys(exteriorschwarzschild,all);
          (%o3)                                done
          (%i4) ug:invert(lg)$
          (%i5) weyl(false);
          (%o5)                                done
          (%i6) nptetrad(true);
          (%t6) np =

                 [  sqrt(r - 2 m)           sqrt(r)                                     ]
                 [ ---------------   ---------------------      0             0         ]
                 [ sqrt(2) sqrt(r)   sqrt(2) sqrt(r - 2 m)                              ]
                 [                                                                      ]
                 [  sqrt(r - 2 m)            sqrt(r)                                    ]
                 [ ---------------  - ---------------------     0             0         ]
                 [ sqrt(2) sqrt(r)    sqrt(2) sqrt(r - 2 m)                             ]
                 [                                                                      ]
                 [                                              r      %i r sin(theta)  ]
                 [        0                    0             -------   ---------------  ]
                 [                                           sqrt(2)       sqrt(2)      ]
                 [                                                                      ]
                 [                                              r       %i r sin(theta) ]
                 [        0                    0             -------  - --------------- ]
                 [                                           sqrt(2)        sqrt(2)     ]

                                       sqrt(r)          sqrt(r - 2 m)
          (%t7) npi = matrix([- ---------------------, ---------------, 0, 0],
                                sqrt(2) sqrt(r - 2 m)  sqrt(2) sqrt(r)

                    sqrt(r)            sqrt(r - 2 m)
          [- ---------------------, - ---------------, 0, 0],
             sqrt(2) sqrt(r - 2 m)    sqrt(2) sqrt(r)

                     1               %i
          [0, 0, ---------, --------------------],
                 sqrt(2) r  sqrt(2) r sin(theta)

                     1                 %i
          [0, 0, ---------, - --------------------])
                 sqrt(2) r    sqrt(2) r sin(theta)

          (%o7)                                done
          (%i7) psi(true);
          (%t8)                              psi  = 0
                                                0

          (%t9)                              psi  = 0
                                                1

                                                    m
          (%t10)                             psi  = --
                                                2    3
                                                    r

          (%t11)                             psi  = 0
                                                3

          (%t12)                             psi  = 0
                                                4
          (%o12)                               done
          (%i12) petrov();
          (%o12)                                 D

     La función de clasificación de Petrov se basa en el algoritmo
     publicado en "Classifying geometries in general relativity: III
     Classification in practice" de Pollney, Skea, and d'Inverno,
     Class. Quant. Grav. 17 2885-2902 (2000).  Excepto para algunos
     ejemplos sencillos, esta implementación no ha sido exhaustivamente
     probada, por lo que puede contener errores.


26.2.6 Torsión y no metricidad
------------------------------

El paquete `ctensor' es capaz de calcular e incluir coeficientes de
torsión y no metricidad en los coeficientes de conexión.

Los coeficientes de torsión se calculan a partir de un tensor
suministrado por el usuario, `tr', el cual debe ser de rango (2,1). A
partir de ahí, los coeficientes de torsión `kt' se calculan de acuerdo
con las siguientes fórmulas:


                   m          m      m
            - g  tr   - g   tr   - tr   g
               im  kj    jm   ki     ij  km
     kt   = -------------------------------
       ijk                 2


       k     km
     kt   = g   kt
       ij         ijm

Los coeficientes de no metricidad se calculan a partir de un vector de
no metricidad, `nm', suministrado por el usuario. A partir de ahí, los
coeficientes de no metricidad, `nmc', se calculan como se indica a
continuación:


                  k    k        km
            -nm  D  - D  nm  + g   nm  g
        k      i  j    i   j         m  ij
     nmc  = ------------------------------
        ij                2

donde D es la delta de Kronecker.

 -- Función: contortion (<tr>)
     Calcula los coeficientes (2,1) de contorsión del tensor de torsión
     <tr>.


 -- Función: nonmetricity (<nm>)
     Calcula los coeficientes (2,1) de no metricidad del vector de no
     metricidad <nm>.


26.2.7 Otras funcionalidades
----------------------------

 -- Función: ctransform (<M>)
     Es una función del paquete `ctensor'.  Realiza una transformación
     de coordenadas a partir de una matriz cuadrada simétrica <M>
     arbitraria. El usuario debe introducir las funciones que definen
     la transformación.


 -- Función: findde (<A>, <n>)
     Devuelve la lista de las ecuaciones diferenciales que corresponden
     a los elementos del arreglo cuadrado <n>-dimensional. El argumento
     <n> puede ser 2 ó 3; `deindex' es una lista global que contiene
     los índices de <A> que corresponden a estas ecuaciones
     diferenciales. Para el tensor de Einstein (`ein'), que es un
     arreglo bidimensional, si se calcula para la métrica del ejemplo
     de más abajo, `findde' devuelve las siguientes ecuaciones
     diferenciales independientes:

          (%i1) load(ctensor);
          (%o1)       /share/tensor/ctensor.mac
          (%i2) derivabbrev:true;
          (%o2)                                true
          (%i3) dim:4;
          (%o3)                                  4
          (%i4) lg:matrix([a,0,0,0],[0,x^2,0,0],[0,0,x^2*sin(y)^2,0],[0,0,0,-d]);
                                    [ a  0       0        0  ]
                                    [                        ]
                                    [     2                  ]
                                    [ 0  x       0        0  ]
          (%o4)                     [                        ]
                                    [         2    2         ]
                                    [ 0  0   x  sin (y)   0  ]
                                    [                        ]
                                    [ 0  0       0       - d ]
          (%i5) depends([a,d],x);
          (%o5)                            [a(x), d(x)]
          (%i6) ct_coords:[x,y,z,t];
          (%o6)                            [x, y, z, t]
          (%i7) cmetric();
          (%o7)                                done
          (%i8) einstein(false);
          (%o8)                                done
          (%i9) findde(ein,2);
                                                      2
          (%o9) [d  x - a d + d, 2 a d d    x - a (d )  x - a  d d  x + 2 a d d
                  x                     x x         x        x    x            x

                                                                  2          2
                                                          - 2 a  d , a  x + a  - a]
                                                               x      x
          (%i10) deindex;
          (%o10)                     [[1, 1], [2, 2], [4, 4]]


 -- Función: cograd ()
     Calcula el gradiente covariante de una función escalar permitiendo
     al usuario elegir el nombre del vector correspondiente, tal como
     ilustra el ejemplo que acompaña a la definición de la función
     `contragrad'.

 -- Function: contragrad ()
     Calcula el gradiente contravariante de una función escalar
     permitiendo al usuario elegir el nombre del vector
     correspondiente, tal como muestra el siguiente ejemplo para la
     métrica de Schwarzschild:


          (%i1) load(ctensor);
          (%o1)       /share/tensor/ctensor.mac
          (%i2) derivabbrev:true;
          (%o2)                                true
          (%i3) ct_coordsys(exteriorschwarzschild,all);
          (%o3)                                done
          (%i4) depends(f,r);
          (%o4)                               [f(r)]
          (%i5) cograd(f,g1);
          (%o5)                                done
          (%i6) listarray(g1);
          (%o6)                            [0, f , 0, 0]
                                                r
          (%i7) contragrad(f,g2);
          (%o7)                                done
          (%i8) listarray(g2);
                                         f  r - 2 f  m
                                          r        r
          (%o8)                      [0, -------------, 0, 0]
                                               r


 -- Función: dscalar ()
     Calcula el tensor de d'Alembertian de la función escalar una vez
     se han declarado las dependencias. Por ejemplo:

          (%i1) load(ctensor);
          (%o1)       /share/tensor/ctensor.mac
          (%i2) derivabbrev:true;
          (%o2)                                true
          (%i3) ct_coordsys(exteriorschwarzschild,all);
          (%o3)                                done
          (%i4) depends(p,r);
          (%o4)                               [p(r)]
          (%i5) factor(dscalar(p));
                                    2
                              p    r  - 2 m p    r + 2 p  r - 2 m p
                               r r           r r        r          r
          (%o5)               --------------------------------------
                                                 2
                                                r


 -- Función: checkdiv ()
     Calcula la divergencia covariante del tensor de segundo rango
     (mixed second rank tensor), cuyo primer índice debe ser
     covariante, devolviendo las `n' componentes correspondientes del
     campo vectorial (la divergencia), siendo `n = dim'.

 -- Función: cgeodesic (<dis>)
     Es una función del paquete `ctensor' que calcula las ecuaciones
     geodésicas del movimiento para una métrica dada, las cuales se
     almacenan en el arreglo `geod[i]'. Si el argumento  <dis> vale
     `true' entonces se muestran estas ecuaciones.


 -- Función: bdvac (<f>)
     Genera las componentes covariantes de las ecuaciones del campo
     vacío de la teoría gravitacional de Brans- Dicke gravitational. El
     campo escalar se especifica con el argumento  <f>, el cual debe
     ser el nombre de una función no evaluada (precedida de apóstrofo)
     con dependencias funcionales, por ejemplo,  `'p(x)'.

     Las componentes del tensor covariante (second rank covariant field
     tensor) se almacenan en el arreglo `bd'.


 -- Función: invariant1 ()
     Genera el tensor de Euler-Lagrange (ecuaciones de campo) para la
     densidad invariante de  R^2. Las ecuaciones de campo son las
     componentes del arreglo `inv1'.


26.2.8 Utilidades
-----------------

 -- Función: diagmatrixp (<M>)
     Devuelve `true' si <M> es una matriz diagonal o un arreglo
     bidimensional.


 -- Función: symmetricp (<M>)
     Devuelve `true' si <M> es una matriz simétrica o un arreglo
     bidimensional.


 -- Función: ntermst (<f>)
     Permite hacerse una idea del tamaño del tensor <f>.

 -- Función: cdisplay (<ten>)
     Muestra todos los elementos del tensor <ten> como arreglo
     multidimensional. Tensors de rango 0 y 1, así como otros tipos de
     variables, se muestran como en `ldisplay'. Tensors de rango 2 se
     muestran como matrices bidimensionales, mientras que tensores de
     mayor rango se muestran como listas de matrices bidimensionales.
     Por ejemplo, el tensor de Riemann de la métrica de Schwarzschild
     se puede ver como:

          (%i1) load(ctensor);
          (%o1)       /share/tensor/ctensor.mac
          (%i2) ratfac:true;
          (%o2)                                true
          (%i3) ct_coordsys(exteriorschwarzschild,all);
          (%o3)                                done
          (%i4) riemann(false);
          (%o4)                                done
          (%i5) cdisplay(riem);
                         [ 0               0                    0            0      ]
                         [                                                          ]
                         [                              2                           ]
                         [      3 m (r - 2 m)   m    2 m                            ]
                         [ 0  - ------------- + -- - ----       0            0      ]
                         [            4          3     4                            ]
                         [           r          r     r                             ]
                         [                                                          ]
              riem     = [                                 m (r - 2 m)              ]
                  1, 1   [ 0               0               -----------       0      ]
                         [                                      4                   ]
                         [                                     r                    ]
                         [                                                          ]
                         [                                              m (r - 2 m) ]
                         [ 0               0                    0       ----------- ]
                         [                                                   4      ]
                         [                                                  r       ]

                                          [    2 m (r - 2 m)       ]
                                          [ 0  -------------  0  0 ]
                                          [          4             ]
                                          [         r              ]
                               riem     = [                        ]
                                   1, 2   [ 0        0        0  0 ]
                                          [                        ]
                                          [ 0        0        0  0 ]
                                          [                        ]
                                          [ 0        0        0  0 ]

                                          [         m (r - 2 m)    ]
                                          [ 0  0  - -----------  0 ]
                                          [              4         ]
                                          [             r          ]
                               riem     = [                        ]
                                   1, 3   [ 0  0        0        0 ]
                                          [                        ]
                                          [ 0  0        0        0 ]
                                          [                        ]
                                          [ 0  0        0        0 ]

                                          [            m (r - 2 m) ]
                                          [ 0  0  0  - ----------- ]
                                          [                 4      ]
                                          [                r       ]
                               riem     = [                        ]
                                   1, 4   [ 0  0  0        0       ]
                                          [                        ]
                                          [ 0  0  0        0       ]
                                          [                        ]
                                          [ 0  0  0        0       ]

                                         [       0         0  0  0 ]
                                         [                         ]
                                         [       2 m               ]
                                         [ - ------------  0  0  0 ]
                              riem     = [    2                    ]
                                  2, 1   [   r  (r - 2 m)          ]
                                         [                         ]
                                         [       0         0  0  0 ]
                                         [                         ]
                                         [       0         0  0  0 ]

                             [     2 m                                         ]
                             [ ------------  0        0               0        ]
                             [  2                                              ]
                             [ r  (r - 2 m)                                    ]
                             [                                                 ]
                             [      0        0        0               0        ]
                             [                                                 ]
                  riem     = [                         m                       ]
                      2, 2   [      0        0  - ------------        0        ]
                             [                     2                           ]
                             [                    r  (r - 2 m)                 ]
                             [                                                 ]
                             [                                         m       ]
                             [      0        0        0         - ------------ ]
                             [                                     2           ]
                             [                                    r  (r - 2 m) ]

                                          [ 0  0       0        0 ]
                                          [                       ]
                                          [            m          ]
                                          [ 0  0  ------------  0 ]
                               riem     = [        2              ]
                                   2, 3   [       r  (r - 2 m)    ]
                                          [                       ]
                                          [ 0  0       0        0 ]
                                          [                       ]
                                          [ 0  0       0        0 ]

                                          [ 0  0  0       0       ]
                                          [                       ]
                                          [               m       ]
                                          [ 0  0  0  ------------ ]
                               riem     = [           2           ]
                                   2, 4   [          r  (r - 2 m) ]
                                          [                       ]
                                          [ 0  0  0       0       ]
                                          [                       ]
                                          [ 0  0  0       0       ]

                                                [ 0  0  0  0 ]
                                                [            ]
                                                [ 0  0  0  0 ]
                                                [            ]
                                     riem     = [ m          ]
                                         3, 1   [ -  0  0  0 ]
                                                [ r          ]
                                                [            ]
                                                [ 0  0  0  0 ]

                                                [ 0  0  0  0 ]
                                                [            ]
                                                [ 0  0  0  0 ]
                                                [            ]
                                     riem     = [    m       ]
                                         3, 2   [ 0  -  0  0 ]
                                                [    r       ]
                                                [            ]
                                                [ 0  0  0  0 ]

                                         [   m                      ]
                                         [ - -   0   0       0      ]
                                         [   r                      ]
                                         [                          ]
                                         [        m                 ]
                                         [  0   - -  0       0      ]
                              riem     = [        r                 ]
                                  3, 3   [                          ]
                                         [  0    0   0       0      ]
                                         [                          ]
                                         [              2 m - r     ]
                                         [  0    0   0  ------- + 1 ]
                                         [                 r        ]

                                              [ 0  0  0    0   ]
                                              [                ]
                                              [ 0  0  0    0   ]
                                              [                ]
                                   riem     = [            2 m ]
                                       3, 4   [ 0  0  0  - --- ]
                                              [             r  ]
                                              [                ]
                                              [ 0  0  0    0   ]

                                          [       0        0  0  0 ]
                                          [                        ]
                                          [       0        0  0  0 ]
                                          [                        ]
                               riem     = [       0        0  0  0 ]
                                   4, 1   [                        ]
                                          [      2                 ]
                                          [ m sin (theta)          ]
                                          [ -------------  0  0  0 ]
                                          [       r                ]

                                          [ 0        0        0  0 ]
                                          [                        ]
                                          [ 0        0        0  0 ]
                                          [                        ]
                               riem     = [ 0        0        0  0 ]
                                   4, 2   [                        ]
                                          [         2              ]
                                          [    m sin (theta)       ]
                                          [ 0  -------------  0  0 ]
                                          [          r             ]

                                        [ 0  0          0          0 ]
                                        [                            ]
                                        [ 0  0          0          0 ]
                                        [                            ]
                             riem     = [ 0  0          0          0 ]
                                 4, 3   [                            ]
                                        [                2           ]
                                        [         2 m sin (theta)    ]
                                        [ 0  0  - ---------------  0 ]
                                        [                r           ]

                           [        2                                             ]
                           [   m sin (theta)                                      ]
                           [ - -------------         0                0         0 ]
                           [         r                                            ]
                           [                                                      ]
                           [                         2                            ]
                           [                    m sin (theta)                     ]
                riem     = [        0         - -------------         0         0 ]
                    4, 4   [                          r                           ]
                           [                                                      ]
                           [                                          2           ]
                           [                                   2 m sin (theta)    ]
                           [        0                0         ---------------  0 ]
                           [                                          r           ]
                           [                                                      ]
                           [        0                0                0         0 ]

          (%o5)                                done

 -- Función: deleten (<L>, <n>)
     Devuelve una nueva lista consistente en <L> sin su <n>-ésimo
     elemento.

26.2.9 Variables utilizadas por `ctensor'
-----------------------------------------

 -- Variable opcional: dim
     Valor por defecto: 4

     Es la dimensión de la variedad, que por defecto será 4. La
     instrucción `dim: n' establecerá la dimensión a cualquier otro
     valor `n'.


 -- Variable opcional: diagmetric
     Valor por defecto: `false'

     Si `diagmetric' vale `true' se utilizarán rutinas especiales para
     calcular todos los objetos geométricos teniendo en cuenta la
     diagonalidad de la métrica, lo que redundará en una reducción del
     tiempo de cálculo. Esta opción se fija automáticamente por
     `csetup' si se especifica una métrica diagonal.


 -- Variable opcional: ctrgsimp
     Provoca que se realicen simplificaciones trigonométricas cuando se
     calculan tensores. La variable `ctrgsimp' afecta únicamente a
     aquellos cálculos que utilicen un sistema de referencia móvil.


 -- Variable opcional: cframe_flag
     Provoca que los cálculos se realicen respecto de un sistema de
     referencia móvil.

 -- Variable opcional: ctorsion_flag
     Obliga a que se calcule también el tensor de contorsión junto con
     los coeficientes de conexión. El propio tensor de contorsión se
     calcula con la función `contortion' a partir del tensor `tr'
     suministrado por el usuario.


 -- Variable opcional: cnonmet_flag
     Obliga a que se calculen también los coeficientes de no metricidad
     junto con los coeficientes de conexión. Los coeficientes de no
     metricidad se calculan con la función `nonmetricity' a partir del
     vector de no metricidad`nm' suministrado por el usuario.


 -- Variable opcional: ctayswitch
     Si vale `true', obliga a que ciertos cálculos de `ctensor' se
     lleven a cabo utilizando desarrollos de series de Taylor. Estos
     cálculos hacen referencia a las funciones `christof', `ricci',
     `uricci', `einstein' y `weyl'.


 -- Variable opcional: ctayvar
     Variable utilizada para desarrollos de Taylor cuando la variable
     `ctayswitch' vale `true'.


 -- Variable opcional: ctaypov
     Máximo exponente utilizado en los desarrollos de Taylor cuando
     `ctayswitch' vale `true'.


 -- Variable opcional: ctaypt
     Punto alrededor del cual se realiza un desarrollo de Taylor cuando
     `ctayswitch' vale `true'.


 -- Variable opcional: gdet
     Es el determinante del tensor métrico `lg', calculado por
     `cmetric' cuando `cframe_flag' vale `false'.


 -- Variable opcional: ratchristof
     Obliga a que la función `christof' aplique la simplificación
     racional.


 -- Variable opcional: rateinstein
     Valor por defecto: `true'

     Si vale `true' entonces se hará la simplificación racional en los
     componentes no nulos de los tensores de Einstein; si `ratfac' vale
     `true' entonces las componentes también serán factorizadas.


 -- Variable opcional: ratriemann
     Valor por defecto: `true'

     Es una de las variables que controlan la simplificación de los
     tensores de Riemann; si vale `true', entonces se llevará a cabo la
     simplificación racional; si `ratfac' vale `true' entonces las
     componentes también serán factorizadas.


 -- Variable opcional: ratweyl
     Valor por defecto: `true'

     Si vale `true', entonces la función `weyl' llevará a cabo la
     simplificación racional de los valores del tensor de Weyl. si
     `ratfac' vale `true' entonces las componentes también serán
     factorizadas.

 -- Variable: lfg
     Es la covariante de la métrica del sistema de referencia. Por
     defecto, está inicializada al sistema de referencia
     tetradimensional de Lorentz con signatura  (+,+,+,-). Se utiliza
     cuando `cframe_flag' vale `true'.

 -- Variable: ufg
     Es la métrica del sistema de referencia inverso. La calcula `lfg'
     cuando `cmetric' es invocada tomando  `cframe_flag' el valor
     `true'.

 -- Variable: riem
     Es el tensor (3,1) de Riemann. Se calcula cuando se invoca la
     función `riemann'. Para información sobre el indexado, véase la
     descripción de  `riemann'.

     Si `cframe_flag' vale `true', `riem' se calcula a partir del
     tensor covariante de Riemann `lriem'.


 -- Variable: lriem
     Es el tensor covariante de Riemann. Lo calcula la función
     `lriemann'.


 -- Variable: uriem
     Es el tensor contravariante de Riemann. Lo calcula la función
     `uriemann'.


 -- Variable: ric
     Es el tensor de Ricci. Lo calcula la función `ricci'.


 -- Variable: uric
     Es el tensor contravariante de Ricci. Lo calcula la función
     `uricci'.


 -- Variable: lg
     Es el tensor métrico. Este tensor se debe especificar (como matriz
     cuadrada de orden `dim') antes de que se hagan otros cálculos.


 -- Variable: ug
     Es la inversa del tensor métrico. Lo calcula la función `cmetric'.


 -- Variable: weyl
     Es el tensor de Weyl. Lo calcula la función `weyl'.


 -- Variable: fb
     Son los coeficientes del sistema de referencia soporte, tal como
     los calcula `frame_bracket'.


 -- Variable: kinvariant
     Es la invariante de Kretchmann, tal como la calcula la función
     `rinvariant'.


 -- Variable: np
     Es la cuaterna nula de Newman-Penrose, tal como la calcula la
     función `nptetrad'.


 -- Variable: npi
     Es la cuaterna nula "raised-index Newman-Penrose". Lo calcula la
     función `nptetrad'.  Se define como `ug.np'. El producto
     `np.transpose(npi)' es constante:

          (%i39) trigsimp(np.transpose(npi));
                                        [  0   - 1  0  0 ]
                                        [                ]
                                        [ - 1   0   0  0 ]
          (%o39)                        [                ]
                                        [  0    0   0  1 ]
                                        [                ]
                                        [  0    0   1  0 ]


 -- Variable: tr
     Tensor de rango 3 suministrado por el usuario y que representa una
     torsión. Lo utiliza la función `contortion'.

 -- Variable: kt
     Es el tensor de contorsión, calculado a partir de `tr' por la
     función `contortion'.

 -- Variable: nm
     Vector de no metricidad suministrado por el usuario. Lo utiliza la
     función `nonmetricity'.

 -- Variable: nmc
     Son los coeficientes de no metricidad, calculados a partir de `nm'
     por la función `nonmetricity'.


 -- Variable del sistema: tensorkill
     Variable que indica si el paquete de tensores se ha inicializado.
     Utilizada por `csetup' y reinicializada por `init_ctensor'.


 -- Variable opcional: ct_coords
     Valor por defecto: `[]'

     La variable `ct_coords' contiene una lista de coordenadas. Aunque
     se define normalmente cuando se llama a la función `csetup',
     también se pueden redefinir las coordenadas con la asignación
     `ct_coords: [j1, j2, ..., jn]' donde  `j' es el nuevo nombre de
     las coordenadas. Véase también `csetup'.


26.2.10 Nombres reservados
--------------------------

Los siguientes nombres se utilizan internamente en el paquete `ctensor'
y no deberían redefinirse:

       Nombre       Descripción
       ---------------------------------------
       _lg()        Toma el valor `lfg' si se utiliza métrica del sistema de referencia,
                    `lg' en otro caso
       _ug()        Toma el valor `ufg' si se utiliza métrica del sistema de referencia,
                    `ug' en otro caso
       cleanup()    Elimina elementos de la lista `deindex'
       contract4()  Utilizada por `psi()'
       filemet()    Utilizada por `csetup()' cuando se lee la métrica desde un fichero
       findde1()    Utilizada por `findde()'
       findde2()    Utilizada por `findde()'
       findde3()    Utilizada por `findde()'
       kdelt()      Delta de Kronecker (no generalizada)
       newmet()     Utilizada por `csetup()' para establecer una métrica interactivamente
       setflags()   Utilizada por `init_ctensor()'
       readvalue()
       resimp()
       sermet()     Utilizada por `csetup()' para definir una métrica como serie de Taylor
       txyzsum()
       tmetric()    Métrica del sistema de referencia, utilizada por `cmetric()'
                    cuando `cframe_flag:true'
       triemann()   Tensor de Riemann en la base del sistema de referencia, se utiliza cuando
                    `cframe_flag:true'
       tricci()     Tensor de Ricci en la base del sistema de referencia, se utiliza cuando
                    `cframe_flag:true'
       trrc()       Coeficientes de rotación de Ricci, utilizada por `christof()'
       yesp()


File: maxima.info,  Node: atensor,  Next: Sumas productos y series,  Prev: ctensor,  Up: Top

27 atensor
**********

* Menu:

* Introducción a atensor::
* Funciones y variables para atensor::


File: maxima.info,  Node: Introducción a atensor,  Next: Funciones y variables para atensor,  Prev: atensor,  Up: atensor

27.1 Introducción a atensor
===========================

El paquete `atensor' contiene funciones para la manipulación algebraica
de tensores. Para hacer uso de `atensor' es necesario cargarlo en
memoria haciendo `load(atensor)', seguido de una llamada a la función
`init_atensor'.

La parte más importante de `atensor' es una batería de reglas de
simplificación para el producto no conmutativo ("`.'"). El paquete
`atensor' reconoce algunos tipos de álgebras; las correspondientes
reglas de simplificación se activan tan pronto como se hace una llamada
a la función `init_atensor'.

Las capacidades de `atensor' se pueden demostrar definiendo el álgebra
de cuaterniones como un álgebra de Clifford Cl(0,2) con una base de dos
vectores. Las tres unidades imaginarias son los dos vectores de la base
junto con su producto:

         i = v     j = v     k = v  . v
              1         2         1    2

Aunque el paquete `atensor' incluye su propia definición para el
álgebra de cuaterniones, no se utiliza en el siguiente ejemplo, en el
cual se construye la tabla de multiplicación como una matriz:


     (%i1) load(atensor);
     (%o1)       /share/tensor/atensor.mac
     (%i2) init_atensor(clifford,0,0,2);
     (%o2)                                done
     (%i3) atensimp(v[1].v[1]);
     (%o3)                                 - 1
     (%i4) atensimp((v[1].v[2]).(v[1].v[2]));
     (%o4)                                 - 1
     (%i5) q:zeromatrix(4,4);
                                     [ 0  0  0  0 ]
                                     [            ]
                                     [ 0  0  0  0 ]
     (%o5)                           [            ]
                                     [ 0  0  0  0 ]
                                     [            ]
                                     [ 0  0  0  0 ]
     (%i6) q[1,1]:1;
     (%o6)                                  1
     (%i7) for i thru adim do q[1,i+1]:q[i+1,1]:v[i];
     (%o7)                                done
     (%i8) q[1,4]:q[4,1]:v[1].v[2];
     (%o8)                               v  . v
                                          1    2
     (%i9) for i from 2 thru 4 do for j from 2 thru 4 do
           q[i,j]:atensimp(q[i,1].q[1,j]);
     (%o9)                                done
     (%i10) q;
                        [    1        v         v      v  . v  ]
                        [              1         2      1    2 ]
                        [                                      ]
                        [   v         - 1     v  . v    - v    ]
                        [    1                 1    2      2   ]
     (%o10)             [                                      ]
                        [   v      - v  . v     - 1      v     ]
                        [    2        1    2              1    ]
                        [                                      ]
                        [ v  . v      v        - v       - 1   ]
                        [  1    2      2          1            ]

El paquete `atensor' reconoce como vectores de la base símbolos
indexados, donde el símbolo es el almacenado en  `asymbol' y el índice
va desde 1 hasta `adim'. Para símbolos indexados, y sólo para ellos, se
evalúan las formas bilineales `sf', `af' y `av'. La evaluación
sustituye el valor de `aform[i,j]' en lugar de `fun(v[i],v[j])', donde
`v' representa el valor de `asymbol' y `fun' es  `af' o `sf'; o
sustituye `v[aform[i,j]]' en lugar de `av(v[i],v[j])'.

Huelga decir que las funciones `sf', `af' y `av' pueden volver a
definirse.

Cuando se carga el paquete `atensor' se hacen las siguientes
asignaciones de variables:

     dotscrules:true;
     dotdistrib:true;
     dotexptsimp:false;

Si se quiere experimentar con una álgebra no asociativa, también se
puede igualar la variable  `dotassoc' a `false'. En tal caso, sin
embargo, `atensimp' no será siempre capaz de realizar las
simplificaciones deseadas.


File: maxima.info,  Node: Funciones y variables para atensor,  Prev: Introducción a atensor,  Up: atensor

27.2 Funciones y variables para atensor
=======================================

 -- Función: init_atensor (<alg_type>, <opt_dims>)
 -- Función: init_atensor (<alg_type>)
     Inicializa el paquete `atensor' con el tipo de álgebra
     especificado, <alg_type>, que puede ser una de las siguientes:

     `universal': El álgebra universal no tiene reglas de conmutación.

     `grassmann': El álgebra de Grassman se define mediante la relación
     de conmutación `u.v+v.u=0'.

     `clifford': El álgebra de Clifford se define mediante la regla de
     conmutación  `u.v+v.u=-2*sf(u,v)' donde  `sf' es una función
     escalar simétrica. Para esta álgebra,  <opt_dims> puede contener
     hasta tres enteros no negativos, que representan el número de
     dimensiones positivas, degeneradas y negativas, respectivamente,
     de esta álgebra. Si se suministran los valores de <opt_dims>,
     `atensor' configurará los valores de `adim' y `aform' de forma
     apropiada. En otro caso, `adim' tomará por defecto el valor 0 y
     `aform' no se definirá.

     `symmetric': El álgebra simétrica se define mediante la regla de
     conmutación `u.v-v.u=0'.

     `symplectic': El álgebra simpléctica se define mediante la regla
     de conmutación `u.v-v.u=2*af(u,v)', donde `af' es una función
     escalar antisimétrica. Para el álgebra simpléctica, <opt_dims>
     puede contener hasta dos enteros no negativos, que representan las
     dimensiones no degeneradas y degeneradas, respectivamente. Si se
     suministran los valores de <opt_dims>, `atensor' configurará los
     valores de `adim' y `aform' de forma apropiada. En otro caso,
     `adim' tomará por defecto el valor 0 y `aform' no se definirá.

     `lie_envelop': El álgebra de la envolvente de Lie se define
     mediante la regla de conmutación `u.v-v.u=2*av(u,v)', donde `av'
     es una función antisimétrica.

     La función `init_atensor' también reconoce algunos tipos de
     álgebras predefinidas:

     `complex' implementa el álgebra de números complejos como un
     álgebra de Clifford Cl(0,1). La llamada  `init_atensor(complex)'
     equivale a `init_atensor(clifford,0,0,1)'.

     `quaternion' implementa el álgebra de cuaterniones. La llamada
     `init_atensor(quaternion)' equivale a
     `init_atensor(clifford,0,0,2)'.

     `pauli' implementa el álgebra de Pauli como un álgebra de Clifford
     Cl(3,0). La llamada `init_atensor(pauli)' equivale a
     `init_atensor(clifford,3)'.

     `dirac' implementa el álgebra de Dirac como un álgebra de Clifford
     Cl(3,1). La llamada `init_atensor(dirac)' equivale a
     `init_atensor(clifford,3,0,1)'.


 -- Función: atensimp (<expr>)
     Simplifica la expresión algebraica de un tensor  <expr> de acuerdo
     con las reglas configuradas mediante una llamada a
     `init_atensor'. La simplificación incluye la aplicación recursiva
     de las reglas de conmutación y llamadas a `sf', `af' y `av'
     siempre que sea posible. Se utiliza un algoritmo que asegure que
     la función termina siempre, incluso en el caso de expresiones
     complejas.


 -- Función: alg_type
     Tipo de álgebra. Valores válidos son `universal', `grassmann',
     `clifford', `symmetric', `symplectic' y `lie_envelop'.


 -- Variable: adim
     Valor por defecto: 0

     La dimensión del álgebra. El paquete `atensor' utiliza el valor de
     `adim' para determinar si un objeto indexado es un vector válido
     para la base. Véase `abasep'.


 -- Variable: aform
     Valor por defecto: `ident(3)'

     Valores por defecto para las formas bilineales  `sf', `af' y `av'.
     El valor por defecto es la matriz identidad `ident(3)'.


 -- Variable: asymbol
     Valor por defecto: `v'

     Símbolo para los vectores base.


 -- Función: sf (<u>, <v>)
     Una función escalar simétrica que se utiliza en relaciones de
     conmutación. La implementación por defecto analiza si los dos
     argumentos son vectores base mediante  `abasep' y en tal caso
     sustituye el valor correspondiente de la matriz  `aform'.


 -- Función: af (<u>, <v>)
     Una función escalar antisimétrica que se utiliza en relaciones de
     conmutación. La implementación por defecto analiza si los dos
     argumentos son vectores base mediante  `abasep' y en tal caso
     sustituye el valor correspondiente de la matriz  `aform'.


 -- Función: av (<u>, <v>)
     Una función antisimétrica que se utiliza en relaciones de
     conmutación. La implementación por defecto analiza si los dos
     argumentos son vectores base mediante  `abasep' y en tal caso
     sustituye el valor correspondiente de la matriz  `aform'.

     Ejemplo:

          (%i1) load(atensor);
          (%o1)       /share/tensor/atensor.mac
          (%i2) adim:3;
          (%o2)                                  3
          (%i3) aform:matrix([0,3,-2],[-3,0,1],[2,-1,0]);
                                         [  0    3   - 2 ]
                                         [               ]
          (%o3)                          [ - 3   0    1  ]
                                         [               ]
                                         [  2   - 1   0  ]
          (%i4) asymbol:x;
          (%o4)                                  x
          (%i5) av(x[1],x[2]);
          (%o5)                                 x
                                                 3


 -- Función: abasep (<v>)
     Analiza si su argumento es un vector base en `atensor'. Esto es,
     si se trata de un símbolo indexado, siendo el símbolo el mismo que
     el valor de `asymbol' y si el índice tiene un valor numérico entre
     1 y `adim'.



File: maxima.info,  Node: Sumas productos y series,  Next: Teoría de Números,  Prev: atensor,  Up: Top

28 Sumas productos y series
***************************

* Menu:

* Funciones y variables para sumas y productos::
* Introducción a las series::
* Funciones y variables para las series::
* Introducción a las series de Fourier::
* Funciones y variables para series de Fourier::
* Funciones y variables para series de Poisson::


File: maxima.info,  Node: Funciones y variables para sumas y productos,  Next: Introducción a las series,  Prev: Sumas productos y series,  Up: Sumas productos y series

28.1 Funciones y variables para sumas y productos
=================================================

 -- Función: bashindices (<expr>)
     Transforma la expresión <expr> dándole a cada sumatorio y producto
     un único índice. Esto le da a `changevar' mayor precisión cuando
     opera con sumas y productos. La forma del único índice es
     `j<number>'. La cantidad <number> se determina en función de
     `gensumnum', valor que puede cambiar el usuario. Por ejemplo,
     haciendo `gensumnum:0$'.


 -- Función: lsum (<expr>, <x>, <L>)
     Representa la suma de <expr> para cada elemento <x> en <L>.

     Se retornará la forma nominal `'lsum' si el argumento <L> no es
     una lista.

     Ejemplos:

          (%i1) lsum (x^i, i, [1, 2, 7]);
                                      7    2
          (%o1)                      x  + x  + x
          (%i2) lsum (i^2, i, rootsof (x^3 - 1, x));
                               ====
                               \      2
          (%o2)                 >    i
                               /
                               ====
                                             3
                               i in rootsof(x  - 1, x)

 -- Función: intosum (<expr>)
     Mueve los factores multiplicativos que están fuera de un sumatorio
     hacia dentro de éste. Si el índice del sumatorio aparece en la
     expresión exterior, entonces `intosum' busca un índice razonable,
     lo mismo que hace con `sumcontract'. Se trata de la operación
     contraria a extraer factores comunes de los sumatorios.

     En algunos caos puede ser necesario hacer `scanmap (multthru,
     <expr>)' antes que `intosum'.

     Ejemplo:

          (%i1) sum(2*x^2*n^k, k , 0, inf);
                                         inf
                                         ====
                                       2 \      k
          (%o1)                     2 x   >    n
                                         /
                                         ====
                                         k = 0
          (%i2) intosum(%);
                                    inf
                                    ====
                                    \        k  2
          (%o2)                      >    2 n  x
                                    /
                                    ====
                                    k = 0

 -- Función: product (<expr>, <i>, <i_0>, <i_1>)
     Representa el producto de los valores de `expr' según el índice
     <i> varía de <i_0> hasta <i_1>.  La forma nominal `'product' se
     presenta en forma de letra pi mayúscula.

     La función `product' evalúa <expr> y los límites inferior y
     superior, <i_0> y <i_1>, pero no evalúa el índice <i>.

     Si la diferencia entre los límites superior e inferior es un
     número entero, la expresión <expr> se evalúa para cada valor del
     índice <i>, siendo el resultado un producto en forma explícita.

     En caso contrario, el rango del índice no está definido,
     aplicándose entonces algunas reglas que permitan simplificar el
     producto.  Cuando la variable global `simpproduct' valga `true',
     se aplicarán reglas adicionales.  En ciertos casos, la
     simplificación dará lugar a un resultado que ya no tenga el
     formato del producto; en caso contrario se devolverá una forma
     nominal `'product'.

     Véanse también `nouns' y `evflag'.

     Ejemplos:

          (%i1) product (x + i*(i+1)/2, i, 1, 4);
          (%o1)           (x + 1) (x + 3) (x + 6) (x + 10)
          (%i2) product (i^2, i, 1, 7);
          (%o2)                       25401600
          (%i3) product (a[i], i, 1, 7);
          (%o3)                 a  a  a  a  a  a  a
                                 1  2  3  4  5  6  7
          (%i4) product (a(i), i, 1, 7);
          (%o4)          a(1) a(2) a(3) a(4) a(5) a(6) a(7)
          (%i5) product (a(i), i, 1, n);
                                       n
                                     /===\
                                      ! !
          (%o5)                       ! !  a(i)
                                      ! !
                                     i = 1
          (%i6) product (k, k, 1, n);
                                         n
                                       /===\
                                        ! !
          (%o6)                         ! !  k
                                        ! !
                                       k = 1
          (%i7) product (k, k, 1, n), simpproduct;
          (%o7)                          n!
          (%i8) product (integrate (x^k, x, 0, 1), k, 1, n);
                                       n
                                     /===\
                                      ! !    1
          (%o8)                       ! !  -----
                                      ! !  k + 1
                                     k = 1
          (%i9) product (if k <= 5 then a^k else b^k, k, 1, 10);
                                        15  40
          (%o9)                        a   b


 -- Variable opcional: simpsum
     Valor por defecto: `false'

     Si `simpsum' vale `true', se simplifica el resultado de un
     sumatorio `sum'.  Esta simplificación podrá producir en ocasiones
     una expresión compacta. Si `simpsum' vale `false' o si se utiliza
     la forma apostrofada `'sum', el valor es una forma nominal que
     representa la notación sigma habitual en matemáticas.


 -- Función: sum (<expr>, <i>, <i_0>, <i_1>)
     Representa la suma de los valores de `expr' según el índice <i>
     varía de <i_0> hasta <i_1>.  La forma nominal `'sum' se presenta
     en forma de letra sigma mayúscula.

     La función `sum' evalúa su sumando <expr> y los límites inferior y
     superior, <i_0> y <i_1>, pero no evalúa el índice <i>.

     Si la diferencia entre los límites superior e inferior es un
     número entero, el sumando <expr> se evalúa para cada valor del
     índice <i>, siendo el resultado una suma en forma explícita.

     En caso contrario, el rango del índice no está definido,
     aplicándose entonces algunas reglas que permitan simplificar la
     suma.  Cuando la variable global `simpsum' valga `true', se
     aplicarán reglas adicionales.  En ciertos casos, la simplificación
     dará lugar a un resultado que ya no tenga el formato del
     sumatorio; en caso contrario se devolverá una forma nominal
     `'product'.

     Cuando `cauchysum' vale `true', el producto de sumatorios se
     expresa como un producto de Cauchy, en cuyo caso el índice del
     sumatorio interior es función del índice del exterior, en lugar de
     variar independientemente.

     La variable global `genindex' guarda el prefijo alfabético a
     utilizar cuando sea necesario generar automáticamente el siguiente
     índice de sumatorio.

     La variable global `gensumnum' guarda el sufijo numérico a
     utilizar cuando sea necesario generar automáticamente el siguiente
     índice de sumatorio. Si `gensumnum' vale `false', un índice
     generado automáticamente constará sólo de `genindex', sin sufijo
     numérico.

     Véanse también `sumcontract', `intosum', `bashindices',
     `niceindices', `nouns' y `evflag'.

     Ejemplos:

          (%i1) sum (i^2, i, 1, 7);
          (%o1)                          140
          (%i2) sum (a[i], i, 1, 7);
          (%o2)           a  + a  + a  + a  + a  + a  + a
                           7    6    5    4    3    2    1
          (%i3) sum (a(i), i, 1, 7);
          (%o3)    a(7) + a(6) + a(5) + a(4) + a(3) + a(2) + a(1)
          (%i4) sum (a(i), i, 1, n);
                                      n
                                     ====
                                     \
          (%o4)                       >    a(i)
                                     /
                                     ====
                                     i = 1
          (%i5) sum (2^i + i^2, i, 0, n);
                                    n
                                   ====
                                   \       i    2
          (%o5)                     >    (2  + i )
                                   /
                                   ====
                                   i = 0
          (%i6) sum (2^i + i^2, i, 0, n), simpsum;
                                        3      2
                             n + 1   2 n  + 3 n  + n
          (%o6)             2      + --------------- - 1
                                            6
          (%i7) sum (1/3^i, i, 1, inf);
                                      inf
                                      ====
                                      \     1
          (%o7)                        >    --
                                      /      i
                                      ====  3
                                      i = 1
          (%i8) sum (1/3^i, i, 1, inf), simpsum;
                                          1
          (%o8)                           -
                                          2
          (%i9) sum (i^2, i, 1, 4) * sum (1/i^2, i, 1, inf);
                                        inf
                                        ====
                                        \     1
          (%o9)                      30  >    --
                                        /      2
                                        ====  i
                                        i = 1
          (%i10) sum (i^2, i, 1, 4) * sum (1/i^2, i, 1, inf), simpsum;
                                            2
          (%o10)                       5 %pi
          (%i11) sum (integrate (x^k, x, 0, 1), k, 1, n);
                                      n
                                     ====
                                     \       1
          (%o11)                      >    -----
                                     /     k + 1
                                     ====
                                     k = 1
          (%i12) sum (if k <= 5 then a^k else b^k, k, 1, 10));
                    10    9    8    7    6    5    4    3    2
          (%o12)   b   + b  + b  + b  + b  + a  + a  + a  + a  + a


 -- Función: sumcontract (<expr>)
     Combina todos los sumatorios de una suma cuyos límites inferiores y
     superiores difieren por constantes. El resultado es una expresión
     que contiene un sumatorio por cada conjunto de tales sumatorios,
     más todos los demás términos adicionales que tuvieron que
     extraerse para formar la suma. La función `sumcontract' combina
     todos los sumatorios compatibles y utiliza uno de los índices de
     uno de los sumatorios si puede, si no formará un índice que sea
     razonable.

     Puede ser necesario hacer `intosum (<expr>)' antes que
     `sumcontract'.

     Ejemplo:

          (%i1) 'sum(1/l,l,1,n)+'sum(k,k,1,n+2);
                                   n        n + 2
                                  ====      ====
                                  \     1   \
          (%o1)                    >    - +  >    k
                                  /     l   /
                                  ====      ====
                                  l = 1     k = 1
          (%i2) sumcontract(%);
                                      n
                                     ====
                                     \          1
          (%o2)                2 n +  >    (l + -) + 3
                                     /          l
                                     ====
                                     l = 1

 -- Variable opcional: sumexpand
     Valor por defecto: `false'

     Si `sumexpand' vale `true', productos de sumatorios y de
     sumatorios con exponentes se reducen a sumatorios anidados.

     Véase también `cauchysum'.

     Ejemplos:

          (%i1) sumexpand: true$
          (%i2) sum (f (i), i, 0, m) * sum (g (j), j, 0, n);
                               m      n
                              ====   ====
                              \      \
          (%o2)                >      >     f(i1) g(i2)
                              /      /
                              ====   ====
                              i1 = 0 i2 = 0
          (%i3) sum (f (i), i, 0, m)^2;
                               m      m
                              ====   ====
                              \      \
          (%o3)                >      >     f(i3) f(i4)
                              /      /
                              ====   ====
                              i3 = 0 i4 = 0



File: maxima.info,  Node: Introducción a las series,  Next: Funciones y variables para las series,  Prev: Funciones y variables para sumas y productos,  Up: Sumas productos y series

28.2 Introducción a las series
==============================

Maxima dispone de las funciones `taylor' y `powerseries' para calcular
las series de las funciones diferenciables. También tiene herramientas
como `nusum' capaces de encontrar la expresión compacta de algunas
series.  Operaciones como la suma y la multiplicación operan de la
forma habitual en el contexto de las series. Esta sección presenta las
variables globales que controlan la expansión.


File: maxima.info,  Node: Funciones y variables para las series,  Next: Introducción a las series de Fourier,  Prev: Introducción a las series,  Up: Sumas productos y series

28.3 Funciones y variables para las series
==========================================

 -- Variable opcional: cauchysum
     Valor por defecto: `false'

     Cuando se multiplican sumatorios infinitos, si `sumexpand' vale
     `true' y `cauchysum' vale `true', entonces se utilizará el
     producto  de Cauchy en lugar del usual. En el producto de Cauchy
     el índice de la suma interna es función del índice de la exterior
     en lugar de variar de forma independiente. Un ejemplo aclara esta
     idea:

          (%i1) sumexpand: false$
          (%i2) cauchysum: false$
          (%i3) s: sum (f(i), i, 0, inf) * sum (g(j), j, 0, inf);
                                inf         inf
                                ====        ====
                                \           \
          (%o3)                ( >    f(i))  >    g(j)
                                /           /
                                ====        ====
                                i = 0       j = 0
          (%i4) sumexpand: true$
          (%i5) cauchysum: true$
          (%i6) ''s;
                           inf     i1
                           ====   ====
                           \      \
          (%o6)             >      >     g(i1 - i2) f(i2)
                           /      /
                           ====   ====
                           i1 = 0 i2 = 0


 -- Función: deftaylor (<f_1>(<x_1>), <expr_1>, ..., <f_n>(<x_n>),
          <expr_n>)
     Para cada función <f_i> de variable <x_i>,  `deftaylor' define
     <expr_i> como una serie de Taylor alrededor de cero. La expresión
     <expr_i> será un polinomio en  <x_i> o una suma; `deftaylor'
     admite también expresiones más generales.

     La llamada `powerseries (<f_i>(<x_i>), <x_i>, 0)' devuelve la
     serie definida por  `deftaylor'.

     La función `deftaylor' evalúa sus argumentos y devuelve la lista
     de las funciones <f_1>, ..., <f_n>.

     Ejemplo:

          (%i1) deftaylor (f(x), x^2 + sum(x^i/(2^i*i!^2), i, 4, inf));
          (%o1)                          [f]
          (%i2) powerseries (f(x), x, 0);
                                inf
                                ====      i1
                                \        x         2
          (%o2)                  >     -------- + x
                                /       i1    2
                                ====   2   i1!
                                i1 = 4
          (%i3) taylor (exp (sqrt (f(x))), x, 0, 4);
                                2         3          4
                               x    3073 x    12817 x
          (%o3)/T/     1 + x + -- + ------- + -------- + . . .
                               2     18432     307200


 -- Variable opcional: maxtayorder
     Valor por defecto: `true'

     Si `maxtayorder' vale `true', entonces durante la manipulación
     algebraica de series truncadas de Taylor, la función `taylor'
     trata de retener tantos términos correctos como sea posible.


 -- Función: niceindices (<expr>)
     Cambia las etiquetas de los índices de sumas y productos de
     <expr>. La función `niceindices' trata de cambiar cada índice al
     valor de `niceindicespref[1]', a menos que esa etiqueta aparezca
     ya en el sumando o factor, en cuyo caso  `niceindices' realiza
     intentos con los siguientes elementos de  `niceindicespref', hasta
     que encuentre una variable que que no esté en uso. Si todas las
     variables de la lista han sido ya revisadas, se formarán nuevos
     ínices añadiendo números enteros al valor de `niceindicespref[1]',
     como `i0', `i1', `i2', ....

     La función `niceindices' evalúa sus argumentos y devuelve una
     expresión.

     Ejemplo:

          (%i1) niceindicespref;
          (%o1)                  [i, j, k, l, m, n]
          (%i2) product (sum (f (foo + i*j*bar), foo, 1, inf), bar, 1, inf);
                           inf    inf
                          /===\   ====
                           ! !    \
          (%o2)            ! !     >      f(bar i j + foo)
                           ! !    /
                          bar = 1 ====
                                  foo = 1
          (%i3) niceindices (%);
                               inf  inf
                              /===\ ====
                               ! !  \
          (%o3)                ! !   >    f(i j l + k)
                               ! !  /
                              l = 1 ====
                                    k = 1


 -- Variable opcional: niceindicespref
     Valor por defecto: `[i, j, k, l, m, n]'

     La variable `niceindicespref' es la lista de la que la función
     `niceindices' va tomando nombres de etiquetas para índices de
     sumatorios y productos.

     En `niceindicespref' se guardan normalmente nombres de variables.

     Ejemplo:

          (%i1) niceindicespref: [p, q, r, s, t, u]$
          (%i2) product (sum (f (foo + i*j*bar), foo, 1, inf), bar, 1, inf);
                           inf    inf
                          /===\   ====
                           ! !    \
          (%o2)            ! !     >      f(bar i j + foo)
                           ! !    /
                          bar = 1 ====
                                  foo = 1
          (%i3) niceindices (%);
                               inf  inf
                              /===\ ====
                               ! !  \
          (%o3)                ! !   >    f(i j q + p)
                               ! !  /
                              q = 1 ====
                                    p = 1


 -- Función: nusum (<expr>, <x>, <i_0>, <i_1>)
     Calcula la suma hipergeométrica indefinida de  <expr> con respecto
     a la variable  <x> utilizando una procedimiento de decisión debido
     a R.W. Gosper. La expresión <expr> y el resultado deben poder ser
     escritos como productos de potencias enteras, factoriales,
     coeficientes binomiales y funciones racionales.

     Los términos suma "definida" e "indefinida" se usan de forma
     análoga a integración "definida" e "indefinida". La suma
     indefinida significa dar un resultado simbólico.

     Las funciones `nusum' y `unsum' disponen de cierta información
     sobre sumas y diferencias de productos finitos. Véase también
     `unsum'.

     Ejemplos:

          (%i1) nusum (n*n!, n, 0, n);

          Dependent equations eliminated:  (1)
          (%o1)                     (n + 1)! - 1
          (%i2) nusum (n^4*4^n/binomial(2*n,n), n, 0, n);
                               4        3       2              n
                2 (n + 1) (63 n  + 112 n  + 18 n  - 22 n + 3) 4      2
          (%o2) ------------------------------------------------ - ------
                              693 binomial(2 n, n)                 3 11 7
          (%i3) unsum (%, n);
                                        4  n
                                       n  4
          (%o3)                   ----------------
                                  binomial(2 n, n)
          (%i4) unsum (prod (i^2, i, 1, n), n);
                              n - 1
                              /===\
                               ! !   2
          (%o4)              ( ! !  i ) (n - 1) (n + 1)
                               ! !
                              i = 1
          (%i5) nusum (%, n, 1, n);

          Dependent equations eliminated:  (2 3)
                                      n
                                    /===\
                                     ! !   2
          (%o5)                      ! !  i  - 1
                                     ! !
                                    i = 1


 -- Función: pade (<taylor_series>, <numer_deg_bound>,
          <denom_deg_bound>)
     Devuelve la lista de todas las funciones racionales que tienen el
     desarrollo de Taylor dado, en las que la suma de los grados del
     numerador y denominador es menor o igual que el nivel de
     truncamiento de la serie de potencias.

     La expresión <taylor_series> es una serie de Taylor univariante.
     Los argumentos <numer_deg_bound> y <denom_deg_bound> son enteros
     positivos que indican las cotas para numerador y denominador.

     La expresión <taylor_series> también puede ser una serie de
     Laurent, y las cotas de los grados pueden ser `inf'. El grado
     total se define como `<numer_deg_bound> + <denom_deg_bound>'. La
     longitud de una serie de potencias se define como `"truncation
     level" + 1 - min(0, "order of series")'.

          (%i1) taylor (1 + x + x^2 + x^3, x, 0, 3);
                                        2    3
          (%o1)/T/             1 + x + x  + x  + . . .
          (%i2) pade (%, 1, 1);
                                           1
          (%o2)                       [- -----]
                                         x - 1
          (%i3) t: taylor(-(83787*x^10 - 45552*x^9 - 187296*x^8
                             + 387072*x^7 + 86016*x^6 - 1507328*x^5
                             + 1966080*x^4 + 4194304*x^3 - 25165824*x^2
                             + 67108864*x - 134217728)
                 /134217728, x, 0, 10);
                              2    3       4       5       6        7
                       x   3 x    x    15 x    23 x    21 x    189 x
          (%o3)/T/ 1 - - + ---- - -- - ----- + ----- - ----- - ------
                       2    16    32   1024    2048    32768   65536

                                            8         9          10
                                      5853 x    2847 x    83787 x
                                    + ------- + ------- - --------- + . . .
                                      4194304   8388608   134217728
          (%i4) pade (t, 4, 4);
          (%o4)                          []

     No hay ninguna función racional de grado 4 en numerador y
     denominador con este desarrollo en serie de potencias. Es
     necesario dar un número de grados al numerador y denominador cuya
     suma sea al menos el grado del desarrollo de la serie, a fin de
     disponer de un número suficiente de coeficientes desconocidos para
     calcular.

          (%i5) pade (t, 5, 5);
                               5                4                 3
          (%o5) [- (520256329 x  - 96719020632 x  - 489651410240 x

                            2
           - 1619100813312 x  - 2176885157888 x - 2386516803584)

                         5                 4                  3
          /(47041365435 x  + 381702613848 x  + 1360678489152 x

                            2
           + 2856700692480 x  + 3370143559680 x + 2386516803584)]


 -- Función: powerseries (<expr>, <x>, <a>)
     Devuelve la forma general del desarrollo en serie de potencias de
     <expr> para la variable <x> alrededor del punto <a> (que puede ser
     `inf', de infinito):
                     inf
                     ====
                     \               n
                      >    b  (x - a)
                     /      n
                     ====
                     n = 0

     Si `powerseries' no es capaz de desarrollar <expr>, la función
     `taylor' puede calcular los primeros términos de la serie.

     Si `verbose' vale `true', `powerseries' va mostrando mensajes
     mientras progresa el cálculo.

          (%i1) verbose: true$
          (%i2) powerseries (log(sin(x)/x), x, 0);
          can't expand
                                           log(sin(x))
          so we'll try again after applying the rule:
                                                  d
                                                / -- (sin(x))
                                                [ dx
                                  log(sin(x)) = i ----------- dx
                                                ]   sin(x)
                                                /
          in the first simplification we have returned:
                                       /
                                       [
                                       i cot(x) dx - log(x)
                                       ]
                                       /
                              inf
                              ====        i1  2 i1             2 i1
                              \      (- 1)   2     bern(2 i1) x
                               >     ------------------------------
                              /                i1 (2 i1)!
                              ====
                              i1 = 1
          (%o2)                -------------------------------------
                                                2


 -- Variable opcional: psexpand
     Valor por defecto: `false'

     Si `psexpand' vale `true', toda expresi'on racional se muestra
     completamente expandida. La variable `ratexpand' tiene el mismo
     efecto.

     Si `psexpand' vale `false', las expresines multivariantes se
     presentan tal como lo hace el paquete de funciones racionales.

     Si `psexpand' vale  `multi', los términos de igual grado son
     agrupados.


 -- Función: revert (<expr>, <x>)
 -- Función: revert2 (<expr>, <x>, <n>)
     Estas funciones devuelven el recíproco de <expr> en forma de
     desarrollo de Taylor alrededor de cero respecto de la variable
     <x>. La función `revert' devuelve un polinomio de grado igual a la
     mayor potencia en <expr>.  La función `revert2' devuelve un
     polinomio de grado <n>, el cual puede ser mayor, igual o menor que
     el grado de  <expr>.

     Para utilizar estas funciones es necesario cargarlas en memoria
     mediante `load ("revert")'.

     Ejemplos:

          (%i1) load ("revert")$
          (%i2) t: taylor (exp(x) - 1, x, 0, 6);
                             2    3    4    5     6
                            x    x    x    x     x
          (%o2)/T/      x + -- + -- + -- + --- + --- + . . .
                            2    6    24   120   720
          (%i3) revert (t, x);
                         6       5       4       3       2
                     10 x  - 12 x  + 15 x  - 20 x  + 30 x  - 60 x
          (%o3)/R/ - --------------------------------------------
                                          60
          (%i4) ratexpand (%);
                               6    5    4    3    2
                              x    x    x    x    x
          (%o4)             - -- + -- - -- + -- - -- + x
                              6    5    4    3    2
          (%i5) taylor (log(x+1), x, 0, 6);
                              2    3    4    5    6
                             x    x    x    x    x
          (%o5)/T/       x - -- + -- - -- + -- - -- + . . .
                             2    3    4    5    6
          (%i6) ratsimp (revert (t, x) - taylor (log(x+1), x, 0, 6));
          (%o6)                           0
          (%i7) revert2 (t, x, 4);
                                    4    3    2
                                   x    x    x
          (%o7)                  - -- + -- - -- + x
                                   4    3    2


 -- Función: taylor (<expr>, <x>, <a>, <n>)
 -- Función: taylor (<expr>, [<x_1>, <x_2>, ...], <a>, <n>)
 -- Función: taylor (<expr>, [<x>, <a>, <n>, 'asymp])
 -- Función: taylor (<expr>, [<x_1>, <x_2>, ...], [<a_1>, <a_2>, ...],
          [<n_1>, <n_2>, ...])
 -- Función: taylor (<expr>, [<x_1>, <a_1>, <n_1>], [<x_2>, <a_2>,
          <n_2>], ...)
     La llamada `taylor (<expr>, <x>, <a>, <n>)' expande la expresión
     <expr> en un desarrollo  de  Taylor o de  Laurent respecto de la
     variable <x> alrededor del punto <a>, con términos hasta `(<x> -
     <a>)^<n>'.

     Si <expr> es de la forma `<f>(<x>)/<g>(<x>)' y `<g>(<x>)' no tiene
     términos hasta de grado <n>, entonces `taylor' intenta expandir
     `<g>(<x>)' hasta el grado  `2 <n>'. Si aún así no hay términos no
     nulos, `taylor' dobla el grado de la expansión de `<g>(<x>)' hasta
     que el grado de la expansión sea menor o igual que `<n>
     2^taylordepth'.

     La llamada `taylor (<expr>, [<x_1>, <x_2>, ...], <a>, <n>)'
     devuelve la serie en potencias truncada de grado  <n> en todas las
     variables <x_1>, <x_2>, ... alrededor del punto `(<a>, <a>, ...)'.

     La llamada `taylor (<expr>, [<x_1>, <a_1>, <n_1>], [<x_2>, <a_2>,
     <n_2>], ...)' devuelve la serie en potencias truncada en las
     variables <x_1>, <x_2>, ... alrededor del punto `(<a_1>, <a_2>,
     ...)'; el truncamiento se realiza, respectivamente, en los grados
     <n_1>, <n_2>, ....

     La llamada `taylor (<expr>, [<x_1>, <x_2>, ...], [<a_1>, <a_2>,
     ...], [<n_1>, <n_2>, ...])' devuelve la serie en potencias
     truncada en las variables <x_1>, <x_2>, ... alrededor del punto
     `(<a_1>, <a_2>, ...)', el truncamiento se realiza,
     respectivamente, en los grados <n_1>, <n_2>, ....

     La llamada `taylor (<expr>, [<x>, <a>, <n>, 'asymp])' devuelve el
     desarrollo de  <expr> en potencias negativas de `<x> - <a>'. El
     término de mayor orden es `(<x> - <a>)^<-n>'.

     Si `maxtayorder' vale `true', entonces durante la manipulación
     algebraica de las series (truncadas) de Taylor, la función
     `taylor' intenta mantener tantos términos correctos como sea
     posible.

     Si `psexpand' vale `true', una expresión racional desarrollada se
     muestra completamente expandida. La variable  `ratexpand' tiene el
     mismo efecto. Si `psexpand' vale `false', una expresión
     multivariante se mostrará tal como lo hace el paquete de funciones
     racionales. Si  `psexpand' vale  `multi', los términos del mismo
     grado son agrupados.

     Véase también la variable `taylor_logexpand' para el control del
     desarrollo.

     Ejemplos:

          (%i1) taylor (sqrt (sin(x) + a*x + 1), x, 0, 3);
                                     2             2
                       (a + 1) x   (a  + 2 a + 1) x
          (%o1)/T/ 1 + --------- - -----------------
                           2               8

                                             3      2             3
                                         (3 a  + 9 a  + 9 a - 1) x
                                       + -------------------------- + . . .
                                                     48
          (%i2) %^2;
                                              3
                                             x
          (%o2)/T/           1 + (a + 1) x - -- + . . .
                                             6
          (%i3) taylor (sqrt (x + 1), x, 0, 5);
                                 2    3      4      5
                            x   x    x    5 x    7 x
          (%o3)/T/      1 + - - -- + -- - ---- + ---- + . . .
                            2   8    16   128    256
          (%i4) %^2;
          (%o4)/T/                  1 + x + . . .
          (%i5) product ((1 + x^i)^2.5, i, 1, inf)/(1 + x^2);
                                   inf
                                  /===\
                                   ! !    i     2.5
                                   ! !  (x  + 1)
                                   ! !
                                  i = 1
          (%o5)                   -----------------
                                        2
                                       x  + 1
          (%i6) ev (taylor(%, x,  0, 3), keepfloat);
                                         2           3
          (%o6)/T/    1 + 2.5 x + 3.375 x  + 6.5625 x  + . . .
          (%i7) taylor (1/log (x + 1), x, 0, 3);
                                         2       3
                           1   1   x    x    19 x
          (%o7)/T/         - + - - -- + -- - ----- + . . .
                           x   2   12   24    720
          (%i8) taylor (cos(x) - sec(x), x, 0, 5);
                                          4
                                     2   x
          (%o8)/T/                - x  - -- + . . .
                                         6
          (%i9) taylor ((cos(x) - sec(x))^3, x, 0, 5);
          (%o9)/T/                    0 + . . .
          (%i10) taylor (1/(cos(x) - sec(x))^3, x, 0, 5);
                                                         2          4
                      1     1       11      347    6767 x    15377 x
          (%o10)/T/ - -- + ---- + ------ - ----- - ------- - --------
                       6      4        2   15120   604800    7983360
                      x    2 x    120 x

                                                                    + . . .
          (%i11) taylor (sqrt (1 - k^2*sin(x)^2), x, 0, 6);
                         2  2       4      2   4
                        k  x    (3 k  - 4 k ) x
          (%o11)/T/ 1 - ----- - ----------------
                          2            24

                                              6       4       2   6
                                         (45 k  - 60 k  + 16 k ) x
                                       - -------------------------- + . . .
                                                    720
          (%i12) taylor ((x + 1)^n, x, 0, 4);
                                2       2     3      2         3
                              (n  - n) x    (n  - 3 n  + 2 n) x
          (%o12)/T/ 1 + n x + ----------- + --------------------
                                   2                 6

                                         4      3       2         4
                                       (n  - 6 n  + 11 n  - 6 n) x
                                     + ---------------------------- + . . .
                                                    24
          (%i13) taylor (sin (y + x), x, 0, 3, y, 0, 3);
                         3                 2
                        y                 y
          (%o13)/T/ y - -- + . . . + (1 - -- + . . .) x
                        6                 2

                              3                       2
                         y   y            2      1   y            3
                    + (- - + -- + . . .) x  + (- - + -- + . . .) x  + . . .
                         2   12                  6   12
          (%i14) taylor (sin (y + x), [x, y], 0, 3);
                               3        2      2      3
                              x  + 3 y x  + 3 y  x + y
          (%o14)/T/   y + x - ------------------------- + . . .
                                          6
          (%i15) taylor (1/sin (y + x), x, 0, 3, y, 0, 3);
                    1   y              1    1               1            2
          (%o15)/T/ - + - + . . . + (- -- + - + . . .) x + (-- + . . .) x
                    y   6               2   6                3
                                       y                    y

                                                     1            3
                                                + (- -- + . . .) x  + . . .
                                                      4
                                                     y
          (%i16) taylor (1/sin (y + x), [x, y], 0, 3);
                                       3         2       2        3
                      1     x + y   7 x  + 21 y x  + 21 y  x + 7 y
          (%o16)/T/ ----- + ----- + ------------------------------- + . . .
                    x + y     6                   360


 -- Variable opcional: taylordepth
     Valor por defecto: 3

     Si todavía no hay términos no nulos, la función `taylor' dobla el
     grado del desarrollo de `<g>(<x>)' tantas veces como sea necesario
     para que el grado del desarrollo sea menor o igual que `<n>
     2^taylordepth'.


 -- Función: taylorinfo (<expr>)
     Devuelve información sobre el desarrollo de Taylor <expr>. El
     valor devuelto por esta función es una lista de listas. Cada lista
     contiene el nombre de una variable, el punto de expansión y el
     grado del desarrollo.

     La función `taylorinfo' devuelve `false' si <expr> no es un
     desarrollo de Taylor.

     Ejemplo:

          (%i1) taylor ((1 - y^2)/(1 - x), x, 0, 3, [y, a, inf]);
                            2                       2
          (%o1)/T/ - (y - a)  - 2 a (y - a) + (1 - a )

                   2                        2
           + (1 - a  - 2 a (y - a) - (y - a) ) x

                   2                        2   2
           + (1 - a  - 2 a (y - a) - (y - a) ) x

                   2                        2   3
           + (1 - a  - 2 a (y - a) - (y - a) ) x  + . . .
          (%i2) taylorinfo(%);
          (%o2)               [[y, a, inf], [x, 0, 3]]


 -- Función: taylorp (<expr>)
     Devuelve `true' si <expr> es un desarrollo de Taylor y `false' en
     caso contrario.


 -- Variable opcional: taylor_logexpand
     Valor por defecto: `true'

     La variable `taylor_logexpand' controla los desarrollos de
     logaritmos en la función `taylor'.

     Si `taylor_logexpand' vale `true', todos los logaritmos se
     expanden completamente de manera que algunos problemas que se
     plantean debido a ciertas identidades logarítmicas no interfieran
     con el proceso del cálculo del desarrollo de Taylor. Sin embargo,
     este proceder no es del todo correcto.


 -- Variable opcional: taylor_order_coefficients
     Valor por defecto: `true'

     La variable `taylor_order_coefficients' controla la ordenación de
     los coeficientes en un desarrollo de Taylor.

     Si `taylor_order_coefficients' vale `true', los coeficientes del
     desarrollo de Taylor se ordenan de la forma canónica.


 -- Función: taylor_simplifier (<expr>)
     Simplifica los coeficientes de la serie de potencias <expr>. Esta
     función es llamada desde la función `taylor'.


 -- Variable opcional: taylor_truncate_polynomials
     Valor por defecto: `true'

     Si `taylor_truncate_polynomials' vale `true', los polinomios
     quedan truncados en base a los niveles de truncamiento de entrada.

     En otro caso, aquellos polinomios que se utilicen como entrada a
     la función  `taylor' se consideran que tienen precisión infinita.


 -- Función: taytorat (<expr>)
     Convierte <expr> del formato de `taylor' al formato CRE (Canonical
     Rational Expression). El efecto es el mismo que haciendo  `rat
     (ratdisrep (<expr>))', pero más rápido.


 -- Función: trunc (<expr>)
     Devuelve la representación interna de la expresión <expr> de tal
     forma como si sus sumas fuesen una serie truncada de Taylor. La
     expresión <expr> no sufre ninguna otra modificación.

     Ejemplo:

          (%i1) expr: x^2 + x + 1;
                                      2
          (%o1)                      x  + x + 1
          (%i2) trunc (expr);
                                          2
          (%o2)                  1 + x + x  + . . .
          (%i3) is (expr = trunc (expr));
          (%o3)                         true


 -- Función: unsum (<f>, <n>)
     Devuelve la diferencia `<f>(<n>) - <f>(<n> - 1)'. En cierto
     sentido `unsum' es la inversa de `sum'.

     Véase también `nusum'.

     Ejemplos:

          (%i1) g(p) := p*4^n/binomial(2*n,n);
                                               n
                                            p 4
          (%o1)               g(p) := ----------------
                                      binomial(2 n, n)
          (%i2) g(n^4);
                                        4  n
                                       n  4
          (%o2)                   ----------------
                                  binomial(2 n, n)
          (%i3) nusum (%, n, 0, n);
                               4        3       2              n
                2 (n + 1) (63 n  + 112 n  + 18 n  - 22 n + 3) 4      2
          (%o3) ------------------------------------------------ - ------
                              693 binomial(2 n, n)                 3 11 7
          (%i4) unsum (%, n);
                                        4  n
                                       n  4
          (%o4)                   ----------------
                                  binomial(2 n, n)


 -- Variable opcional: verbose
     Valor por defecto: `false'

     Si `verbose' vale `true', la función `powerseries' va imprimiendo
     mensajes durante su ejecución.



File: maxima.info,  Node: Introducción a las series de Fourier,  Next: Funciones y variables para series de Fourier,  Prev: Funciones y variables para las series,  Up: Sumas productos y series

28.4 Introducción a las series de Fourier
=========================================

El paquete `fourie' contiene funciones para el cálculo simbólico de
series de Fourier. Hay funciones en el paquete `fourie' para calcular
los coeficientes y para manipular las expresiones.


File: maxima.info,  Node: Funciones y variables para series de Fourier,  Next: Funciones y variables para series de Poisson,  Prev: Introducción a las series de Fourier,  Up: Sumas productos y series

28.5 Funciones y variables para series de Fourier
=================================================

 -- Función: equalp (<x>, <y>)
     Devuelve `true' si `equal (<x>, <y>)', en otro caso devuelve
     `false'. No devuelve el mensaje de error que se obtiene de  `equal
     (x, y)' en un caso como éste.

 -- Función: remfun (<f>, <expr>)
 -- Función: remfun (<f>, <expr>, <x>)
     La llamada `remfun (<f>, <expr>)' reemplaza todas las
     subexpresiones `<f> (<arg>)' por <arg> en <expr>.

     La llamada `remfun (<f>, <expr>, <x>)' reemplaza todas las
     subexpresiones `<f> (<arg>)' por <arg> en <expr> sólo si <arg>
     contiene a la variable <x>.

 -- Función: funp (<f>, <expr>)
 -- Función: funp (<f>, <expr>, <x>)
     La llamada `funp (<f>, <expr>)' devuelve `true' si <expr> contiene
     la función <f>.

     La llamada `funp (<f>, <expr>, <x>)' devuelve `true' si <expr>
     contiene la función <f> y la variable <x> está presente en el
     argumento de alguna de las presencias de <f>.

 -- Función: absint (<f>, <x>, <halfplane>)
 -- Función: absint (<f>, <x>)
 -- Función: absint (<f>, <x>, <a>, <b>)
     La llamada `absint (<f>, <x>, <halfplane>)' devuelve la integral
     indefinida de <f> con respecto a <x> en el semiplano dado (`pos',
     `neg' o `both'). La función <f> puede contener expresiones de la
     forma `abs (x)', `abs (sin (x))', `abs (a) * exp (-abs (b) * abs
     (x))'.

     La llamada `absint (<f>, <x>)' equivale a `absint (<f>, <x>, pos)'.

     La llamada `absint (<f>, <x>, <a>, <b>)' devuelve la integral
     definida de <f> con respecto a  <x> de <a> a <b>.

 -- Función: fourier (<f>, <x>, <p>)
     Devuelve una lista con los coeficientes de Fourier de `<f>(<x>)'
     definida en el intervalo `[-p, p]'.

 -- Función: foursimp (<l>)
     Simplifica `sin (n %pi)' a 0 si `sinnpiflag' vale `true' y `cos (n
     %pi)' a `(-1)^n' si `cosnpiflag' vale `true'.

 -- Variable opcional: sinnpiflag
     Valor por defecto: `true'

     Véase `foursimp'.

 -- Variable opcional: cosnpiflag
     Valor por defecto: `true'

     Véase `foursimp'.


 -- Función: fourexpand (<l>, <x>, <p>, <limit>)
     Calcula y devuelve la serie de Fourier a partir de la lista de los
     coeficientes de Fourier <l> hasta el término <limit> (<limit>
     puede ser `inf'). Los argumentos <x> y <p> tienen el mismo
     significado que en `fourier'.

 -- Función: fourcos (<f>, <x>, <p>)
     Devuelve los coeficientes de los cosenos de Fourier de `<f>(<x>)'
     definida en `[0, <p>]'.

 -- Función: foursin (<f>, <x>, <p>)
     Devuelve los coeficientes de los senos de Fourier de `<f>(<x>)'
     definida en `[0, <p>]'.

 -- Función: totalfourier (<f>, <x>, <p>)
     Devuelve `fourexpand (foursimp (fourier (<f>, <x>, <p>)), <x>,
     <p>, 'inf)'.

 -- Función: fourint (<f>, <x>)
     Calcula y devuelve la lista de los coeficientes integrales de
     Fourier de `<f>(<x>)' definida en `[minf, inf]'.

 -- Función: fourintcos (<f>, <x>)
     Devuelve los coeficientes integrales de los cosenos  `<f>(<x>)' en
     `[0, inf]'.

 -- Función: fourintsin (<f>, <x>)
     Devuelve los coeficientes integrales de los senos  `<f>(<x>)' en
     `[0, inf]'.


File: maxima.info,  Node: Funciones y variables para series de Poisson,  Prev: Funciones y variables para series de Fourier,  Up: Sumas productos y series

28.6 Funciones y variables para series de Poisson
=================================================

 -- Función: intopois (<a>)
     Convierte <a> en un codificado Poisson.


 -- Función: outofpois (<a>)
     Convierte <a> desde codificado de Poisson a una representación
     general.  Si <a> no está en forma de Poisson, `outofpois' hace la
     conversión, siendo entonces el valor retornado `outofpois
     (intopois (<a>))'. Esta función es un simplificador canónico para
     sumas de potencias de senos y cosenos.


 -- Función: poisdiff (<a>, <b>)
     Deriva <a> con respecto a <b>. El argumento <b> debe aparecer sólo
     en los argumentos trigonométricos o sólo en los coeficientes.


 -- Función: poisexpt (<a>, <b>)
     Idéntico a `intopois (<a>^<b>)'. El argumento <b> debe ser un
     entero positivo.


 -- Función: poisint (<a>, <b>)
     Integra en un sentido restringido similar a `poisdiff'.

 -- Variable optativa: poislim
     Valor por defecto: 5

     La variable `poislim' determina el dominio de los coeficientes en
     los argumentos de las funciones trigonométricas.  El valor por
     defecto 5 corresponde al intervalo [-2^(5-1)+1,2^(5-1)], o
     [-15,16], pero puede reasignarse para  [-2^(n-1)+1, 2^(n-1)].


 -- Función: poismap (<series>, <sinfn>, <cosfn>)
     Aplica las funciones <sinfn> a los términos sinusoidales y las
     funciones <cosfn> a los cosenoidales de la serie de Poisson dada.
     Tanto <sinfn> como <cosfn> son funciones de dos argumentos, los
     cuales son un coeficiente y una parte trigonométrica de un término
     de la serie.

 -- Función: poisplus (<a>, <b>)
     Idéntico a `intopois (a + b)'.


 -- Función: poissimp (<a>)
     Convierte <a> en una serie de Poisson para <a> en su
     representación general.


 -- Símbolo especial: poisson
     El símbolo `/P/' sigue a la etiqueta de las líneas que contienen
     expresiones que son series de Poisson.


 -- Función: poissubst (<a>, <b>, <c>)
     Sustituye <b> por <a> en <c>, donde  <c> es una serie de Poisson.

     (1) Si <b> es una de las variables <u>, <v>, <w>, <x>, <y> o <z>,
     entonces <a> debe ser una expresión lineal en esas variables (por
     ejemplo, `6*u + 4*v').

     (2) Si <b> no es ninguna de esas variables, entonces <a> no puede
     contener tampoco a ninguna de ellas, ni senos, ni cosenos.


 -- Función: poistimes (<a>, <b>)
     Idéntico a `intopois (<a>*<b>)'.


 -- Función: printpois (<a>)
     Presenta una serie de Poisson en un formato legible.
     Conjuntamente con `outofpois', si es necesario convertirá <a>
     primero en una codificación de Poisson.



File: maxima.info,  Node: Teoría de Números,  Next: Simetrías,  Prev: Sumas productos y series,  Up: Top

29 Teoría de Números
********************

* Menu:

* Funciones y variables para teoría de números::



Local Variables:
coding: iso-8859-1
End:
