/* Code by Fabrizio Caruso */


/* page 276 */
page276 : 9*x^13-18*x^11-33*x^10+102*x^8+7*x^7-36*x^6-122*x^5+49*x^4+93*x^3-42*x^2-18*x+9;
     
test : x^4+a*x^2+b*x+c;

/* Examples from the book */
q : expand((x^3-1)*(x^2-9));
p1 : x;
p2 : x+1;
p3 : x-2;

dp1 : x^2-4;
dq1 : expand((x-2)*(x-1));
dq2 : expand((x-2)*(x^3-x));

/* sign determination */
/* check : rest(derSeq(dq2,x)), dq2, sSubResTarskiQuery, x */
plist : rest(derSeq(dq2,x)); 
test: dq2;

stest : append(derSeq(dp1,x),rest(derSeq(dq2,x)));
/* (to be tested with dq2 as input for signDetermination) */


/* to be tested with extendAdaptedFamily */
ssgns : [[0, 1, 1, 1, 1, 1], [0, 1, 1, 1, - 1, 1], 
[0, 1, 1, - 1, 1, 1], [0, 1, 1, - 1, - 1, 1], [0, 1, - 1, 1, 1, 1], 
[0, 1, - 1, 1, - 1, 1], [0, 1, - 1, - 1, 1, 1], [0, 1, - 1, - 1, - 1, 1], 
[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, - 1, 1], [1, 1, 1, - 1, 1, 1], 
[1, 1, 1, - 1, - 1, 1], [1, 1, - 1, 1, 1, 1], [1, 1, - 1, 1, - 1, 1], 
[1, 1, - 1, - 1, 1, 1], [1, 1, - 1, - 1, - 1, 1], [- 1, 1, 1, 1, 1, 1], 
[- 1, 1, 1, 1, - 1, 1], [- 1, 1, 1, - 1, 1, 1], [- 1, 1, 1, - 1, - 1, 1], 
[- 1, 1, - 1, 1, 1, 1], [- 1, 1, - 1, 1, - 1, 1], [- 1, 1, - 1, - 1, 1, 1], 
[- 1, 1, - 1, - 1, - 1, 1]];

sada : [[0, 0, 0, 0, 0], [0, 0, 0, 1, 0], [0, 0, 1, 0, 0], [0, 1, 0, 0, 0], 
[0, 1, 0, 1, 0]];

ssgnsb : [[-1,-1,-1,1],[-1,-1,1,1],[-1,1,-1,1],[-1,1,1,1],[1,-1,-1,1],[1,-1,1,1],[1,1,-1,1],[1,1,1,1]];

sadab : [[0,0,0],[0,1,0],[1,1,0]];


/* to test with adaptedFamily */
ssgns2 : [[- 1, 1, - 1, 1, 1, 1], [- 1, 1, - 1, 1, - 1, 1], [- 1, 1, - 1, - 1, 1, 1], [- 1, 1, - 1, - 1, - 1, 1]];

ssgns3 : [[1,1,1],[1,-1,1],[-1,1,1],[-1,-1,1]];

ssgns4 :
[[0, 1, 1, - 1, - 1, 1],
[0, 1, - 1, 1, 1, 1],
[0, 1, - 1, 1, - 1, 1],
[0, 1, - 1, - 1, 1, 1], 
[0, 1, - 1, - 1, - 1, 1],
[1, 1, 1, 1, 1, 1],
[1, 1, 1, 1, - 1, 1],
[1, 1, 1, - 1, 1, 1],
[1, 1, 1, - 1, - 1, 1], 
[1, 1, - 1, 1, 1, 1],
[1, 1, - 1, 1, - 1, 1],
[1, 1, - 1, - 1, 1, 1],
[1, 1, - 1, - 1, - 1, 1],
[- 1, 1, 1, 1, 1, 1], 
[- 1, 1, 1, 1, - 1, 1],
[- 1, 1, 1, - 1, 1, 1],
[- 1, 1, 1, - 1, - 1, 1],
[- 1, 1, - 1, 1, 1, 1], 
[- 1, 1, - 1, 1, - 1, 1],
[- 1, 1, - 1, - 1, 1, 1],
[- 1, 1, - 1, - 1, - 1, 1]];

/* To test with gaussElim (should detect zero rows correctly) */
gaussTest :
[
[1, 1, 1, 1, 1, 1],
[- 1, - 1, 1, - 1, - 1, - 1],
[1, - 1, 1, 1, - 1, - 1],
[1, 1, - 1, - 1, - 1, - 1],
[- 1, - 1, - 1, 1, 1, 1]
];

gaussTest2 :
[[1, 1], [- 1, - 1], [- 1, 1]];


gcd_a : (x^2-1)*(x+2);
gcd_b : (x+1)*x;

ex1 : x^11-x^10+1;

ex2 : 9*x^13-18*x^11-33*x^10+102*x^8+7*x^7-36*x^6-122*x^5+
      49*x^4+93*x^3-42*x^2-18*x+9;

ex3 : x^4+a*x^2+b*x+c;

polP : expand((x+1)*(x-2));
polQ : expand(x*(x-1));
polR : expand(polP*(x-1));

  
HilbFunc(i,j) := 1/(i+j-1);
Hilbert(n) := 
  makelist(makelist(HilbFunc(i,j),i,1,n),j,1,n);


h1 : [3,0,2,0,2];
h2 : [3,0,-2,0,2];



m1 : make_array('any,3,3);
m1[0,0] : 1;m1[0,1] : 2;m1[0,2] : 3;
m1[1,0] : 4;m1[1,1] : 5;m1[1,2] : 6;
m1[2,0] : 7;m1[2,1] : 8;m1[2,2] : 9;



m2 : make_array('any,3,2);
m2[0,0]:"a";m2[0,1]:"b";
m2[1,0]:"c";m2[1,1]:"d";
m2[2,0]:"e";m2[2,1]:"f";
t : make_array('any,2,2);
t[0,0]:1;t[0,1]:0;t[1,0]:0;t[1,1]:1;


randPol(r,d) := sum(random(r)*x^i,i,0,d);
